numyears <- 50
N <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0:600))
?plot
# H = 20
H = 20
numyears <- 50
N <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N40_t, c(changeN20, changeN30, changeN40))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylim = range(c(changeN20, changeN30, changeN40)), ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
# Plot the first population
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Time', main = 'Population Changes Over Time')
N=1:500
dndt=r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
?abline
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2, lwd = 1.5)
abline(h = 40, lty = 2)
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.3
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.4
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size")
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 1)))
(max(N_small) + 50)
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
N_small
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 50)))
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_med) + 1)))
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_large) + 1)))
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size")
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size")
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size")
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(0, 0.2)
abline(0, 0.3, lty=2)
abline(0, 0.4, lty=3)
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N_20, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
N_30[1] <- N0
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N_30, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
N_40[1] <- N0
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N_40, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
gc()
gc()
# Set working directory here
setwd("../data")
# Read in social association matrix and listed data
sim_HI <- readRDS("sim_HI.RData") # HI Sim Matrix
ILV_mat <-readRDS("ILV_mat.RData") # Age and Sex Matrices
kov <- readRDS("kov.RDS")  # Home range overlap
nxn <- readRDS("nxn.RData") # Association Matrix
gr <- readRDS("kinship_matrix.RData")
# Prepare random effect for MCMC
num_nodes <- lapply(nxn, function(df) dim(df)[1])
node_names <- lapply(nxn, function(df) colnames(df))
# Separate IDs into i and j
node_ids_i <- lapply(num_nodes, function(df) matrix(rep(1:df, each = df), nrow = df, ncol = df))
node_ids_j <- lapply(node_ids_i, function(df) t(df))
# Format data
upper_tri <- lapply(nxn, function(df) upper.tri(df, diag = TRUE))
edge_nxn <- abind(lapply(nxn, function(mat) mat[upper.tri(mat, diag = TRUE)]), along = 2)
library(abind) # array
library(brms) # For brm model
library(rstan) # To make STAN run faster
edge_nxn <- abind(lapply(nxn, function(mat) mat[upper.tri(mat, diag = TRUE)]), along = 2)
## Split by 3 for int data
HAB_data <- as.data.frame(cbind(c(edge_nxn[,1], edge_nxn[,2], edge_nxn[,3]),
c(rep(1, nrow(edge_nxn)), rep(2, nrow(edge_nxn)),
rep(3, nrow(edge_nxn)))))
colnames(HAB_data) <- c("SRI", "HAB")
HAB_data$During <- ifelse(HAB_data$HAB == 2, 1, 0)
HAB_data$After <- ifelse(HAB_data$HAB == 3, 1, 0)
HI <- abind(lapply(sim_HI, function(mat) mat[upper.tri(mat, diag = TRUE)]), along = 2)
one <- lapply(seq_along(node_ids_i), function(i) factor(as.vector(node_names[[i]][node_ids_i[[i]][upper_tri[[i]]]]), levels = node_names[[i]]))
two <- lapply(seq_along(node_ids_j), function(i) factor(as.vector(node_names[[i]][node_ids_j[[i]][upper_tri[[i]]]]), levels = node_names[[i]]))
HAB_data
# Put data into a dataframe
df_list = data.frame(edge_weight = HAB_data[, 1],
HAB_During = HAB_data[, 3],
HAB_After = HAB_data[, 4],
Period = HAB_data[, 2],
HRO = unlist(lapply(kov, function (df) df[upper.tri(df, diag = TRUE)])),
sex_similarity = rep(ILV_mat[[1]][upper.tri(ILV_mat[[1]], diag = TRUE)], 3),
age_similarity = rep(ILV_mat[[2]][upper.tri(ILV_mat[[2]], diag = TRUE)], 3),
#GR = rep(gr[upper.tri(gr, diag = TRUE)], 3),
HI_similarity = c(HI[,c(1:3)]),
node_id_1 = unlist(one),
node_id_2 = unlist(two))
# Make sure that edge_weight is not whole numbers
df_list$edge_weight <- ifelse(df_list$edge_weight == 0, df_list$edge_weight + 0.00001,
ifelse(df_list$edge_weight == 1, df_list$edge_weight - 0.00001,
df_list$edge_weight))
# Help STAN run faster
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
fit_brm.3 <- brm(edge_weight ~ HI_similarity * Period +
HRO + age_similarity + sex_similarity +
(1 | mm(node_id_1, node_id_2)),
family = Beta(), chains = 3, data = df_list)
# Put data into a dataframe
df_list = data.frame(edge_weight = HAB_data[, 1],
HAB_During = HAB_data[, 3],
HAB_After = HAB_data[, 4],
Period = as.factor(HAB_data[, 2]),
HRO = unlist(lapply(kov, function (df) df[upper.tri(df, diag = TRUE)])),
sex_similarity = rep(ILV_mat[[1]][upper.tri(ILV_mat[[1]], diag = TRUE)], 3),
age_similarity = rep(ILV_mat[[2]][upper.tri(ILV_mat[[2]], diag = TRUE)], 3),
#GR = rep(gr[upper.tri(gr, diag = TRUE)], 3),
HI_similarity = c(HI[,c(1:3)]),
node_id_1 = unlist(one),
node_id_2 = unlist(two))
# Make sure that edge_weight is not whole numbers
df_list$edge_weight <- ifelse(df_list$edge_weight == 0, df_list$edge_weight + 0.00001,
ifelse(df_list$edge_weight == 1, df_list$edge_weight - 0.00001,
df_list$edge_weight))
# Help STAN run faster
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
str(df_list)
fit_brm.3 <- brm(edge_weight ~ HI_similarity * Period +
HRO + age_similarity + sex_similarity +
(1 | mm(node_id_1, node_id_2)),
family = Beta(), chains = 3, data = df_list)
?loo_compare
summary(fit_brm.3)
# Check for model convergence
model <- fit_brm.3
plot(model)
pp_check(model) # check to make sure they line up
theme_update(text = element_text(family = "sans"))
library(bayesplot) # plot parameters
theme_update(text = element_text(family = "sans"))
library(tidybayes)
theme_update(text = element_text(family = "sans"))
library(ggplot2) # Visualization
theme_update(text = element_text(family = "sans"))
# Create mcmc_areas plot
mcmc_plot <- mcmc_areas(
as.array(model),
pars = c("b_HI_similarity", "b_HAB_During", "b_HAB_After",
"b_HRO", "b_age_similarity", "b_sex_similarity",
"b_HI_similarity:HAB_During", "b_HI_similarity:HAB_After"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean",
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 80% intervals"
) +
theme_update(text = element_text(family = "sans"))
# Find the significance
posterior_samples <- as.data.frame(as.matrix( posterior_samples(model) ))
coefficients <- colnames(posterior_samples)
coefficients
# Create mcmc_areas plot
mcmc_plot <- mcmc_areas(
as.array(model),
pars = c("b_HI_similarity", "b_Period2", "b_Period3",
"b_HRO", "b_age_similarity", "b_sex_similarity",
"b_HI_similarity:Period2", "b_HI_similarity:Period3"),
prob = 0.8, # 80% intervals
prob_outer = 0.99, # 99%
point_est = "mean",
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 80% intervals"
) +
theme_update(text = element_text(family = "sans"))
mcmc_plot + scale_y_discrete(
labels = c(
"b_Period2" = "During HAB",
"b_Period3" = "After HAB",
"b_HRO" = "HRO",
"b_age_similarity" = "Age Similarity",
"b_sex_similarity" = "Sex Similarity",
"b_HI_similarity" = "HC Similarity",
"b_HI_similarity:Period2" = "HC Similarity:During HAB",
"b_HI_similarity:Period3" = "HC Similarity:After HAB"
)
)
theme_update(text = element_text(family = "sans"))
# Create mcmc_areas plot
mcmc_plot <- mcmc_areas(
as.array(model),
pars = c("b_HI_similarity", "b_Period2", "b_Period3",
"b_HRO", "b_age_similarity", "b_sex_similarity",
"b_HI_similarity:Period2", "b_HI_similarity:Period3"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean",
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_update(text = element_text(family = "sans"))
mcmc_plot + scale_y_discrete(
labels = c(
"b_Period2" = "During HAB",
"b_Period3" = "After HAB",
"b_HRO" = "HRO",
"b_age_similarity" = "Age Similarity",
"b_sex_similarity" = "Sex Similarity",
"b_HI_similarity" = "HC Similarity",
"b_HI_similarity:Period2" = "HC Similarity:During HAB",
"b_HI_similarity:Period3" = "HC Similarity:After HAB"
)
)
# Create mcmc_areas plot
mcmc_plot <- mcmc_areas(
as.array(model),
pars = c("b_HI_similarity", "b_Period2", "b_Period3",
"b_HRO", "b_age_similarity", "b_sex_similarity",
"b_HI_similarity:Period2", "b_HI_similarity:Period3"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_minimal() + # Use a minimal theme
theme(
text = element_text(family = "sans"), # Set text family
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # Remove panel background
axis.line = element_line(color = "black") # Add axis lines
)
mcmc_plot + scale_y_discrete(
labels = c(
"b_Period2" = "During HAB",
"b_Period3" = "After HAB",
"b_HRO" = "HRO",
"b_age_similarity" = "Age Similarity",
"b_sex_similarity" = "Sex Similarity",
"b_HI_similarity" = "HC Similarity",
"b_HI_similarity:Period2" = "HC Similarity:During HAB",
"b_HI_similarity:Period3" = "HC Similarity:After HAB"
)
)
mean(posterior_samples$`b_HI_similarity:Period3` > 0)
mean(posterior_samples$`b_HI_similarity:Period3` < 0)
# Multimembership models in brms
fit_brm.0 <- brm(edge_weight ~ (1 | mm(node_id_1, node_id_2)),
family = Beta(), chains = 3, data = df_list)
saveRDS(fit_brm.3, "fit_brm.3.RData")
saveRDS(fit_brm.0, "fit_sri.0.RData")
saveRDS(fit_brm.3, "fit_sri.2.RData")
fit_sri.1 <- brm(edge_weight ~ HI_similarity + Period +
HRO + age_similarity + sex_similarity +
(1 | mm(node_id_1, node_id_2)),
family = Beta(), chains = 3, data = df_list)
saveRDS(fit_sri.1, "fit_sri.1.RData")
gc()
# Summary Statistics
fit_sri.0 <- readRDS("fit_sri.0.RData")
fit_sri.1 <- readRDS("fit_sri.1.RData")
fit_sri.2 <- readRDS("fit_sri.2.RData")
# Save data
looic.h1 <- loo(fit_sri.0, fit_sri.1, fit_sri.2, compare = T)
saveRDS(looic.h1, "looic.h1.RData")
