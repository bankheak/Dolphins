col='grey70',
main = 'Restrictive null model',
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Check whether pattern of connections is non-random
par(mfrow=c(2, 1))
# Create a list to store the histograms
hist_cvs <- list()
# Create histograms for each element in cv_null
for (i in seq_along(cv_null)) {
hist_cvs[[i]] <- hist(cv_null[[i]],
breaks=50,
xlim = c(min(cv_null[[i]]), max(cv_obs[[i]] + 8)),
col='grey70',
main = 'Restrictive null model',
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Check whether pattern of connections is non-random
par(mfrow=c(2, 1))
# Create a list to store the histograms
hist_cvs <- list()
# Create histograms for each element in cv_null
for (i in seq_along(cv_null)) {
hist_cvs[[i]] <- hist(cv_null[[i]],
breaks=50,
xlim = c(min(cv_null[[i]]), max(cv_obs[[i]] + 6)),
col='grey70',
main = 'Restrictive null model',
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Check whether pattern of connections is non-random
par(mfrow=c(2, 1))
# Create a list to store the histograms
hist_cvs <- list()
# Create histograms for each element in cv_null
for (i in seq_along(cv_null)) {
hist_cvs[[i]] <- hist(cv_null[[i]],
breaks=50,
xlim = c(min(cv_null[[i]]), max(cv_obs[[i]] + 7)),
col='grey70',
main = 'Restrictive null model',
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Check whether pattern of connections is non-random
par(mfrow=c(2, 1))
# Create a list to store the histograms
hist_cvs <- list()
# Create histograms for each element in cv_null
for (i in seq_along(cv_null)) {
hist_cvs[[i]] <- hist(cv_null[[i]],
breaks=50,
xlim = c(min(cv_null[[i]]), max(cv_obs[[i]] + 10)),
col='grey70',
main = 'Restrictive null model',
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Check whether pattern of connections is non-random
par(mfrow=c(2, 1))
# Create a list to store the histograms
hist_cvs <- list()
# Create histograms for each element in cv_null
for (i in seq_along(cv_null)) {
hist_cvs[[i]] <- hist(cv_null[[i]],
breaks=50,
xlim = c(min(cv_null[[i]]), max(cv_obs[[i]] + 10)),
col='grey70',
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Check whether pattern of connections is non-random
par(mfrow=c(2, 1))
# Create a list to store the histograms
hist_cvs <- list()
# Create histograms for each element in cv_null
for (i in seq_along(cv_null)) {
hist_cvs[[i]] <- hist(cv_null[[i]],
breaks=50,
xlim = c(min(cv_null[[i]]), max(cv_obs[[i]] + 10)),
col='grey70',
main = NULL,
xlab="Null CV SRI")
# Add lines for empirical CV, 2.5% CI, and 97.5% CI
abline(v= cv_obs[[i]], col="red")
abline(v= cv_ci[[i]], col="blue")
abline(v= cv_ci[[i]], col="blue")
}
# Set working directory here
setwd("../data")
list_years <- readRDS("list_years.RData") # Data listed into periods
list_years <- readRDS("list_years.RData") # Data listed into periods
# Extract specific columns from each data frame in list_years
aux_data <- function(list_years) {
aux <- lapply(list_years, function(df) {
data.frame(
Code = df$Code,
Behaviors = df$Behaviors,
HumanInteraction = df$HumanInteraction,
ConfHI = df$ConfHI)})
# Add the 'Foraging' variable to each data frame in the 'aux' list
aux <- lapply(aux, function(df) {
df$Foraging <- "Other"
df$Foraging[grepl(pattern = 'Feed', x = df$Behaviors, ignore.case = FALSE)] <- "Feed"
df
})
return(aux)
}
aux <- aux_data(list_years)
# Categorize ID to Foraging
ID_forg <- function(aux_data) {
IDbehav <- lapply(aux_data, function(df) {
df <- table(df$Code, df$Foraging)
df <- as.data.frame(df, stringsAsFactors = FALSE)
df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
return(IDbehav)
}
IDbehav <- ID_forg(aux)
# HI behaviors should be partitioned into 3 different types---------------------
#' BG = Beg: F, G
#' SD = Scavenge and Depredation: B, C, D, E
#' FG = Fixed Gear Interaction: P
# Change the code using ifelse statements
subset_HI <- function(aux_data) {
for (i in seq_along(aux_data)) {
aux_data[[i]]$DiffHI <- ifelse(aux_data[[i]]$ConfHI %in% c("F", "G"), "BG",
ifelse(aux_data[[i]]$ConfHI %in% c("B", "C", "D", "E"), "SD",
ifelse(aux_data[[i]]$ConfHI %in% c("P"), "FG", "None")))
}
return(aux_data)  # Return the modified list of data frames
}
aux <- subset_HI(aux)
# Categorize DiffHI to IDs
diff_raw <- function(aux_data) {
rawHI_diff <- lapply(aux_data, function(df) {
table_df <- as.data.frame(table(df$Code, df$DiffHI))
colnames(table_df) <- c("Code", "DiffHI", "Freq")
return(table_df)
})}
rawHI_diff <- diff_raw(aux)
# Create a frequency count for each HI behavior
get_IDHI <- function(HI, IDbehav_data, rawHI_diff_data) {
lapply(seq_along(IDbehav_data), function(i) {
df <- IDbehav_data[[i]]
HI_freq <- rawHI_diff_data[[i]]$Freq[rawHI_diff_data[[i]]$DiffHI == HI]
df$HI <- HI_freq[match(df$Code, rawHI_diff_data[[i]]$Code)]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
# Including zeros
IDbehav_BG <- get_IDHI("BG", IDbehav, rawHI_diff)
IDbehav_FG <- get_IDHI("FG", IDbehav, rawHI_diff)
IDbehav_SD <- get_IDHI("SD", IDbehav, rawHI_diff)
saveRDS(IDbehav_BG, "IDbehav_BG.RData")
saveRDS(IDbehav_FG, "IDbehav_FG.RData")
saveRDS(IDbehav_SD, "IDbehav_SD.RData")
knitr::opts_chunk$set(echo = TRUE)
# Set working directory here
setwd("../data")
# Load all necessary packages
require(asnipe) # get_group_by_individual--Damien Farine
require(assocInd) # Could do permutatioNP
require(vegan)
require(doParallel) # Run multiple cores for faster computing
require(foreach)
library(reshape2) # For graphing
library(gridExtra) # To combine plots
# Read in full datasheet and list (after wrangling steps)
sample_data <- read.csv("sample_data.csv")
list_years <- readRDS("list_years.RData")
nxn <- readRDS("nxn.RData")
## Step 3: Calculate the average of non-diagonal elements in the pairing sub-matrices
### Function to calculate avg
avg_comb <- function(a, b, c, d) {
avg_a <- lapply(seq_along(a), function(i) {
mean(a[[i]][lower.tri(a[[i]])])
})
var_a <- lapply(seq_along(a), function(i) {
var(a[[i]][lower.tri(a[[i]])])
})
name_a <- lapply(a, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_b <- lapply(seq_along(b), function(i) {
mean(b[[i]][lower.tri(b[[i]])])
})
var_b <- lapply(seq_along(b), function(i) {
var(b[[i]][lower.tri(b[[i]])])
})
name_b <- lapply(b, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_c <- lapply(seq_along(c), function(i) {
mean(c[[i]][lower.tri(c[[i]])])
})
var_c <- lapply(seq_along(c), function(i) {
var(c[[i]][lower.tri(c[[i]])])
})
name_c <- lapply(c, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_d <- lapply(seq_along(d), function(i) {
mean(d[[i]][lower.tri(d[[i]])])
})
var_d <- lapply(seq_along(d), function(i) {
var(d[[i]][lower.tri(d[[i]])])
})
name_d <- lapply(d, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avgvar_df <- data.frame(
Period = rep(c(1, 2), 4),
Category = c(name_a[[1]], name_a[[2]],
name_b[[1]], name_b[[2]],
name_c[[1]], name_c[[2]],
name_d[[1]], name_d[[2]]),
Average = c(unlist(avg_a)[[1]], unlist(avg_a)[[2]],
unlist(avg_b)[[1]], unlist(avg_b)[[2]],
unlist(avg_c)[[1]], unlist(avg_c)[[2]],
unlist(avg_d)[[1]], unlist(avg_d)[[2]]),
Variation = c(unlist(var_a)[[1]], unlist(var_a)[[2]],
unlist(var_b)[[1]], unlist(var_b)[[2]],
unlist(var_c)[[1]], unlist(var_c)[[2]],
unlist(var_d)[[1]], unlist(var_d)[[2]]))
return(avgvar_df)
}
# Begging
avg_BG <- avg_comb(NBG_NBG, NBG_BG, BG_NBG, BG_BG)
# Read in different behavior's data frames from "GLMM.R"
IDbehav_BG <- readRDS("../data/IDbehav_BG.RData")
IDbehav_SD <- readRDS("../data/IDbehav_SD.RData")
IDbehav_FG <- readRDS("../data/IDbehav_FG.RData")
# Get unique behavior assignments
status <- function(IDbehav, HI, NonHI){
lapply(seq_along(IDbehav), function(i) {
IDbehav[[i]]$Stat <- ifelse(IDbehav[[i]]$HI > 0, HI, NonHI)
df <- IDbehav[[i]][, c('Code', 'Stat')]
df
})
}
## Match each individual with it's behavior
BG <- status(IDbehav_BG, "BG", "NBG")
SD <- status(IDbehav_SD, "SD", "NSD")
FG <- status(IDbehav_FG, "FG", "NFG")
# Replace individuals in the matrix with their assigned behavior
replace_ID_with_HI <- function(sri_matrix, ID_HI_df) {
# Create vector that matches IDs to their stat
id_to_stat <- setNames(ID_HI_df$Stat, ID_HI_df$Code)
# Replace each ID with stat in row and column names
row_names <- id_to_stat[rownames(sri_matrix)]
col_names <- id_to_stat[colnames(sri_matrix)]
# Create the replaced matrix
replaced_matrix <- sri_matrix
# Assign row and column names with behavioral states
dimnames(replaced_matrix) <- list(row_names, col_names)
return(replaced_matrix)
}
# Make a replaced nxn for each behavior
BG_nxn <- lapply(seq_along(nxn), function(i) {
replace_ID_with_HI(nxn[[i]], BG[[i]])
})
SD_nxn <- lapply(seq_along(nxn), function(i) {
replace_ID_with_HI(nxn[[i]], SD[[i]])
})
FG_nxn <- lapply(seq_along(nxn), function(i) {
replace_ID_with_HI(nxn[[i]], FG[[i]])
})
## Step 1: Create a matrix for each category of stat
is_NBG <- is_BG <- list()
for (i in seq_along(BG_nxn)) {
is_NBG[[i]] <- rownames(BG_nxn[[i]]) == "NBG"
is_BG[[i]] <- rownames(BG_nxn[[i]]) == "BG"
}
is_NFG <- is_FG <- list()
for (i in seq_along(FG_nxn)) {
is_NFG[[i]] <- rownames(FG_nxn[[i]]) == "NFG"
is_FG[[i]] <- rownames(FG_nxn[[i]]) == "FG"
}
is_NSD <- is_SD <- list()
for (i in seq_along(SD_nxn)) {
is_NSD[[i]] <- rownames(SD_nxn[[i]]) == "NSD"
is_SD[[i]] <- rownames(SD_nxn[[i]]) == "SD"
}
## Step 2: Extract the combinations
### Function to extract combinations
extract_combs <- function(HI_nxn, is_row, is_col) {
combs <- lapply(seq_along(HI_nxn), function(i) {
HI_nxn[[i]][is_row[[i]], is_col[[i]]]
})
return(combs)
}
#### Apply for each stat comb
NBG_NBG <- extract_combs(BG_nxn, is_NBG, is_NBG)
NBG_BG <- extract_combs(BG_nxn, is_NBG, is_BG)
BG_NBG <- extract_combs(BG_nxn, is_BG, is_NBG)
BG_BG <- extract_combs(BG_nxn, is_BG, is_BG)
NFG_NFG <- extract_combs(FG_nxn, is_NFG, is_NFG)
NFG_FG <- extract_combs(FG_nxn, is_NFG, is_FG)
FG_NFG <- extract_combs(FG_nxn, is_FG, is_NFG)
FG_FG <- extract_combs(FG_nxn, is_FG, is_FG)
NSD_NSD <- extract_combs(SD_nxn, is_NSD, is_NSD)
NSD_SD <- extract_combs(SD_nxn, is_NSD, is_SD)
SD_NSD <- extract_combs(SD_nxn, is_SD, is_NSD)
SD_SD <- extract_combs(SD_nxn, is_SD, is_SD)
## Step 3: Calculate the average of non-diagonal elements in the pairing sub-matrices
### Function to calculate avg
avg_comb <- function(a, b, c, d) {
avg_a <- lapply(seq_along(a), function(i) {
mean(a[[i]][lower.tri(a[[i]])])
})
var_a <- lapply(seq_along(a), function(i) {
var(a[[i]][lower.tri(a[[i]])])
})
name_a <- lapply(a, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_b <- lapply(seq_along(b), function(i) {
mean(b[[i]][lower.tri(b[[i]])])
})
var_b <- lapply(seq_along(b), function(i) {
var(b[[i]][lower.tri(b[[i]])])
})
name_b <- lapply(b, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_c <- lapply(seq_along(c), function(i) {
mean(c[[i]][lower.tri(c[[i]])])
})
var_c <- lapply(seq_along(c), function(i) {
var(c[[i]][lower.tri(c[[i]])])
})
name_c <- lapply(c, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_d <- lapply(seq_along(d), function(i) {
mean(d[[i]][lower.tri(d[[i]])])
})
var_d <- lapply(seq_along(d), function(i) {
var(d[[i]][lower.tri(d[[i]])])
})
name_d <- lapply(d, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avgvar_df <- data.frame(
Period = rep(c(1, 2), 4),
Category = c(name_a[[1]], name_a[[2]],
name_b[[1]], name_b[[2]],
name_c[[1]], name_c[[2]],
name_d[[1]], name_d[[2]]),
Average = c(unlist(avg_a)[[1]], unlist(avg_a)[[2]],
unlist(avg_b)[[1]], unlist(avg_b)[[2]],
unlist(avg_c)[[1]], unlist(avg_c)[[2]],
unlist(avg_d)[[1]], unlist(avg_d)[[2]]),
Variation = c(unlist(var_a)[[1]], unlist(var_a)[[2]],
unlist(var_b)[[1]], unlist(var_b)[[2]],
unlist(var_c)[[1]], unlist(var_c)[[2]],
unlist(var_d)[[1]], unlist(var_d)[[2]]))
return(avgvar_df)
}
# Begging
avg_BG <- avg_comb(NBG_NBG, NBG_BG, BG_NBG, BG_BG)
# Plot the differences
# Convert Period to a factor for distinct colors
avg_BG$Period <- factor(avg_BG$Period)
# Define your own colors for each period
period_colors <- c("red", "blue")  # Add more colors if needed
ggplot(avg_BG, aes(x = Category, y = Average, fill = Period, color = Period)) +
geom_point(position = position_dodge(width = 0.9), size = 3, stat = "identity") +
geom_errorbar(aes(ymin = Average - Variation, ymax = Average + Variation),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Pairs", y = "Average") +
ggtitle("Average Differences for Each Pair") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = period_colors) +
scale_color_manual(values = period_colors)
library(ggplot2)
library(gridExtra) # To combine plots
## Step 3: Calculate the average of non-diagonal elements in the pairing sub-matrices
### Function to calculate avg
avg_comb <- function(a, b, c, d) {
avg_a <- lapply(seq_along(a), function(i) {
mean(a[[i]][lower.tri(a[[i]])])
})
var_a <- lapply(seq_along(a), function(i) {
var(a[[i]][lower.tri(a[[i]])])
})
name_a <- lapply(a, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_b <- lapply(seq_along(b), function(i) {
mean(b[[i]][lower.tri(b[[i]])])
})
var_b <- lapply(seq_along(b), function(i) {
var(b[[i]][lower.tri(b[[i]])])
})
name_b <- lapply(b, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_c <- lapply(seq_along(c), function(i) {
mean(c[[i]][lower.tri(c[[i]])])
})
var_c <- lapply(seq_along(c), function(i) {
var(c[[i]][lower.tri(c[[i]])])
})
name_c <- lapply(c, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avg_d <- lapply(seq_along(d), function(i) {
mean(d[[i]][lower.tri(d[[i]])])
})
var_d <- lapply(seq_along(d), function(i) {
var(d[[i]][lower.tri(d[[i]])])
})
name_d <- lapply(d, function(df) {
paste(unique(rownames(df)), unique(colnames(df)), sep = "_")
})
avgvar_df <- data.frame(
Period = rep(c(1, 2), 4),
Category = c(name_a[[1]], name_a[[2]],
name_b[[1]], name_b[[2]],
name_c[[1]], name_c[[2]],
name_d[[1]], name_d[[2]]),
Average = c(unlist(avg_a)[[1]], unlist(avg_a)[[2]],
unlist(avg_b)[[1]], unlist(avg_b)[[2]],
unlist(avg_c)[[1]], unlist(avg_c)[[2]],
unlist(avg_d)[[1]], unlist(avg_d)[[2]]),
Variation = c(unlist(var_a)[[1]], unlist(var_a)[[2]],
unlist(var_b)[[1]], unlist(var_b)[[2]],
unlist(var_c)[[1]], unlist(var_c)[[2]],
unlist(var_d)[[1]], unlist(var_d)[[2]]))
return(avgvar_df)
}
# Begging
avg_BG <- avg_comb(NBG_NBG, NBG_BG, BG_NBG, BG_BG)
# Plot the differences
# Convert Period to a factor for distinct colors
avg_BG$Period <- factor(avg_BG$Period)
# Define your own colors for each period
period_colors <- c("red", "blue")  # Add more colors if needed
ggplot(avg_BG, aes(x = Category, y = Average, fill = Period, color = Period)) +
geom_point(position = position_dodge(width = 0.9), size = 3, stat = "identity") +
geom_errorbar(aes(ymin = Average - Variation, ymax = Average + Variation),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Pairs", y = "Average") +
ggtitle("Average Differences for Each Pair") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = period_colors) +
scale_color_manual(values = period_colors)
# Foraging around fixed gear
avg_FG <- avg_comb(NFG_NFG, NFG_FG, FG_NFG, FG_FG)
# Plot the differences
# Convert Period to a factor for distinct colors
avg_FG$Period <- factor(avg_FG$Period)
# Define your own colors for each period
period_colors <- c("red", "blue")  # Add more colors if needed
ggplot(avg_FG, aes(x = Category, y = Average, fill = Period, color = Period)) +
geom_point(position = position_dodge(width = 0.9), size = 3, stat = "identity") +
geom_errorbar(aes(ymin = Average - Variation, ymax = Average + Variation),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Pairs", y = "Average") +
ggtitle("Average Differences for Each Pair") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = period_colors) +
scale_color_manual(values = period_colors)
# Scavenging/Depredation
avg_SD <- avg_comb(NSD_NSD, NSD_SD, SD_NSD, SD_SD)
# Plot the differences
# Convert Period to a factor for distinct colors
avg_SD$Period <- factor(avg_SD$Period)
# Define your own colors for each period
period_colors <- c("red", "blue")  # Add more colors if needed
ggplot(avg_SD, aes(x = Category, y = Average, fill = Period, color = Period)) +
geom_point(position = position_dodge(width = 0.9), size = 3, stat = "identity") +
geom_errorbar(aes(ymin = Average - Variation, ymax = Average + Variation),
position = position_dodge(width = 0.9), width = 0.25) +
labs(x = "Pairs", y = "Average") +
ggtitle("Average Differences for Each Pair") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = period_colors) +
scale_color_manual(values = period_colors)
avg_SD
avg_SD
