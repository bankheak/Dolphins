response = full.data$seals, #y-axis variable
fun = median, #metric to plot
ylab = "Number of Seals Hauled-out",
xlab = "Noise Level (dB)",
col = c("pink", "blue"),
lty = 1, #line type
lwd = 2, #line width
trace.label = "Site")
newdata <- data.frame(noise = mean(full.data$noise),
site = factor(1:2, levels = 1:2,
labels = unique(full.data$site)))
m3<- glm.nb(seals ~ site * noise, data = full.data)
newdata$phat <- predict.glm(m3, newdata, type = "response")
newdata
# Plot
newdata2 <- data.frame(
noise = rep(seq(from = min(full.data$noise), to = max(full.data$noise), length.out = 100), 2),
site = factor(rep(1:2, each = 100), levels = 1:2, labels =
unique(full.data$site)))
newdata2 <- cbind(newdata2, predict(m3, newdata2, type = "link", se.fit=TRUE))
newdata2 <- within(newdata2, {
seals <- exp(fit)
LL <- exp(fit - 1.96 * se.fit)
UL <- exp(fit + 1.96 * se.fit)
})
ggplot(newdata2, aes(noise, seals)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = site), alpha = .25) +
geom_line(aes(colour = site), linewidth = 2) +
labs(x = "Noise Level (dB)", y = "Predicted Number of Seals Hauled-out")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("galapagos.csv")
attach(data)
fit1 <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent)
summary(fit1)
plot(fit1$fitted, fit1$resid, xlab="Fitted Values", ylab="Residuals", pch=16)
abline(h=0)
plot(Area, fit1$resid, xlab="Area", ylab="Residuals", pch=16)
abline(h=0)
plot(Area, fit1$resid, xlab="Area", ylab="Residuals", pch=16)
abline(h=0)
which(Area>1500)
# Make Observation Column
data$Obs<- seq_along(data[,1])
# Leverage
levg<- hatvalues(fit1)
plot(Obs, levg, ylab="Leverage",xlab="Observations")
# Make Observation Column
data$Obs<- seq_along(data[,1])
attach(data)
# Leverage
levg<- hatvalues(fit1)
plot(Obs, levg, ylab="Leverage",xlab="Observations")
abline(h=0.5, lty="dashed",col="red")
which(levg>0.5)
# Cook's Distance
cooksd<- cooks.distance(fit1)
plot(Obs,cooksd, ylab="Cook distance",xlab="Observations")
abline(h=1, lty="dashed",col="red")
abline(h = 4/17, col="red")
which(cooksd>1)
# Standardized Residuals
standard_res <- rstandard(fit1)
plot(Obs,standard_res, ylab="Standardized residuals",xlab="Observations")
abline(h=0, lty="dashed") # We include line at 0 for reference
abline(h=2, lty="dashed",col="red") # We include this value for reference
abline(h=-2, lty="dashed",col="red") # We include this value for reference
which(abs((standard_res))>2)
View(data)
labelsubs <- subset(data, levg>0.4)
labelsubs
View(labelsubs)
# Make Observation Column
data$Obs<- seq_along(data[,1])
attach(data)
# Leverage  2(6)/30=0.4
levg<- hatvalues(fit1)
labelsubs <- subset(data, levg>0.4)
plot(Obs, levg, ylab="Leverage",xlab="Observations")
abline(h=0.4, lty="dashed",col="red")
text(labelsubs$X, labelsubs$Obs, row.names(labelsubs), pos=1, col="red")
which(levg>0.4)
# Cook's Distance
cooksd<- cooks.distance(fit1)
plot(Obs,cooksd, ylab="Cook distance",xlab="Observations")
abline(h=1, lty="dashed",col="red")
abline(h = 4/17, col="red")
which(cooksd>1)
# Standardized Residuals
standard_res <- rstandard(fit1)
plot(Obs,standard_res, ylab="Standardized residuals",xlab="Observations")
abline(h=0, lty="dashed") # We include line at 0 for reference
abline(h=2, lty="dashed",col="red") # We include this value for reference
abline(h=-2, lty="dashed",col="red") # We include this value for reference
which(abs((standard_res))>2)
levg<- hatvalues(fit1)
# Make Observation Column
data$Obs<- seq_along(data[,1])
attach(data)
# Leverage  2(6)/30=0.4
levg<- hatvalues(fit1)
labelsubs <- subset(data, levg>0.4)
plot(Obs, levg, ylab="Leverage",xlab="Observations")
abline(h=0.4, lty="dashed",col="red")
text(Obs, levg, row.names(labelsubs), pos=1, col="red")
which(levg>0.4)
# Cook's Distance
cooksd<- cooks.distance(fit1)
plot(Obs,cooksd, ylab="Cook distance",xlab="Observations")
abline(h=1, lty="dashed",col="red")
abline(h = 4/17, col="red")
which(cooksd>1)
# Standardized Residuals
standard_res <- rstandard(fit1)
plot(Obs,standard_res, ylab="Standardized residuals",xlab="Observations")
abline(h=0, lty="dashed") # We include line at 0 for reference
abline(h=2, lty="dashed",col="red") # We include this value for reference
abline(h=-2, lty="dashed",col="red") # We include this value for reference
which(abs((standard_res))>2)
# Make Observation Column
data$Obs<- seq_along(data[,1])
attach(data)
# Leverage  2(6)/30=0.4
levg<- hatvalues(fit1)
plot(Obs, levg, ylab="Leverage",xlab="Observations")
abline(h=0.4, lty="dashed",col="red")
which(levg>0.4)
# Cook's Distance
cooksd<- cooks.distance(fit1)
plot(Obs,cooksd, ylab="Cook distance",xlab="Observations")
abline(h=1, lty="dashed",col="red")
abline(h = 4/17, col="red")
which(cooksd>1)
# Standardized Residuals
standard_res <- rstandard(fit1)
plot(Obs,standard_res, ylab="Standardized residuals",xlab="Observations")
abline(h=0, lty="dashed") # We include line at 0 for reference
abline(h=2, lty="dashed",col="red") # We include this value for reference
abline(h=-2, lty="dashed",col="red") # We include this value for reference
which(abs((standard_res))>2)
data2<- data[-c(8, 12, 15, 16, 19, 25),]
View(data2)
length(data2)
# Remove 17
data2<- data[-c(8, 12, 15, 16, 19, 25),]
attach(data2)
fit2 <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent)
summary(fit2)
# Remove 17
data2<- data[-c(8, 12, 15, 16, 19, 25),]
attach(data2)
fit2 <- lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent)
summary(fit2)
View(data)
fat <- read.csv("fat.csv")
head(fat[1:10,])
knitr::opts_chunk$set(echo = TRUE)
dim(fat)
install.packages("olsrr")
fat <- read.csv("fat.csv")
# Show data
head(fat[1:10,])
# A) Dimensions of data
dim(fat)
# B) Split the data in a “training set” and a “testing set”
n <- nrow(fat)
remove.ind <- seq(10, n, by=10)
test <- fat[remove.ind, ]
train <- fat[-remove.ind, ]
full<- lm(siri ~ age + weight + height + adipos + free + neck + chest + hip + thigh + knee + ankle + biceps + forearm + wrist, data = train)
summary(full)
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forwardmod
backmod
install.packages("leaps")
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
require(leaps)
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
# A) T = smallest AIC
calc.AIC <- n * log(summary(all)$rss / n) + 2*(2:(p+1))
summary(all)$which[which.min(calc.AIC),]
min.AIC<- lm(siri ~ adipos + free + weights + forearm + chest + thigh + age, data = train)
require(leaps)
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
# A) T = smallest AIC
calc.AIC <- n * log(summary(all)$rss / n) + 2*(2:(p+1))
summary(all)$which[which.min(calc.AIC),]
min.AIC<- lm(siri ~ adipos + free + weights + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
require(leaps)
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
# A) T = smallest AIC
calc.AIC <- n * log(summary(all)$rss / n) + 2*(2:(p+1))
summary(all)$which[which.min(calc.AIC),]
min.AIC <- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
summary(min.AIC)
# B)
summary(all)$which[which.min(summary(all)$bic),]
min.BIC<- lm(siri ~ adipos + free + weights + forearm + chest + thigh + age, data = train)
require(leaps)
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
# A) T = smallest AIC
calc.AIC <- n * log(summary(all)$rss / n) + 2*(2:(p+1))
summary(all)$which[which.min(calc.AIC),]
min.AIC <- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
summary(min.AIC)
# B)
summary(all)$which[which.min(summary(all)$bic),]
min.BIC<- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom, data = train)
summary(min.BIC)
# C)
summary(all)$which[which.min(summary(all)$cp),]
min.cp<- lm(siri ~ adipos + free + weights + forearm + chest + thigh + age, data = train)
require(leaps)
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
# A) T = smallest AIC
calc.AIC <- n * log(summary(all)$rss / n) + 2*(2:(p+1))
summary(all)$which[which.min(calc.AIC),]
min.AIC <- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
summary(min.AIC)
# B)
summary(all)$which[which.min(summary(all)$bic),]
min.BIC<- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom, data = train)
summary(min.BIC)
# C)
summary(all)$which[which.min(summary(all)$cp),]
min.cp<- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
summary(min.cp)
truth <- test$siri
# Predict model
pred.full <- predict(full, newdata=test)
pred.all <- predict(all, newdata=test)
truth <- test$siri
# Predict model
pred.full <- predict(full, newdata=test)
pred.AIC <- predict(min.AIC, newdata=test)
pred.BIC <- predict(min.BIC, newdata=test)
pred.cp <- predict(min.cp, newdata=test)
# A) RMSE
rmse.full <- sqrt(mean((truth-pred.full)^2))
rmse.AIC <- sqrt(mean((truth-pred.AIC)^2))
rmse.BIC <- sqrt(mean((truth-pred.BIC)^2))
rmse.cp <- sqrt(mean((truth-pred.cp)^2))
truth <- test$siri
# Predict model
pred.full <- predict(full, newdata=test)
pred.AIC <- predict(min.AIC, newdata=test)
pred.BIC <- predict(min.BIC, newdata=test)
pred.cp <- predict(min.cp, newdata=test)
# A) RMSE
rmse.full <- sqrt(mean((truth-pred.full)^2))
rmse.full
rmse.AIC <- sqrt(mean((truth-pred.AIC)^2))
rmse.AIC
rmse.BIC <- sqrt(mean((truth-pred.BIC)^2))
rmse.BIC
rmse.cp <- sqrt(mean((truth-pred.cp)^2))
rmse.cp
knitr::opts_chunk$set(echo = TRUE)
fat <- read.csv("fat.csv")
# Show data
head(fat[1:10,])
# A) Dimensions of data
dim(fat)
# B) Split the data in a “training set” and a “testing set”
n <- nrow(fat)
remove.ind <- seq(10, n, by=10)
test <- fat[remove.ind, ]
train <- fat[-remove.ind, ]
full<- lm(siri ~ age + weight + height + adipos + free + neck + chest + hip + thigh + knee + ankle + biceps + forearm + wrist + abdom, data = train)
summary(full)
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forward.mod
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forwardmod
backmod
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forward.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
forward.mod
back.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train, data = train)
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forward.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
forward.mod
back.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
back.mod
require(leaps)
p <- ncol(train) - 3 # response, brozek, density not predictors
all <- regsubsets(siri ~ . - brozek - density, data=train, nvmax=p)
# A) T = smallest AIC
calc.AIC <- n * log(summary(all)$rss / n) + 2*(2:(p+1))
summary(all)$which[which.min(calc.AIC),]
min.AIC <- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
summary(min.AIC)
# B)
summary(all)$which[which.min(summary(all)$bic),]
min.BIC<- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom, data = train)
summary(min.BIC)
# C)
summary(all)$which[which.min(summary(all)$cp),]
min.cp<- lm(siri ~ adipos + free + weight + forearm + chest + thigh + abdom + knee + ankle + biceps, data = train)
summary(min.cp)
truth <- test$siri
# Predict model
pred.full <- predict(full, newdata=test)
pred.forward.mod <- predict(forward.mod, newdata=test)
pred.back.mod <- predict(back.mod, newdata=test)
pred.AIC <- predict(min.AIC, newdata=test)
pred.BIC <- predict(min.BIC, newdata=test)
pred.cp <- predict(min.cp, newdata=test)
# A) RMSE
rmse.full <- sqrt(mean((truth-pred.full)^2))
rmse.full
rmse.for <- sqrt(mean((truth-pred.forward.mod)^2))
rmse.for
rmse.back <- sqrt(mean((truth-pred.back.mod)^2))
rmse.back
rmse.AIC <- sqrt(mean((truth-pred.AIC)^2))
rmse.AIC
rmse.BIC <- sqrt(mean((truth-pred.BIC)^2))
rmse.BIC
rmse.cp <- sqrt(mean((truth-pred.cp)^2))
rmse.cp
knitr::opts_chunk$set(echo = TRUE)
fat <- read.csv("fat.csv")
# Show data
head(fat[1:10,])
# A) Dimensions of data
dim(fat)
# B) Split the data in a “training set” and a “testing set”
n <- nrow(fat)
remove.ind <- seq(10, n, by=10)
test <- fat[remove.ind, ]
train <- fat[-remove.ind, ]
full<- lm(siri ~ age + weight + height + adipos + free + neck + chest + hip + thigh + knee + ankle + biceps + forearm + wrist + abdom, data = train)
summary(full)
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forward.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
forward.mod
back.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
back.mod
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forwardmod
backmod
forward.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
back.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
require(olsrr)
# A) Use help to learn more about the arguments in the function
forwardmod <- ols_step_forward_p(full, penter=0.05, progress=FALSE)
summary(forwardmod$model)
# B) Use help to learn more about the arguments in the function
backmod <- ols_step_backward_p(full, prem=0.05, progress=FALSE)
summary(backmod$model)
# C)
forwardmod
backmod
forward.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
back.mod <- lm(siri ~ weight + adipos + free + chest + thigh + ankle + forearm + abdom, data = train)
knitr::opts_chunk$set(echo = TRUE)
fat <- read.csv("fat.csv")
# Show data
head(fat[1:10,])
# A) Dimensions of data
dim(fat)
# B) Split the data in a “training set” and a “testing set”
n <- nrow(fat)
remove.ind <- seq(10, n, by=10)
test <- fat[remove.ind, ]
train <- fat[-remove.ind, ]
fat <- read.csv("fat.csv")
# Show data
head(fat[1:10,])
# A) Dimensions of data
dim(fat)
# B) Split the data in a “training set” and a “testing set”
n <- nrow(fat)
remove.ind <- seq(10, n, by=10)
test <- fat[remove.ind, ]
train <- fat[-remove.ind, ]
full<- lm(siri ~ age + weight + height + adipos + free + neck + chest + hip + thigh + knee + ankle + biceps + forearm + wrist + abdom, data = train)
summary(full)
# Organize Data -----------------------------------------------------------
# Set working directory here
setwd("C:/Users/bankh/My_Repos/habor-seal/data")
# Require packages
require(ggplot2)
# Retrieve data
m.data<-read.csv("m.data.csv")
w.data<-read.csv("new.w.data.csv")
# Create organized dataset
w.data$seals<- ifelse(w.data$seals>0,w.data$seals,NA)
m.data$seals<- ifelse(m.data$seals>0,m.data$seals,NA)
w.data<- na.omit(w.data)
m.data<- na.omit(m.data)
w.mu <- mean(w.data$seals)
m.mu <- mean(m.data$seals)
# Waterfront
set.seed(5432)
w.sample <- length(w.data$seals) # Sample size in one run of the experiment (i.e. number of observations we have)
w.data$seals <- round(80 - 0.4*w.data$noise - 2*w.data$tide - 5*w.data$month + abs(round(rnorm(w.sample, mean=w.mu,sd=10))))
# Marina
m.sample <- length(m.data$seals) # Sample size in one run of the experiment (i.e. number of observations we have)
m.data$seals <- round(100 - 0.8*m.data$noise - 2*m.data$tide - 5*m.data$month + abs(round(rnorm(m.sample, mean=m.mu,sd=10))))
# Merge data
seal.data<-merge(w.data,m.data,all = T)
seal.data$site<- as.numeric(seal.data$site=="waterfront")
# Check distribution
hist(seal.data$seals)
# Run pairwise cor between all independent variables
## Cut-off is +/- 0.7
cor.matrix<-cor(seal.data[,c(2:4,6)])
# Keep only large correlations in the same model
cor.matrix[abs(cor.matrix)< 0.7]<-NA
cor.matrix
# Check out plot of seals vs noise
plot(seal.data$seals~ seal.data$noise)
# Check out Residuals
fit1<- lm(seals ~ noise*site + tide + month, data = seal.data)
summary(fit1)
plot(fit1$fitted, fit1$resid, xlab="Fitted Values", ylab="Residuals", pch=16)
abline(h=0)
# Fit Models --------------------------------------------------------------
# Hypothesis 1
t.test(seal.data$noise[seal.data$site == 1], seal.data$noise[seal.data$site == 0])
## Graph differences
x.order <- c('Waterfront', 'Marina')
ggplot(seal.data, aes(x = site, y = noise)) +
geom_violin(fill = "grey")+ geom_boxplot(width = .2)+xlab("Site")+
ylab("Average Noise Level (dB)")+scale_x_discrete(limit = c("waterfront", "marina"),
labels = c("Waterfront","Marina"))+theme(panel.background = element_blank())
# Hypotheses 2 & 3
full.mod <- lm(seals ~ noise*site + tide + month, data = seal.data)
summary(full.mod)
red.mod <- lm(seals ~ noise+site + tide + month, data = seal.data)
summary(red.mod)
# Run ESS F-test
anova(red.mod,full.mod) # Choose full model
summary(full.mod)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read file in
orig_data <- read.csv("firstgen_data.csv")
orig2_data<- read.csv("secondgen_data.csv")
View(orig2_data)
code1<- orig_data$Code
code2<- orig2_data$Code
code<- rbind(code1, code2)
code<- cbind(code1, code2)
View(code)
code<- rbind(code1, code2)
View(code)
View(code)
code<- unique(code)
View(code)
code<- code1 + code2
code<- c(code1, code2)
code
ID<- unique(code)
ID
write.csv(ID, "Dolphin_IDs.csv")
