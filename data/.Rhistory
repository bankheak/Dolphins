head(points.df)
points.df$Date <- as.Date(points.df$Date, format = "%m/%d/%Y")
head(points.df)
# Look at raster layer
SST.r
plot(SST.r)
# MAKE A NICER MAP
# re-format raster for ggplot
# convert to data.frame for plotting purposes
SST.df <- as.data.frame(SST.r, xy=TRUE)
colnames(SST.df) <- c("Longitude", "Latitude", "SST")
# now plot
SST.plot <- ggplot() +
# add SST data
geom_tile(data = SST.df, aes(x = Longitude, y = Latitude, fill = SST)) +
scale_fill_distiller(palette = "Spectral") +
# plot sighting point locations
geom_point(data = points.df, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-125.5,-123.5), ylim=c(41.8, 46.4)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
SST.plot
colnames(coord_data) <- c("Date", "Longitude", "Latitude")
View(coord_data)
View(sample_data)
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
View(coord_data)
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%y-%b-%d")
View(coord_data)
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%y-%m-%d")
View(coord_data)
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
View(coord_data)
colnames(coord_data) <- c("Date", "Longitude", "Latitude")
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
View(coord_data)
colnames(coord_data) <- c("Date", "Latitude", "Longitude")
min(coord_data$Longitude)
class(coord_data$Longitude)
class(coord_data$Latitude)
min(coord_data$Longitude)
max(coord_data$Longitude)
ggplot() +
# plot sighting point locations
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(27,28), ylim=c(-82, -83)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot() +
# plot sighting point locations
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
orig_data$Year <- as.numeric(format(orig_data$Date, format = "%Y"))
orig_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("Year", "Date", "Latitude", "Longitude")
# Seperate map per years
years <- unique(coord_data$Year)
unique(coord_data$Year)
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("Date", "Latitude", "Longitude", "Year")
# Seperate map per years
years <- unique(coord_data$Year)
list_years <- list()
for (i in 1:length(years)) {
list_years[[i]] <- subset(coord_data, subset=c(coord_data$Year == years[i]))
}
# Test one year at a time
coord_data <- list_years[[1]]
# Plot Coordinates on Map
# now plot
Homerange.plot <- ggplot() +
# plot sighting point locations
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Homerange.plot
# Plot Coordinates on Map
# now plot
Homerange.plot <- ggplot() +
# plot sighting point locations
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Homerange.plot
# Look at point dataframe
head(points.df)
points.df$Date <- as.Date(points.df$Date, format = "%m/%d/%Y")
head(points.df)
# Look at raster layer
SST.r
plot(SST.r)
# MAKE A NICER MAP
# re-format raster for ggplot
# convert to data.frame for plotting purposes
SST.df <- as.data.frame(SST.r, xy=TRUE)
colnames(SST.df) <- c("Longitude", "Latitude", "SST")
# now plot
SST.plot <- ggplot() +
# add SST data
geom_tile(data = SST.df, aes(x = Longitude, y = Latitude, fill = SST)) +
scale_fill_distiller(palette = "Spectral") +
# plot sighting point locations
geom_point(data = points.df, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-125.5,-123.5), ylim=c(41.8, 46.4)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
SST.plot
# Look at point dataframe
head(points.df)
points.df$Date <- as.Date(points.df$Date, format = "%m/%d/%Y")
head(points.df)
# Look at raster layer
SST.r
plot(SST.r)
# MAKE A NICER MAP
# re-format raster for ggplot
# convert to data.frame for plotting purposes
SST.df <- as.data.frame(SST.r, xy=TRUE)
colnames(SST.df) <- c("Longitude", "Latitude", "SST")
# now plot
SST.plot <- ggplot() +
# add SST data
geom_tile(data = SST.df, aes(x = Longitude, y = Latitude, fill = SST)) +
scale_fill_distiller(palette = "Spectral") +
# plot sighting point locations
geom_point(data = points.df, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-125.5,-123.5), ylim=c(41.8, 46.4)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
SST.plot
# Plot Coordinates on Map
# now plot
Homerange.plot <- ggplot() +
# plot sighting point locations
scale_fill_distiller(palette = "Spectral") +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Homerange.plot
# open libraries needed here
lib=lapply(c("plyr","tidyverse", "raster", "rgdal", "sf", "viridis", "adehabitatLT", "trip", "aniMotum"), library, character.only=T)
# the ggplot theme used for all figures
mon_theme <- theme(
panel.border = element_rect(linewidth=0.5,color="black", fill="transparent"),
plot.margin=unit(c(2,2,2,2),"mm"),
panel.background = element_rect(fill = 'white'),
text=element_text(face="bold", size=8),
title = element_text(size=rel(1.2)))
# remove friendly warning "`summarise()` has grouped output by..."
options(dplyr.summarise.inform = FALSE)
### load the csv tracking data into a dataframe object in R
## Dataset composed of two dugong tracks recorded in New Caledonia.
## Source: Derville, S., Cleguer, C., &; Garrigue, C. (2022). Ecoregional and temporal dynamics of dugong habitat use in a complex coral reef lagoon ecosystem. Scientific Reports, 12 (552). https://doi.org/10.1038/s41598-021-04412-3
loc_df <- read.csv("data_movement_SpatEco_Class5_2023.csv", stringsAsFactors = F) %>%
# date and time column set as posixct
mutate(date = as.POSIXct(Acquisition.Time, format = "%Y.%m.%d %H:%M:%S", tz = "GMT", usetz = TRUE)) %>%
# rename columns with shorter names
rename("lon" = "GPS.Longitude", "lat" = "GPS.Latitude", "id" = "Argos.ID") %>%
# select only the relevant columns
dplyr::select(id, date, lon, lat)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
# open libraries needed here
lib=lapply(c("plyr","tidyverse", "raster", "rgdal", "sf", "viridis", "adehabitatLT", "trip", "aniMotum"), library, character.only=T)
# Read in map shape file
land_sf <- st_read("Sarasota_Manatee_MPO.shp")
install.packages("sf")
library(sf)
# Read in map shape file
land_sf <- st_read("Sarasota_Manatee_MPO.shp")
# Plot Coordinates on Map
# now plot
Homerange.plot <- ggplot() +
# plot sighting point locations
geom_sf(data = land_sf, col = "grey10", fill = "grey15")
# Plot Coordinates on Map
# now plot
Homerange.plot <- ggplot() +
# plot sighting point locations
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_fill_distiller(palette = "Spectral") +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
Homerange.plot
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5)) +
facet_wrap(~id)
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
xlim=c(-82, -83) + ylim=c(27,28) +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
xlim(-82, -83) + ylim(27,28) +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
xlim(-82, -84) + ylim(27,28) +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
coord_sf(expand = 0) +
mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
#coord_sf(expand = 0) +
mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
#coord_sf(expand = 0) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
#coord_sf(expand = 0) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_color_viridis_c(guide = F) +
#coord_sf(expand = 0) +
#mon_theme +
#geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
#scale_color_viridis_c(guide = F) +
#coord_sf(expand = 0) +
#mon_theme +
#geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
#scale_color_viridis_c(guide = F) +
#coord_sf(expand = 0) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
# plot sighting point locations
#geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
scale_fill_distiller(palette = "Spectral") +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot() +
# plot sighting point locations
geom_tile(data = land_sf, aes(x = Longitude, y = Latitude)) +
scale_fill_distiller(palette = "Spectral") +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
# tidy up the plot a bit...
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") + ylab("Latitude") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(land_sf)
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
#scale_color_viridis_c(guide = F) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
coord_sf(expand = 0) +
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
#scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
#scale_color_viridis_c(guide = F) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
coord_sf(expand = T) +
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
#scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
#scale_color_viridis_c(guide = F) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
coord_sf(expand = T) +
#coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
ggplot() +
geom_sf(data = land_sf, col = "grey10", fill = "grey15") +
#scale_color_viridis_c(guide = F) +
#mon_theme +
geom_point(data = coord_data, aes(x = Longitude, y = Latitude)) +
coord_sf(expand = T) +
coord_quickmap(xlim=c(-82, -83), ylim=c(27,28)) +
scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0)) +
xlab("Longitude") +
ylab("Latitude") +
theme(axis.text.y  = element_text(angle = 90, hjust = 0.5))
gc()
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Load all necessary packages
require(asnipe) # get_group_by_individual--Damien Farine
# Could do permutations
require(assocInd)
require(vegan)
# Run multiple cores for faster computing
require(doParallel)
require(microbenchmark)
require(parallel)
require(foreach)
require(progress)
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
secondgen_data <- read.csv("secondgen_data.csv")
orig_data <- rbind(firstgen_data, secondgen_data)
# Make date into a date class
orig_data$Date <- as.Date(as.character(orig_data$Date), format="%d-%b-%y")
orig_data$Year <- as.numeric(format(orig_data$Date, format = "%Y"))
# Make sure every ID has >10 obs
ID <- unique(orig_data$Code)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(orig_data$Code == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 10))
sample_data <- subset(orig_data, orig_data$Code %in% c(sub$ID))
group_data <- cbind(sample_data[,c(2,11,17,21)]) # Seperate date, group and ID
group_data$Group <- cumsum(!duplicated(group_data[1:2])) # Create sequential group # by date
group_data <- cbind(group_data[,3:5]) # Subset ID and group #
# Make a list of only one year per dataframe
years <- unique(group_data$Year)
list_years <- list()
for (i in 1:length(years)) {
list_years[[i]] <- subset(group_data, subset=c(group_data$Year == years[i]))
}
## Test a smaller amount of data for faster results
test <- 100
## Test a smaller amount of data for faster results
test <- 1000
test_gbi <- get_group_by_individual(list_years[[1]][c(1:test),c(1, 3)], data_format = "individuals")
write.csv(test_gbi, "../data/test_gbi.csv")
# Gambit of the group index
gbi <- list()
for (y in 1:length(years)) {
gbi[[y]] <- get_group_by_individual(list_years[[y]][,c(1, 3)], data_format = "individuals")
}
## Test a smaller amount of data for faster results
test_gbi <- gbi[[1]] # or
write.csv(test_gbi, "../data/test_gbi.csv")
gc()
# Read file in
nF<-  readRDS("../data/nF.csv")
# Read file in
nF<-  read.csv("../data/nF.csv")
# Read file in
nF<-  read.csv("../data/nF.csv")
# Specify the number of nodes/workers in the cluster
num_nodes <- 4
# Create a cluster with the specified number of nodes/workers
cl <- makeCluster(num_nodes)
gc()
# Specify the number of nodes/workers in the cluster
num_nodes <- 4
# Create a cluster with the specified number of nodes/workers
cl <- makeCluster(num_nodes)
# Register the cluster to enable parallel processing
registerDoParallel(cl)
gc()
