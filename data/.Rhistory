t6 = turnover_w(data = p6y, iter = 1000, subseq=F, plot=FALSE)
t7 = turnover_w(data = p7y, iter = 1000, subseq=F, plot=FALSE)
t8 = turnover_w(data = p8y, iter = 1000, subseq=F, plot=FALSE)
all = rbind(t1, t2, t3, t4, t5, t6, t7, t8)
all = cbind(c(1, 2, 3, 4, 5, 6, 7, 8), all)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5, 6, 7, 8), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.43), xlim=c(1,8), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4, 5, 6, 7, 8),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4, 5, 6, 7, 8),las=1, labels=c(22, 11, 7, 6, 5, 4, 3, 3), cex.axis=0.7)
mtext(side = 3, "Number of periods", line = 2, font = 1)
# Print final results
all
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5, 6, 7, 8), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.30,0.7), xlim=c(1,8), cex.axis=0.8)
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5, 6, 7, 8), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.5,0.6), xlim=c(1,8), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5, 6, 7, 8), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.56,0.61), xlim=c(1,8), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5, 6, 7, 8), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.565,0.61), xlim=c(1,8), cex.axis=0.8)
knitr::opts_chunk$set(echo = TRUE)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
## load all necessary packages
library(sf) # Convert degrees to meters
library(sp) # Creates a SpatialPointsDataFrame by defining the coordinates
library(adehabitatHR) # Caluculate MCPs
library(scales) # Helps make polygons partly transparent using the alpha argument
library(ggmap) # Download tiles using ggmap
library(viridis) # Color pallette
library(gridExtra) # grid.arrange function
library(ggplot2)
library(adehabitatHR) # Kernel density
library(rgdal) # Overlap
# Read in file
sample_data <- read.csv("sample_data.csv")
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code', 'subYear', 'ConfHI')]) # Subset Date and Coordinates #
# Read in file
sample_data <- read.csv("sample_data.csv")
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in file
sample_data <- read.csv("sample_data.csv")
# Read file in to retain ILV
sample_data <- read.csv("sample_data.csv")
gc()
# Set working directory here
setwd("C:/Users/bankh/My_Repos/DolphiNP/data")
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphin/data")
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Load all necessary packages
require(asnipe) # get_group_by_individual--Damien Farine
# Could do permutatioNP
require(assocInd)
require(vegan)
# Run multiple cores for faster computing
require(doParallel)
require(foreach)
sample_data <- read.csv("sample_data.csv")
length(unique(sample_data$Code))
list_years <- readRDS("list_years.RData")
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- tapply(sample_data$Date, sample_data$Year, function(x) length(unique(x)))
effort
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- lapply(list_years$Date, function(x) length(unique(x)))
effort
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- lapply(list_years, function(df) length(unique(df$Date)))
effort
## Get estimate of population size
unique_ID_year <- lapply(list_years, function(df) length(unique(df$Code)))
unique_ID_year
## Compare effort to population size
effort <- as.data.frame(effort)
pop <- as.data.frame(unique_ID_year)
pop_effort <- cbind(effort, pop) # Days per year and pop size per year
pop_effort
pop_effort <- rbind(effort, pop) # Days per year and pop size per year
pop_effort
colnames(pop_effort) <- c(1:7)
pop_effort
rownames(pop_effort) <- c('Days Surveyed', 'Number of Indivduals')
pop_effort
plot(pop_effort$effort ~ pop_effort$unique_ID_year)
rownames(pop_effort) <- c('Days_Surveyed', 'Number_of_Indivduals')
plot(pop_effort[1,] ~ pop_effort[2,])
pop_effort[1,]
pop_effort[2,]
pop_effort[1,c(1:7)]
plot(pop_effort[1,c(1:7)] ~ pop_effort[2,c(1:7)])
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- lapply(list_years, function(df) length(unique(df$Date)))
## Get estimate of population size
unique_ID_year <- lapply(list_years, function(df) length(unique(df$Code)))
## Compare effort to population size
pop_effort <- rbind(effort, pop) # Days per year and pop size per year
pop_effort <- as.data.frame(rbind(effort, pop)) # Days per year and pop size per year
## Compare effort to population size
effort <- as.data.frame(effort)
pop <- as.data.frame(unique_ID_year)
pop_effort <- as.data.frame(rbind(effort, pop)) # Days per year and pop size per year
pop_effort
colnames(pop_effort) <- c(1:7)
rownames(pop_effort) <- c('Days_Surveyed', 'Number_of_Indivduals')
plot(pop_effort[1,c(1:7)] ~ pop_effort[2,c(1:7)])
effort
pop_effort
# Read in different behavior's data frames
IDbehav_Beg <- readRDS("IDbehav_Beg.RData")
IDbehav_Pat <- readRDS("IDbehav_Pat.RData")
IDbehav_Dep <- readRDS("IDbehav_Dep.RData")
Beg_effort <- lapply(IDbehav_Beg, function(df) length(unique(df$Code)))
View(IDbehav_Beg)
length(unique(IDbehav_Beg[[1]]$Code=='B'))
IDbehav_Beg[[1]][["HI"]]
length(unique(IDbehav_Beg[[1]]$Code[IDbehav_Beg[[1]]$HI > 0]))
Beg_effort <- lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0])))
Beg_effort
Pat_effort <- as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI > 0]))))
Pat_effort
Beg_effort <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0]))))
Beg_effort
Dep_effort <- as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI > 0]))))
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, Beg_effort, Pat_effort, Dep_effort)) # Days per year and pop size per year
colnames(Beg_effort) <- c(1:7)
colnames(Pat_effort) <- c(1:7)
colnames(Dep_effort) <- c(1:7)
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, Beg_effort, Pat_effort, Dep_effort)) # Days per year and pop size per year
effort
colnames(effort) <- c(1:7)
colnames(unique_ID_year) <- c(1:7)
## Get estimate of population size
unique_ID_year <- as.data.frame(lapply(list_years, function(df) length(unique(df$Code))))
unique_ID_year
colnames(unique_ID_year) <- c(1:7)
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, Beg_effort, Pat_effort, Dep_effort)) # Days per year and pop size per year
pop_effort
rownames(pop_effort) <- c('Days_Surveyed', 'Number_of_Indivduals', 'Beggars', 'Patrollers', 'Depredators')
pop_effort
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
secondgen_data <- read.csv("secondgen_data.csv")
orig_data <- rbind(firstgen_data, secondgen_data)
orig_data <- subset(orig_data, subset=c(orig_data$Code != "None"))
length(unique(orig_data$Code))
length(unique(sample_data$Code))
sum(pop_effort[2,])
sum(pop_effort[c(3:5),])
sum(unique(sample_data$Code[sample_data$ConfHI != 0]))
unique(sample_data$Code[sample_data$ConfHI != 0])
length(unique(sample_data$Code[sample_data$ConfHI != 0]))
sum(pop_effort[c(3),])
sum(pop_effort[c(4),])
sum(pop_effort[c(5),])
lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0])))
sum(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0]))))
nb <- lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0])))
nb <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0]))))
sum(nb)
sum(as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI == 0])))))
sum(as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI == 0])))))
all <- subset(IDbehav_Beg, IDbehav_Beg$Code %in% IDbehav_Pat$Code)
all
Beg <- as.data.frame(lapply(IDbehav_Beg, function(df)
unique(df$Code[df$HI > 0])))
Beg <- lapply(IDbehav_Beg, function(df)
unique(df$Code[df$HI > 0]))
View(Beg)
?append
Beg <- append(lapply(IDbehav_Beg, function(df)
unique(df$Code[df$HI > 0])))
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI > 0])))
Beg
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI > 0]))))
length(unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI > 0]))))
length(unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI > 0]))))
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0]))))
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI = 0]))))
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI == 0]))))
length(unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI == 0]))))
length(unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI == 0]))))
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI == 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI == 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI == 0])))
Beg %in% Pat %in% Dep
sum(Beg %in% Pat %in% Dep)
sum(Beg %in% Dep)
sum(Pat %in% Dep)
Reduce(intersect, list(Beg, Pat, Dep))
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI != 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI != 0])))
Reduce(intersect, list(Beg, Pat, Dep))
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
setwd("C:/Users/bankh/My_Repos/Dolphins/code")
# Set working directory here
setwd("../data")
setwd("C:/Users/bankh/My_Repos/Dolphins/code")
# Test 2
# load tidyverse
library(tidyverse)
# Test 2
# create dataframe
sample_data <- data.frame( value = c(1,2,3,4,4,5,6,
7,9,11,1.5,2.3,2.5,3.4,
4.5,5.5,6.5,7.5,9.5,12.5),
category = c('A','B','A','B','A',
'B','A','B','A','B',
'A','B','A','B','A',
'B','A','B','A','B'),
paired = c(0,0,1,1,2,2,3,3,4,4,
5,5,6,6,7,7,8,8,9,9))
View(sample_data)
list_years <- readRDS("list_years.RData")
setwd("C:/Users/bankh/My_Repos/Dolphins/code")
list_years <- readRDS("list_years.RData")
# Set working directory here
setwd("../data")
list_years <- readRDS("list_years.RData")
el <- readRDS("el_years.RData")
# Set the node names based on row names
get_names <- function (matrix, metric) {
row_names <- lapply(matrix, function (df) {rownames(df)})
for (i in seq_along(metric)) {
metric[[i]][,1] <- row_names[[i]]
}
return(metric)
}
# Betweenness centrality
between <- lapply(el, function (df) {betweenness_w(df, alpha = 1)})
library(igraph) # Measure centrality here
library(tnet) # For weights
library(sna)
library(statnet)
library(doParallel) # For faster computing
library(ggplot2)
library(gridExtra) # To combine plots
library(reshape) # To rearrange a data frame
library(cowplot) # To add a legend
library(tidyverse)
# Betweenness centrality
between <- lapply(el, function (df) {betweenness_w(df, alpha = 1)})
between_diffs <- get_names(nxn, between)
# between_diffs_HI <- lapply(seq_along(between_diffs), function(i) {
#   df <- between_diffs[[i]]
#   df_new <- as.data.frame(df[df[, 1] %in% all_HI_IDs, , drop = FALSE])
#   return(df_new)
# })
compare_between <- merge(
between_diffs[[1]],
between_diffs[[2]],
by.x = "node",
by.y = "node"
)
between_diffs <- get_names(nxn, between)
# Read in social association matrix
nxn <- readRDS("nxn.RData")
between_diffs <- get_names(nxn, between)
# between_diffs_HI <- lapply(seq_along(between_diffs), function(i) {
#   df <- between_diffs[[i]]
#   df_new <- as.data.frame(df[df[, 1] %in% all_HI_IDs, , drop = FALSE])
#   return(df_new)
# })
compare_between <- merge(
between_diffs[[1]],
between_diffs[[2]],
by.x = "node",
by.y = "node"
)
colnames(compare_between) <- c("ID", "Before.HAB", "After.HAB")
compare_between[, c(2, 3)] <- sapply(compare_between[, c(2, 3)], as.numeric)
# Degree and strength centrality
strength <- lapply(el, function (df) {degree_w(df, measure=c("degree","output"), type="out", alpha=1)})
strength_diffs <- get_names(nxn, strength)
# strength_diffs_HI <- lapply(seq_along(strength_diffs), function(i) {
#   df <- strength_diffs[[i]]
#   df_new <- as.data.frame(df[df[, 1] %in% all_HI_IDs, , drop = FALSE])
#   return(df_new)
# })
compare_strength <- merge(
strength_diffs[[1]],
strength_diffs[[2]],
by.x = "node",
by.y = "node"
)
colnames(compare_strength) <- c("ID", "Before.HAB_degree", "Before.HAB_strength", "After.HAB_degree", "After.HAB_strength")
compare_strength[, c(2:5)] <- sapply(compare_strength[, c(2:5)], as.numeric)
# Look at all of the local metrics together
HI_data <-  subset_HI(list_years)
## Add a column containing HI type
names_BG <- lapply(HI_data, function (df) {
as.vector(unique(df$Code[df$DiffHI == "BG"]))})
## Only show IDs of HI dolphins
row_name_HI_func <- function(list_years) {
HI_data <-  diff_raw(subset_HI(list_years))
row_names_HI <- lapply(HI_data, function (df) {
as.vector(df$Code[(df$DiffHI == "BG" | df$DiffHI == "SD" |
df$DiffHI == "FG") & df$Freq > 0])})
return(row_names_HI)
}
row_names_HI <- row_name_HI_func(list_years)
# Add helpful functions
source("../code/functions.R") # edgelist function and diff_raw(subset_HI())
## Only show IDs of HI dolphins
row_name_HI_func <- function(list_years) {
HI_data <-  diff_raw(subset_HI(list_years))
row_names_HI <- lapply(HI_data, function (df) {
as.vector(df$Code[(df$DiffHI == "BG" | df$DiffHI == "SD" |
df$DiffHI == "FG") & df$Freq > 0])})
return(row_names_HI)
}
row_names_HI <- row_name_HI_func(list_years)
# Look at all of the local metrics together
HI_data <-  subset_HI(list_years)
## Add a column containing HI type
names_BG <- lapply(HI_data, function (df) {
as.vector(unique(df$Code[df$DiffHI == "BG"]))})
names_SD <- lapply(HI_data, function (df) {
as.vector(unique(df$Code[df$DiffHI == "SD"]))})
names_FG <- lapply(HI_data, function (df) {
as.vector(unique(df$Code[df$DiffHI == "FG"]))})
# Combine the data
local_metrics_HI <- data.frame(ID = compare_between$ID,
Period = c(rep("1-Before.HAB", nrow(compare_between)), rep("2-After.HAB", nrow(compare_between))),
Between = c(compare_between$Before.HAB, compare_between$After.HAB),
Strength = c(compare_strength$Before.HAB_strength, compare_strength$After.HAB_strength))
# Sort the dataframe by ID and Period
local_metrics_HI <- local_metrics_HI[order(local_metrics_HI$ID, local_metrics_HI$Period), ]
# Create a new variable that represents the order of the periods
local_metrics_HI$Period_order <- as.numeric(local_metrics_HI$Period == "2-After.HAB")
local_metrics_HI$HI_type <- ifelse(local_metrics_HI$ID %in% names_BG[[1]] & local_metrics_HI$Period == "1-Before.HAB", "BG",
ifelse(local_metrics_HI$ID %in% names_SD[[1]] & local_metrics_HI$Period == "1-Before.HAB", "SD",
ifelse(local_metrics_HI$ID %in% names_FG[[1]] & local_metrics_HI$Period == "1-Before.HAB", "FG",
ifelse(local_metrics_HI$ID %in% names_BG[[2]] & local_metrics_HI$Period == "2-After.HAB", "BG",
ifelse(local_metrics_HI$ID %in% names_SD[[2]] & local_metrics_HI$Period == "2-After.HAB", "SD",
ifelse(local_metrics_HI$ID %in% names_FG[[2]] & local_metrics_HI$Period == "2-After.HAB", "FG", "NA"))))))
# Only look at individuals that transitioned
local_metrics_HI$trans0 <- ifelse(local_metrics_HI$Period == "1-Before.HAB" & local_metrics_HI$HI_type == "NA", 1, 0)
local_metrics_HI$trans1 <- ifelse(local_metrics_HI$Period == "2-After.HAB" & local_metrics_HI$HI_type != "NA", 1, 0)
# Calculate the sum of trans0 and trans1 for each ID
sum_data <- aggregate(cbind(trans0, trans1) ~ ID, data = local_metrics_HI, sum)
local_metrics_HI$trans <- rep((sum_data$trans0 + sum_data$trans1), 2)
local_mets_HI <- local_metrics_HI[local_metrics_HI$trans == 2, ]
# Make paired data for each ID
local_mets_HI$Pairs <- rep(1:length(unique(local_mets_HI$ID)), each = 2)
local_mets_HI
rep(1:length(unique(local_mets_HI$ID)), each = 2)
length(unique(local_mets_HI$ID)
length(unique(local_mets_HI$ID))
length(unique(local_mets_HI$ID[local_mets_HI$Period=="1-Before.HAB"]))
length(unique(local_mets_HI$ID[local_mets_HI$Period=="2-After.HAB"]))
length(unique(local_metrics_HI$ID[local_metrics_HI$Period=="2-After.HAB"]))
length(unique(local_metrics_HI$ID[local_metrics_HI$Period=="1-Before.HAB"]))
local_metrics_HI
# Calculate the sum of trans0 and trans1 for each ID
sum_data <- aggregate(cbind(trans0, trans1) ~ ID, data = local_metrics_HI, sum)
sum_data
local_metrics_HI$trans <- rep((sum_data$trans0 + sum_data$trans1), 2)
local_mets_HI <- local_metrics_HI[local_metrics_HI$trans == 2, ]
local_mets_HI <- local_metrics_HI[local_metrics_HI$trans == 2, ]
local_mets_HI
# Calculate the sum of trans0 and trans1 for each ID
sum_data <- aggregate(cbind(trans0, trans1) ~ ID, data = local_metrics_HI, sum)
local_metrics_HI$trans <- rep((sum_data$trans0 + sum_data$trans1), 2)
local_metrics_HI <- local_metrics_HI[local_metrics_HI$trans == 2, ]
# Make paired data for each ID
local_metrics_HI$Pairs <- rep(1:length(unique(local_metrics_HI$ID)), each = 2)
local_metrics_HI
# Combine the data
local_metrics_HI <- data.frame(ID = compare_between$ID,
Period = c(rep("1-Before.HAB", nrow(compare_between)), rep("2-After.HAB", nrow(compare_between))),
Between = c(compare_between$Before.HAB, compare_between$After.HAB),
Strength = c(compare_strength$Before.HAB_strength, compare_strength$After.HAB_strength))
# Sort the dataframe by ID and Period
local_metrics_HI <- local_metrics_HI[order(local_metrics_HI$ID, local_metrics_HI$Period), ]
# Create a new variable that represents the order of the periods
local_metrics_HI$Period_order <- as.numeric(local_metrics_HI$Period == "2-After.HAB")
local_metrics_HI
local_metrics_HI$HI_type <- ifelse(local_metrics_HI$ID %in% names_BG[[1]] & local_metrics_HI$Period == "1-Before.HAB", "BG",
ifelse(local_metrics_HI$ID %in% names_SD[[1]] & local_metrics_HI$Period == "1-Before.HAB", "SD",
ifelse(local_metrics_HI$ID %in% names_FG[[1]] & local_metrics_HI$Period == "1-Before.HAB", "FG",
ifelse(local_metrics_HI$ID %in% names_BG[[2]] & local_metrics_HI$Period == "2-After.HAB", "BG",
ifelse(local_metrics_HI$ID %in% names_SD[[2]] & local_metrics_HI$Period == "2-After.HAB", "SD",
ifelse(local_metrics_HI$ID %in% names_FG[[2]] & local_metrics_HI$Period == "2-After.HAB", "FG", "NA"))))))
local_metrics_HI
# Only look at individuals that transitioned
local_metrics_HI$trans0 <- ifelse(local_metrics_HI$Period == "1-Before.HAB" & local_metrics_HI$HI_type == "NA", 1, 0)
local_metrics_HI$trans1 <- ifelse(local_metrics_HI$Period == "2-After.HAB" & local_metrics_HI$HI_type != "NA", 1, 0)
# Calculate the sum of trans0 and trans1 for each ID
sum_data <- aggregate(cbind(trans0, trans1) ~ ID, data = local_metrics_HI, sum)
local_metrics_HI
sum_data
local_metrics_HI$trans <- rep((sum_data$trans0 + sum_data$trans1), 2)
local_metrics_HI
sum_data
# Calculate the sum of trans0 and trans1 for each ID
sum_data <- aggregate(cbind(trans0, trans1) ~ ID, data = local_metrics_HI, sum)
local_metrics_HI$trans <- rep((sum_data$trans0 + sum_data$trans1), each = 2)
local_metrics_HI
local_metrics_HI <- local_metrics_HI[local_metrics_HI$trans == 2, ]
# Make paired data for each ID
local_metrics_HI$Pairs <- rep(1:length(unique(local_metrics_HI$ID)), each = 2)
local_metrics_HI
unique_metrics <- colnames(local_metrics_HI[, c(3,4)])
unique_metrics
i <- 1
metric <- local_metrics_HI[, unique_metrics[i]]
metric
# Test 2
# create dataframe
sample_data <- data.frame( value = c(1,2,3,4,4,5,6,
7,9,11,1.5,2.3,2.5,3.4,
4.5,5.5,6.5,7.5,9.5,12.5),
category = c('A','B','A','B','A',
'B','A','B','A','B',
'A','B','A','B','A',
'B','A','B','A','B'),
paired = c(0,0,1,1,2,2,3,3,4,4,
5,5,6,6,7,7,8,8,9,9))
# create plot using ggplot() and geom_boxplot() function
ggplot(sample_data, aes(category,value, fill=category)) +
geom_boxplot()+
# linetype parameter is used to customize the joining line
geom_line(aes(group = paired), linetype=2, size=1.3)+
# geom_point() is used to plot data points on boxplot
geom_point(aes(fill=category,group=paired),size=5,shape=21)
# create plot using ggplot() and geom_boxplot() function
ggplot(sample_data, aes(category,value, fill=category)) +
geom_boxplot()+
# linetype parameter is used to customize the joining line
geom_line(aes(group = paired), linetype=2, linewidth=1.3)+
# geom_point() is used to plot data points on boxplot
geom_point(aes(fill=category,group=paired),size=5,shape=21)
# create plot using ggplot() and geom_boxplot() function
ggplot(local_metrics_HI, aes(Period,metric, fill=Period)) +
geom_boxplot()+
# linetype parameter is used to customize the joining line
geom_line(aes(group = Pairs), linetype=2, linewidth=1.3)+
# geom_point() is used to plot data points on boxplot
geom_point(aes(fill=Period,group=Pairs),size=5,shape=21)
ggplot(local_metrics_HI, aes(Period,metric, fill=Period)) +
geom_violin(position = position_dodge(width = 0.9), trim = FALSE, alpha = 0.5) +
geom_boxplot()+
geom_line(aes(group = Pairs), linetype=2, linewidth=1.3)+
geom_point(aes(fill=Period,group=Pairs),size=5,shape=21)
ggplot(local_metrics_HI, aes(Period,metric, fill=Period)) +
geom_violin(position = position_dodge(width = 0.9), trim = FALSE, alpha = 0.5) +
geom_boxplot(position = position_dodge(width = 0.9), width = 0.2, alpha = 0.5) +
geom_line(aes(group = Pairs), linetype=2, linewidth=1.3)+
geom_point(aes(fill=Period,group=Pairs),size=5,shape=21)
ggplot(local_metrics_HI, aes(Period, metric, fill = Period)) +
geom_violin(position = position_dodge(width = 0.9), trim = FALSE, alpha = 0.5) +
geom_boxplot(position = position_dodge(width = 0.9), width = 0.2, alpha = 0.5) +
geom_line(aes(group = Pairs), linetype = 2, linewidth = 1.3) +
geom_point(aes(fill = Period, group = Pairs, shape = HI_type), size = 5) +
theme(panel.background = element_blank())
ggplot(local_metrics_HI, aes(Period, metric, fill = Period)) +
geom_violin(position = position_dodge(width = 0.9), trim = FALSE, alpha = 0.5) +
geom_boxplot(position = position_dodge(width = 0.9), width = 0.2, alpha = 0.5) +
geom_line(aes(group = Pairs), linetype = 2, linewidth = 1.3) +
geom_point(aes(fill = Period, group = Pairs, shape = HI_type), size = 5) +
scale_shape_manual(values = c("BG" = 16, "SD" = 17, "FG" = 18, "NA" = 19)) +
theme(panel.background = element_blank())
?geom_point()
ggplot(local_metrics_HI, aes(Period, metric, fill = Period)) +
geom_violin(position = position_dodge(width = 0.9), trim = FALSE, alpha = 0.5) +
geom_boxplot(position = position_dodge(width = 0.9), width = 0.2, alpha = 0.5) +
geom_line(aes(group = Pairs), linetype = 2, linewidth = 1.3) +
geom_point(aes(fill = Period, group = Pairs, shape = HI_type), size = 5) +
scale_shape_manual(values = c("BG" = 1, "SD" = 2, "FG" = 3, "NA" = 4)) +
theme(panel.background = element_blank())
ggplot(local_metrics_HI, aes(Period, metric, fill = Period)) +
geom_violin(position = position_dodge(width = 0.9), trim = FALSE, alpha = 0.5) +
geom_boxplot(position = position_dodge(width = 0.9), width = 0.2, alpha = 0.5) +
geom_line(aes(group = Pairs), linetype = 2, linewidth = 1.3) +
geom_point(aes(fill = Period, group = Pairs, shape = HI_type), size = 5) +
scale_shape_manual(values = c("BG" = 1, "SD" = 2, "FG" = 5, "NA" = 4)) +
theme(panel.background = element_blank())
?ggplot()
