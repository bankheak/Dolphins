N_40 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N40_t, c(changeN20, changeN30, changeN40))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylim = range(c(changeN20, changeN30, changeN40)), ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
# Plot the first population
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Time', main = 'Population Changes Over Time')
N=1:500
dndt=r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
?abline
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2, lwd = 1.5)
abline(h = 40, lty = 2)
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.3
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.4
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size")
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 1)))
(max(N_small) + 50)
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
N_small
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 50)))
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_med) + 1)))
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_large) + 1)))
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size")
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size")
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size")
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(0, 0.2)
abline(0, 0.3, lty=2)
abline(0, 0.4, lty=3)
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N_20, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
N_30[1] <- N0
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N_30, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
N_40[1] <- N0
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N_40, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
gc()
gc()
# Set working directory here
setwd("../data")
list_years <- readRDS("list_years.RData") # (1995-2000)/(2001-2006)/(2007-2012)
library(intergraph) # To use igraph network in ggnet
library(sna) # For network
library(GGally) # For mapping networks in ggplot
library(network) # Creating networks
library(igraph) # graphing networks
library(ggmap) # For network plotting on map
library(ggraph) # For network plotting on map
library(tnet) # For weights
library(asnipe) # get_group_by_individual--Damien Farine
library(assocInd) # Could do permutatioNP
library(vegan)
library(assortnet) # associative indices
library(kinship2) # genetic relatedness
library(ggplot2) # Visualization
library(abind) # array
library(brms) # For brm model
library(coda)
library(bayesplot) # plot parameters
library(sf) # Convert degrees to meters
library(sp) # Creates a SpatialPointsDataFrame by defining the coordinates
library(adehabitatHR) # Caluculate MCPs and Kernel density
library(magrittr) # All below is for STAN
library(dplyr)
library(purrr)
library(forcats)
library(tidyr)
library(modelr)
library(ggdist)
library(tidybayes)
library(cowplot)
library(rstan) # To make STAN run faster
library(ggrepel)
library(RColorBrewer)
library(gganimate)
library(posterior)
library(distributional)
library(doParallel) # Faster computing
# Calculate Gambit of the group
create_gbi <- function(list_years) {
gbi <- list()
group_data <- list()
for (i in seq_along(list_years)) {
# Group each individual by date and sighting
group_data[[i]] <- cbind(list_years[[i]][,c("Date","Sighting","Code","Year")])
group_data[[i]]$Group <- cumsum(!duplicated(group_data[[i]][1:2])) # Create sequential group # by date
group_data[[i]] <- cbind(group_data[[i]][,3:5]) # Subset ID and group #
# Gambit of the group index
gbi[[i]] <- get_group_by_individual(group_data[[i]][,c("Code", "Group")], data_format = "individuals")
}
return(gbi)
}
gbi <- create_gbi(list_years)
View(gbi)
gbi[[1]]
# Get the average group size for each ID
ID_gcounts <- NULL
for (k in 1:3) {
group_matrix <- gbi[[k]]
for (i in 1:nrow(group_matrix)) {
for (j in 1:ncol(group_matrix)) {
ID_gcounts <- ifelse(group_matrix[i, j] == 1,
rowSum(group_matrix[i, ]), 0)
}
}
}
# Get the average group size for each ID
ID_gcounts <- NULL
for (k in 1:3) {
group_matrix <- gbi[[k]]
for (i in 1:nrow(group_matrix)) {
for (j in 1:ncol(group_matrix)) {
ID_gcounts <- ifelse(group_matrix[i, j] == 1,
rowSums(group_matrix[i, ]), 0)
}
}
}
# Get the average group size for each ID
group_data <- data.frame(ID = character(),
Average_Group_Size = numeric())
group_matrix <- gbi[[1]]
# Calculate group size for each individual in the group
individual_group_size <- rowSums(group_matrix)
individual_group_size
colnames(group_matrix)
# Get the average group size for each ID
group_data <- data.frame(ID = character(),
Average_Group_Size = numeric())
# Iterate through each group
for (k in 1:3) {
group_matrix <- gbi[[k]]
# Calculate group size for each individual in the group
individual_group_size <- rowSums(group_matrix)
# Iterate through each individual in the group
for (i in 1:length(individual_group_size)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the average group size for the individual
avg_group_size <- mean(individual_group_size)
# Append the result to the data frame
group_data <- rbind(result_df, data.frame(ID = individual_id,
Average_Group_Size = avg_group_size))
}
}
# Get the average group size for each ID
group_list <- list()
group_data <- data.frame(ID = character(),
Average_Group_Size = numeric())
# Iterate through each group
for (k in 1:3) {
group_matrix <- gbi[[k]]
# Calculate group size for each individual in the group
individual_group_size <- rowSums(group_matrix)
# Iterate through each individual in the group
for (i in 1:length(individual_group_size)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the average group size for the individual
avg_group_size <- mean(individual_group_size)
# Append the result to the data frame
group_data <- rbind(group_data, data.frame(ID = individual_id,
Average_Group_Size = avg_group_size))
}
group_list[[k]] <- group_data
}
View(group_list)
View(group_list[[1]])
group_matrix <- gbi[[1]]
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
individual_group_size
View(gbi)
ncol(group_matrix)
# Create empty matrix
group_data <- data.frame(ID = character(),
Average_Group_Size = numeric())
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the average group size for the individual
group_size <- ifelse(group_matrix[, i] == 1, individual_group_size[i], 0)
}
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
avg_group_sizes <- numeric()
i=1
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
individual_id
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, i] == 1,
individual_group_size[i], 0)
group_size
group_matrix[, i] == 1
individual_group_size[i]
individual_group_size
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
group_size
# Calculate the average group size for the individual
avg_group_size <- mean(group_size)
avg_group_size
# Get the average group size for each ID
group_list <- lapply(gbi, function(group_matrix) {
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
avg_group_sizes <- numeric()
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
# Calculate the average group size for the individual
avg_group_size <- mean(group_size)
# Append the results to vectors
ids <- c(ids, individual_id)
avg_group_sizes <- c(avg_group_sizes, avg_group_size)
}
# Create a data frame for the current group
group_data <- data.frame(ID = ids,
Average_Group_Size = avg_group_sizes)
return(group_data)
})
View(group_list)
View(group_list[[1]])
View(group_list)
View(group_list[[1]])
# Add HI list
HI_list <- readRDS("HI_list.RData")
View(HI_list)
View(group_list)
View(group_list[[1]])
# Add HI list
result_df <- readRDS("result_df.RData")
View(result_df)
View(group_list)
View(group_list[[1]])
group_list <- lapply(group_list, function(df) {
df$group <- result_df$Average_Group_Size[match(df$ID, result_df$ID)]
return(df)
})
View(group_list)
View(group_list[[1]])
df=group_list[[1]]
df$group <- result_df$Average_Group_Size[match(df$ID, result_df$ID)]
View(df)
result_df$Average_Group_Size[match(df$ID, result_df$ID)]
group <- lapply(group_list, function(df) {
group <- df$Average_Group_Size[match(df$ID, result_df$ID)]
return(group)
})
View(group)
df = group_list[[1]]
# Add HI list
result_df <- readRDS("result_df.RData")
result_df$group <- df$Average_Group_Size[match(df$ID, result_df$ID)]
# Add HI list
result_df <- readRDS("result_df.RData")
result_df$group <- ifelse(result_df$Period == "1-Before_HAB",
group_list[[1]]$Average_Group_Size[match(df$ID, result_df$ID)],
ifelse(result_df$Period == "2-During_HAB",
group_list[[2]]$Average_Group_Size[match(df$ID, result_df$ID)],
group_list[[3]]$Average_Group_Size[match(df$ID, result_df$ID)]))
View(result_df)
# Add HI list
result_df <- readRDS("result_df.RData")
result_df$group <- ifelse(result_df$Period == "1-Before_HAB",
group_list[[1]]$Average_Group_Size[match(result_df$ID, group_list[[1]]$ID)],
ifelse(result_df$Period == "2-During_HAB",
group_list[[2]]$Average_Group_Size[match(result_df$ID, group_list[[2]]$ID)],
group_list[[3]]$Average_Group_Size[match(result_df$ID, group_list[[3]]$ID)]))
?boxplot
# Plot the HI behaviors
boxplot(group ~ HI, data = result_df)
# Plot the HI behaviors for every year
ggplot(result_df, aes(x = Period, y = group)) +
geom_boxplot() +
facet_wrap(~ HI) +
labs(title = "Boxplot of Group Size for Each Period and HI",
x = "Period",
y = "Group Size")
# Plot the HI behaviors for every year
ggplot(result_df, aes(x = HI, y = group)) +
geom_boxplot() +
facet_wrap(~ Period) +
labs(x = "HI",
y = "Group Size")
# Plot the HI behaviors for every year
ggplot(result_df, aes(x = HI, y = group, fill = HI)) +
geom_boxplot() +
facet_wrap(~ Period) +
labs(x = "HI", y = "Group Size")
# Plot the HI behaviors for every year
ggplot(result_df, aes(x = HI, y = group, fill = HI)) +
geom_boxplot() +
facet_wrap(~ Period) +
labs(x = "Human-centric Behavior", y = "Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
