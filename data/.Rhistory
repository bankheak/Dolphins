if(stochastic==0) j.tran=Eggs * s0 else j.tran=round(rbinom(1,Eggs,s0))
Juveniles=j.surv + j.tran
return(list(Juveniles=Juveniles,Marine.juves=m.tran))
}
# Use the Nt and compare to 1 time step
Juveniles<- num.juv(Juveniles=Nt[2], Eggs=Nt[1], stochastic = 0)
Nt1[2]; round(Juveniles$Juveniles)   # Perfect
# Function 2 --------------------------------------------------------------
# How many marine juveniles remain and transition
num.mar<- function(Marine, stochastic=0) {
s=0.93 # Survival
Ms=0.11 # Transition to subadult
Mm=0.54 # Transition to marine juvenile
if(stochastic==0) m.surv=Marine * (s*(1-Ms)) else m.surv=round(rbinom(1,Marine,(s*(1-Ms))))
if(stochastic==0) m.tran=Marine * (s*Ms) else m.tran=round(rbinom(1,Marine,(s*Ms)))
return(list(Marine.juves=m.surv,Subsdults=m.tran))
}
# Use the Nt and compare to 1 time step
Marine<-num.mar(Marine=Nt[3], stochastic=0)
Nt1[3]; round(Marine$Marine.juves+Juveniles$Marine.juves)  # Perfect
# Function 3 --------------------------------------------------------------
# How many Sub adults remain and transition
num.sub<- function(SubA, stochastic=0) {
s=0.93 # Survival
My=0.13 # Transition to young adult
if(stochastic==0) s.surv=SubA * (s*(1-My)) else s.surv=round(rbinom(1,SubA,(s*(1-My))))
if(stochastic==0) s.tran=SubA * (s * My) else s.tran=round(rbinom(1,SubA,(s * My)))
return(list(SubA=s.surv,YoungAd=s.tran))
}
Marine
# Use the Nt and compare to 1 time step
SubA<-num.sub(SubA=Nt[4], stochastic=0)
SubA
Nt1[4]; round(SubA$SubA+Marine$Subsdults)  # Perfect
# Function 4 --------------------------------------------------------------
# How many young adults remain and transition
num.y<- function(YoungAd, YoungAd_t1, stochastic=0) {
s=0.93 # Survival
My=0.13 # Transition to young adult
Ma=0.07 # Transition to adult
eggy=11383 # Eggs young adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) y.surv=YoungAd * (s*(1-Ma)) else y.surv=round(rbinom(1,YoungAd,(s*(1-Ma))))
if(stochastic==0) y.tran=YoungAd * (s * My) else y.tran=round(rbinom(1,YoungAd,(s * My)))
# eggs produced by YA_t+1
if(stochastic==0) y.eggs=(y.surv + YoungAd_t1) * (eggy*s0*spwn*p) else y.eggs=round(rbinom(1,(y.surv + YoungAd_t1),(eggy*s0*spwn*p)))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=y.tran * (egga*s0*spwn*p) else a.eggs=round(rbinom(1,y.tran,(egga*s0*spwn*p)))
return(list(YoungAd=y.surv, Adult=y.tran, Eggs=y.eggs + a.eggs))
}
# Use the Nt and compare to 1 time step
YoungA<-num.sub(SubA=Nt[4], stochastic=0)
Nt1[4]; round(YoungA$YoungAd+SubA$YoungAd)  # Perfect
YoungA
SubA$YoungAd
# Use the Nt and compare to 1 time step
YoungA<-num.sub(SubA=Nt[5], stochastic=0)
Nt1[5]; round(YoungA$YoungAd+SubA$YoungAd)  # Perfect
# Use the Nt and compare to 1 time step
YoungA<-num.sub(YoungAd=Nt[5], YoungAd_t1=SubA$YoungAd, stochastic=0)
# Use the Nt and compare to 1 time step
YoungA<-num.y(YoungAd=Nt[5], YoungAd_t1=SubA$YoungAd, stochastic=0)
Nt1[5]; round(YoungA$YoungAd+SubA$YoungAd)  # Perfect
# Use the Nt and compare to 1 time step
Adults<-num.a(SubA=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
# Function 5 --------------------------------------------------------------
# How many adults remain after simulation period
num.a<- function(Adults, Adults_t1, stochastic=0) {
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) a.surv=Adults * s else a.surv=round(rbinom(1,Adults,s))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=(a.surv + Adults_t1) * (egga*s0*spwn*p) else a.eggs=round(rbinom(1,(a.surv + Adults_t1),(egga*s0*spwn*p)))
return(list(Adult=a.surv, Eggs=a.eggs))
}
# Use the Nt and compare to 1 time step
Adults<-num.a(SubA=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adults+YoungA$Adult)  # Perfect
YoungA$Adult
Adults$Adults
Adults
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adult+YoungA$Adult)  # Perfect
# Function 4 --------------------------------------------------------------
# How many young adults remain and transition
num.y<- function(YoungAd, YoungAd_t1, stochastic=0) {
s=0.93 # Survival
My=0.13 # Transition to young adult
Ma=0.07 # Transition to adult
eggy=11383 # Eggs young adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) y.surv=YoungAd * (s*(1-Ma)) else y.surv=round(rbinom(1,YoungAd,(s*(1-Ma))))
if(stochastic==0) y.tran=YoungAd * (s * My) else y.tran=round(rbinom(1,YoungAd,(s * My)))
# eggs produced by YA_t+1
if(stochastic==0) y.eggs=(y.surv + YoungAd_t1) * (eggy*spwn*p) else y.eggs=round(rbinom(1,(y.surv + YoungAd_t1),(eggy*spwn*p)))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=y.tran * (egga*spwn*p) else a.eggs=round(rbinom(1,y.tran,(egga*spwn*p)))
return(list(YoungAd=y.surv, Adult=y.tran, Eggs=y.eggs + a.eggs))
}
# Use the Nt and compare to 1 time step
YoungA<-num.y(YoungAd=Nt[5], YoungAd_t1=SubA$YoungAd, stochastic=0)
Nt1[5]; round(YoungA$YoungAd+SubA$YoungAd)  # Perfect
# Function 5 --------------------------------------------------------------
# How many adults remain after simulation period
num.a<- function(Adults, Adults_t1, stochastic=0) {
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) a.surv=Adults * s else a.surv=round(rbinom(1,Adults,s))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=(a.surv + Adults_t1) * (egga*spwn*p) else a.eggs=round(rbinom(1,(a.surv + Adults_t1),(egga*spwn*p)))
return(list(Adult=a.surv, Eggs=a.eggs))
}
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adult+YoungA$Adult)  # Perfect
# Combine above functions -------------------------------------------------
# Simulation period
sim.years=1984:2011
# Matrix of all classes
pop.matrix<- cbind(Eggs.t = 11383+73465,
Juv.t = 123,
Marine.t = 359,
SubA.t=191,
YoungA.t=173,
Adult.t=154)
# Create final function with above info
Sturgen.Pop<- function(mtx, yrs, stochastic=0){
# Make array to contain progression in years
mtx2=array(NA,dim=c(length(yrs)+1,6))
mtx2[1,] = mtx
for (i in 1:length(yrs)) {
# Create animals at t+1 i=2
Juveniles<- num.juv(Juveniles=mtx2[i,2], Eggs=mtx2[i,1], stochastic=stochastic)
Marine<-num.mar(Marine=mtx2[i,3], stochastic=stochastic)
SubA<-num.sub(SubA=mtx2[i,4], stochastic=stochastic)
YoungA<- num.y(YoungAd = mtx2[i,5], YoungAd_t1 = mtx2[i+1,4], stochastic=stochastic)
Adult<- num.a(Adults = mtx2[i,6], Adults_t1 = mtx2[i+1,5], stochastic=stochastic)
if(is.na(Adult$Eggs)) Adult$Eggs=0
if(is.na(YoungA$Eggs)) YoungA$Eggs=0
## Assign animals at t+1 to animals at t
mtx2[i+1,]<- cbind(Juv.t= round(Juveniles$Juveniles),
Marine.t = round(Juveniles$Marine.juves + Marine$Marine.juves),
SubA.t=round(SubA$SubA + Marine$Subsdults),
YoungA.t=round(YoungA$YoungAd + SubA$YoungAd),
Adult.t=round(Adult$Adult + YoungA$Adult),
Eggs.t=round(YoungA$Eggs + Adult$Eggs))
colnames(mtx2)<- c("Eggs", "Juveniles", "Marine Juveniles", "SubAdults",
"Young Adults", "Adults")
}
return(mtx2)
}
Nt
sturg.mtx<-Sturgen.Pop(mtx = Nt, yrs = sim.years, stochastic=0)
sturg.mtx
Nt1[6]; round(Adults$Adult+YoungA$Adult)  # Perfect
# Function 1 --------------------------------------------------------------
# How many Juveniles remain and transition
num.juv<- function(Juveniles, Eggs, stochastic=0) {
s=0.93 # Survival
Mm=0.54 # Transition to marine juvenile
s0=0.00002 # Egg to age-1 survival
if(stochastic==0) j.surv=Juveniles * (s*(1-Mm)) else j.surv=round(rbinom(1,Juveniles,(s*(1-Mm))))
if(stochastic==0) m.tran=Juveniles * (s * Mm) else m.tran=round(rbinom(1,Juveniles,(s * Mm)))
if(stochastic==0) j.tran=Eggs * s0 else j.tran=round(rbinom(1,Eggs,s0))
Juveniles=j.surv + j.tran
return(list(Juveniles=Juveniles,Marine.juves=m.tran))
}
# Use the Nt and compare to 1 time step
Juveniles<- num.juv(Juveniles=Nt[2], Eggs=Nt[1], stochastic = 0)
# Function 2 --------------------------------------------------------------
# How many marine juveniles remain and transition
num.mar<- function(Marine, stochastic=0) {
s=0.93 # Survival
Ms=0.11 # Transition to subadult
Mm=0.54 # Transition to marine juvenile
if(stochastic==0) m.surv=Marine * (s*(1-Ms)) else m.surv=round(rbinom(1,Marine,(s*(1-Ms))))
if(stochastic==0) m.tran=Marine * (s*Ms) else m.tran=round(rbinom(1,Marine,(s*Ms)))
return(list(Marine.juves=m.surv+Juveniles$Marine.juves,Subsdults=m.tran))
}
# Use the Nt and compare to 1 time step
Marine<-num.mar(Marine=Nt[3], stochastic=0)
Marine
Nt1[3]; round(Marine$Marine.juves)  # Perfect
num.sub
# Function 3 --------------------------------------------------------------
# How many Sub adults remain and transition
num.sub<- function(SubA, stochastic=0) {
s=0.93 # Survival
My=0.13 # Transition to young adult
if(stochastic==0) s.surv=SubA * (s*(1-My)) else s.surv=round(rbinom(1,SubA,(s*(1-My))))
if(stochastic==0) s.tran=SubA * (s * My) else s.tran=round(rbinom(1,SubA,(s * My)))
return(list(SubA=s.surv+Marine$Subsdults,YoungAd=s.tran))
}
# Use the Nt and compare to 1 time step
SubA<-num.sub(SubA=Nt[4], stochastic=0)
Nt1[4]; round(SubA$SubA)  # Perfect
# Function 4 --------------------------------------------------------------
# How many young adults remain and transition
num.y<- function(YoungAd, YoungAd_t1, stochastic=0) {
s=0.93 # Survival
My=0.13 # Transition to young adult
Ma=0.07 # Transition to adult
eggy=11383 # Eggs young adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) y.surv=YoungAd * (s*(1-Ma)) else y.surv=round(rbinom(1,YoungAd,(s*(1-Ma))))
if(stochastic==0) y.tran=YoungAd * (s * My) else y.tran=round(rbinom(1,YoungAd,(s * My)))
# eggs produced by YA_t+1
if(stochastic==0) y.eggs=(y.surv + YoungAd_t1) * (eggy*spwn*p) else y.eggs=round(rbinom(1,(y.surv + YoungAd_t1),(eggy*spwn*p)))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=y.tran * (egga*spwn*p) else a.eggs=round(rbinom(1,y.tran,(egga*spwn*p)))
return(list(YoungAd=y.surv+SubA$YoungAd, Adult=y.tran, Eggs=y.eggs + a.eggs))
}
# Use the Nt and compare to 1 time step
YoungA<-num.y(YoungAd=Nt[5], YoungAd_t1=SubA$YoungAd, stochastic=0)
Nt1[5]; round(YoungA$YoungAd)  # Perfect
# Function 5 --------------------------------------------------------------
# How many adults remain after simulation period
num.a<- function(Adults, Adults_t1, stochastic=0) {
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) a.surv=Adults * s else a.surv=round(rbinom(1,Adults,s))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=(a.surv + Adults_t1) * (egga*spwn*p) else a.eggs=round(rbinom(1,(a.surv + Adults_t1),(egga*spwn*p)))
return(list(Adult=a.surv+YoungA$Adult, Eggs=a.eggs))
}
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adult)  # Perfect
# Function 5 --------------------------------------------------------------
# How many adults remain after simulation period
num.a<- function(Adults, Adults_t1, stochastic=0) {
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) a.surv=Adults * s else a.surv=round(rbinom(1,Adults,s))
# eggs produced by YA_t+1
if(stochastic==0) y.eggs=(YoungA$YoungAd) * (eggy*spwn*p) else y.eggs=round(rbinom(1,(YoungA$YoungAd),(eggy*spwn*p)))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=(a.surv + Adults_t1) * (egga*spwn*p) else a.eggs=round(rbinom(1,(a.surv + Adults_t1),(egga*spwn*p)))
return(list(Adult=a.surv+YoungA$Adult, Eggs=a.eggs))
}
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adult)  # Perfect
Adults
Nt1[1]; round(Adults$Eggs+YoungA$Eggs)  # Perfect
# Function 5 --------------------------------------------------------------
# How many adults remain after simulation period
num.a<- function(Adults, Adults_t1, stochastic=0) {
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) a.surv=Adults * s else a.surv=round(rbinom(1,Adults,s))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=(a.surv + Adults_t1) * (egga*spwn*p) else a.eggs=round(rbinom(1,(a.surv + Adults_t1),(egga*spwn*p)))
return(list(Adult=a.surv+YoungA$Adult, Eggs=a.eggs+YoungA$Eggs))
}
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adult)  # Perfect
Nt1[1]; round(Adults$Eggs+YoungA$Eggs)  # Perfect
Nt1[1]; round(Adults$Eggs)  # Perfect
Nt1[1]; round(YoungA$Eggs)  # Perfect
# Function 5 --------------------------------------------------------------
# How many adults remain after simulation period
num.a<- function(Adults, Adults_t1, stochastic=0) {
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
if(stochastic==0) a.surv=Adults * s else a.surv=round(rbinom(1,Adults,s))
# eggs produced by A_t+1
if(stochastic==0) a.eggs=(a.surv + Adults_t1) * (egga*spwn*p) else a.eggs=round(rbinom(1,(a.surv + Adults_t1),(egga*spwn*p)))
return(list(Adult=a.surv+YoungA$Adult, Eggs=a.eggs))
}
# Use the Nt and compare to 1 time step
Adults<-num.a(Adults=Nt[6], Adults_t1=YoungA$Adult, stochastic=0)
Nt1[6]; round(Adults$Adult)  # Perfect
Nt1[1]; round(Adults$Eggs)  # Perfect
# Combine above functions -------------------------------------------------
# Simulation period
sim.years=1984:2011
# Create final function with above info
Sturgen.Pop<- function(mtx, yrs, stochastic=0){
# Make array to contain progression in years
mtx2=array(NA,dim=c(length(yrs)+1,6))
mtx2[1,] = mtx
for (i in 1:length(yrs)) {
# Create animals at t+1 i=2
Juveniles<- num.juv(Juveniles=mtx2[i,2], Eggs=mtx2[i,1], stochastic=stochastic)
Marine<-num.mar(Marine=mtx2[i,3], stochastic=stochastic)
SubA<-num.sub(SubA=mtx2[i,4], stochastic=stochastic)
YoungA<- num.y(YoungAd = mtx2[i,5], YoungAd_t1 = mtx2[i+1,4], stochastic=stochastic)
Adult<- num.a(Adults = mtx2[i,6], Adults_t1 = mtx2[i+1,5], stochastic=stochastic)
if(is.na(Adult$Eggs)) Adult$Eggs=0
if(is.na(YoungA$Eggs)) YoungA$Eggs=0
## Assign animals at t+1 to animals at t
mtx2[i+1,]<- cbind(Juv.t= round(Juveniles$Juveniles),
Marine.t = round(Juveniles$Marine.juves + Marine$Marine.juves),
SubA.t=round(SubA$SubA + Marine$Subsdults),
YoungA.t=round(YoungA$YoungAd + SubA$YoungAd),
Adult.t=round(Adult$Adult + YoungA$Adult),
Eggs.t=round(YoungA$Eggs + Adult$Eggs))
colnames(mtx2)<- c("Eggs", "Juveniles", "Marine Juveniles", "SubAdults",
"Young Adults", "Adults")
}
return(mtx2)
}
sturg.mtx<-Sturgen.Pop(mtx = Nt, yrs = sim.years, stochastic=0)
sturg.mtx
Nt1[1]; round(Adults$Eggs+YoungA$Eggs)  # Perfect
s
Nt[6]
s=0.93 # Survival
Ma=0.07 # Transition to adult
egga=73465 # Eggs adult
s0=0.00002 # Egg to age-1 survival
spwn=0.8 # Spawning success
p=0.3 # Reproduction frequency
a.surv=Adults * s
s
Adults=Nt[6]
Adults_t1=YoungA$Adult
a.surv=Adults * s
a.surv
a.eggs=(a.surv + Adults_t1) * (egga*spwn*p)
a.eggs
Adult=a.surv+YoungA$Adult
Adult
Nt
# Create final function with above info
Sturgen.Pop<- function(mtx, yrs, stochastic=0){
# Make array to contain progression in years
mtx2=array(NA,dim=c(length(yrs)+1,6))
mtx2[1,] = mtx
for (i in 1:length(yrs)) {
# Create animals at t+1 i=2
Juveniles<- num.juv(Juveniles=mtx2[i,2], Eggs=mtx2[i,1], stochastic=stochastic)
Marine<-num.mar(Marine=mtx2[i,3], stochastic=stochastic)
SubA<-num.sub(SubA=mtx2[i,4], stochastic=stochastic)
YoungA<- num.y(YoungAd = mtx2[i,5], YoungAd_t1 = SubA$YoungAd, stochastic=stochastic)
Adult<- num.a(Adults = mtx2[i,6], Adults_t1 = YoungA$Adult, stochastic=stochastic)
if(is.na(Adult$Eggs)) Adult$Eggs=0
if(is.na(YoungA$Eggs)) YoungA$Eggs=0
## Assign animals at t+1 to animals at t
mtx2[i+1,]<- cbind(Juv.t= round(Juveniles$Juveniles),
Marine.t = round(Juveniles$Marine.juves + Marine$Marine.juves),
SubA.t=round(SubA$SubA + Marine$Subsdults),
YoungA.t=round(YoungA$YoungAd + SubA$YoungAd),
Adult.t=round(Adult$Adult + YoungA$Adult),
Eggs.t=round(YoungA$Eggs + Adult$Eggs))
colnames(mtx2)<- c("Eggs", "Juveniles", "Marine Juveniles", "SubAdults",
"Young Adults", "Adults")
}
return(mtx2)
}
sturg.mtx<-Sturgen.Pop(mtx = Nt, yrs = sim.years, stochastic=0)
sturg.mtx
# Create final function with above info
Sturgen.Pop<- function(mtx, yrs, stochastic=0){
# Make array to contain progression in years
mtx2=array(NA,dim=c(length(yrs)+1,6))
mtx2[1,] = mtx
for (i in 1:length(yrs)) {
# Create animals at t+1 i=2
Juveniles<- num.juv(Juveniles=mtx2[i,2], Eggs=mtx2[i,1], stochastic=stochastic)
Marine<-num.mar(Marine=mtx2[i,3], stochastic=stochastic)
SubA<-num.sub(SubA=mtx2[i,4], stochastic=stochastic)
YoungA<- num.y(YoungAd = mtx2[i,5], YoungAd_t1 = SubA$YoungAd, stochastic=stochastic)
Adult<- num.a(Adults = mtx2[i,6], Adults_t1 = YoungA$Adult, stochastic=stochastic)
if(is.na(Adult$Eggs)) Adult$Eggs=0
if(is.na(YoungA$Eggs)) YoungA$Eggs=0
## Assign animals at t+1 to animals at t
mtx2[i+1,]<- cbind(Juv.t= round(Juveniles$Juveniles),
Marine.t = round(Juveniles$Marine.juves + Marine$Marine.juves),
SubA.t=round(SubA$SubA + Marine$Subsdults),
YoungA.t=round(YoungA$YoungAd + SubA$YoungAd),
Adult.t=round(Adult$Adult + YoungA$Adult),
Eggs.t=round(YoungA$Eggs + Adult$Eggs))
colnames(mtx2)<- c("Eggs", "Juveniles", "Marine Juveniles", "SubAdults",
"Young Adults", "Adults")
}
return(mtx2)
}
Nt
sturg.mtx<-Sturgen.Pop(mtx = Nt, yrs = sim.years, stochastic=0)
sturg.mtx
sturg.mtx<-Sturgen.Pop(mtx = Nt, yrs = sim.years, stochastic=1)
sturg.mtx
gc()
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
secondgen_data <- read.csv("secondgen_data.csv")
orig_data <- rbind(firstgen_data, secondgen_data)
# Make date into a date class
orig_data$Date <- as.Date(as.character(orig_data$Date), format="%d-%b-%y")
orig_data$Year <- as.numeric(format(orig_data$Date, format = "%Y"))
# Make sure every ID has >10 obs
ID <- unique(orig_data$Code)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(orig_data$Code == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 10))
sample_data <- subset(orig_data, orig_data$Code %in% c(sub$ID))
# Get estimate of sampling effort
dates_year <- format(sample_data$Date, "%Y")
effort <- table(years)
effort <- table(dates_year)
# Get estimate of population size
unique_ID_year <- tapply(sample_data$Code, sample_data$Year, function(x) length(unique(x)))
# Compare effort to population size
effort <- as.data.frame(effort)
effort
dates_year
# Get estimate of sampling effort
effort <- tapply(sample_data$Date, sample_data$Year, function(x) length(unique(x)))
effort
# Get estimate of population size
unique_ID_year <- tapply(sample_data$Code, sample_data$Year, function(x) length(unique(x)))
# Compare effort to population size
effort <- as.data.frame(effort)
pop <- as.data.frame(unique_ID_year)
pop_effort <- cbind(effort, pop)
samp_effort <- pop_effort[,"unique_ID_year"]/pop_effort[,"Freq"]
pop_effort
plot(pop_effort$effort ~ pop_effort$unique_ID_year)
var(pop_effort$effort)
var(pop_effort$unique_ID_year)
sd(pop_effort$unique_ID_year)
sd(pop_effort$effort)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read file in to retain ILV
orig_data <- read.csv("sample_data.csv")
View(orig_data)
# Transforming SRI similarity into distance
year <- 1
list_years <- readRDS("list_years.RData")
# Select variables from the raw data
aux <- sample_data[1:nrow(list_years[[year]]),
c('Code', 'Behaviors', 'HumanInteraction', 'ConfHI')]
aux$ConfHI <- ifelse(aux$ConfHI == "0", 0, 1)
# Categorize ConfHI to IDs
rawHI <- as.matrix(table(aux$Code, aux$ConfHI))
# Find HI events among individuals
ID_HI <- table(sample_data$Code, sample_data$ConfHI)
ID_HI
# Find HI events among individuals
sample_data$ConfHI <- ifelse(sample_data$ConfHI == "0", 0, 1)
gc()
sample_data <- read.csv("sample_data.csv")
# Find HI events among individuals
sample_data$ConfHI <- ifelse(sample_data$ConfHI == "0", 0, 1)
View(sample_data)
sample_data$ConfHI
class(sample_data$ConfHI)
# Find HI events among individuals
sample_data$ConfHI <- ifelse(sample_data$ConfHI == 0, 0, 1)
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
secondgen_data <- read.csv("secondgen_data.csv")
orig_data <- rbind(firstgen_data, secondgen_data)
# Make date into a date class
orig_data$Date <- as.Date(as.character(orig_data$Date), format="%d-%b-%y")
orig_data$Year <- as.numeric(format(orig_data$Date, format = "%Y"))
# Make sure every ID has >10 obs
ID <- unique(orig_data$Code)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(orig_data$Code == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 10))
sample_data <- subset(orig_data, orig_data$Code %in% c(sub$ID))
