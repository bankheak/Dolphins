N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_med) + 1)))
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_large) + 1)))
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size")
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size")
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size")
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(0, 0.2)
abline(0, 0.3, lty=2)
abline(0, 0.4, lty=3)
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N_20, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
N_30[1] <- N0
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N_30, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
N_40[1] <- N0
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N_40, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
gc()
gc()
# Read in GBI
gbi <- readRDS("gbi.RData")
# Set working directory here
setwd("../data")
# Read in GBI
gbi <- readRDS("gbi.RData")
# Get the average group size for each ID
group_list <- lapply(gbi, function(group_matrix) {
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
avg_group_sizes <- numeric()
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
# Calculate the average group size for the individual
avg_group_size <- mean(group_size)
# Append the results to vectors
ids <- c(ids, individual_id)
avg_group_sizes <- c(avg_group_sizes, avg_group_size)
}
# Create a data frame for the current group
group_data <- data.frame(ID = ids,
Average_Group_Size = avg_group_sizes)
return(group_data)
})
View(group_list)
View(group_list[[1]])
group_matrix <- gbi[[1]]
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
individual_group_size
# Create empty vectors to store results
ids <- character()
avg_group_sizes <- numeric()
i=1
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
group_size
group_matrix[, individual_id]
individual_group_size
# Calculate the average group size for the individual
avg_group_size <- mean(group_size)
avg_group_size
# Append the results to vectors
ids <- c(ids, individual_id)
ids
# Create empty vectors to store results
ids <- character()
group_sizes <- numeric()
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
# Append the results to vectors
ids <- c(ids, individual_id)
avg_group_sizes <- c(group_sizes, group_size)
avg_group_sizes
group_sizes <- c(group_sizes, group_size)
group_sizes
group_sizes <- data.frame()
# Create empty vectors to store results
ids <- character()
group_sizes <- data.frame()
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
# Append the results to vectors
ids <- c(ids, individual_id)
group_sizes <- group_sizes[, group_size]
group_size
class(group_size)
# Calculate the group size for the individual
group_size <- as.vector(ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0))
group_size
# Append the results to vectors
ids <- c(ids, individual_id)
group_sizes <- group_sizes[, group_size]
group_sizes <- group_sizes[group_size, i]
group_sizes
group_sizes <- data.frame()
group_sizes <- group_sizes[group_size, i]
group_sizes <- data.frame()
group_sizes[, i] <- group_size
group_sizes <- data.frame(matrix(ncol = 1, nrow = 6346))
group_sizes[, i] <- group_size
group_sizes
# Append the results to vectors
ids <- c(ids, individual_id)
ids
# Get the average group size for each ID
group_list <- lapply(gbi, function(group_matrix) {
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
group_sizes <- data.frame(matrix(ncol = 1, nrow = 6346))
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- as.vector(ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0))
# Append the results to vectors
ids <- c(ids, individual_id)
group_sizes[, i] <- group_size
}
# Create a data frame for the current group
colnames(group_sizes) <- ids
return(group_sizes)
})
# Read in GBI
gbi <- readRDS("gbi.RData")
# Get the average group size for each ID
group_list <- lapply(gbi, function(group_matrix) {
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
group_sizes <- data.frame(matrix(ncol = ncol(group_matrix), nrow = nrow(group_matrix)))
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- as.vector(ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0))
# Append the results to vectors
ids <- c(ids, individual_id)
group_sizes[, i] <- group_size
}
# Create a data frame for the current group
colnames(group_sizes) <- ids
return(group_sizes)
})
View(gbi)
View(group_list)
View(group_list[[1]])
# Add HI list
result_df <- readRDS("result_df.RData")
View(group_list)
View(group_list[[1]])
colMeans(group_list[[1]])
# Get average group_size
avg_group_size <- lapply(group_list, function (lst) {
avg_group_sizes <- colMeans(list)
return(avg_group_sizes)
})
View(group_list)
# Get average group_size
avg_group_size <- lapply(group_list, function (lst) {
avg_group_sizes <- colMeans(lst)
return(avg_group_sizes)
})
View(avg_group_size)
avg_group_size[[1]]
# Read in GBI
gbi <- readRDS("gbi.RData")
# Get the average group size for each ID
group_list <- lapply(gbi, function(group_matrix) {
# Calculate group size for each group
individual_group_size <- rowSums(group_matrix)
# Create empty vectors to store results
ids <- character()
avg_group_sizes <- numeric()
# Iterate through each individual in the group
for (i in 1:ncol(group_matrix)) {
# Get the individual ID
individual_id <- colnames(group_matrix)[i]
# Calculate the group size for the individual
group_size <- ifelse(group_matrix[, individual_id] == 1,
individual_group_size, 0)
# Calculate the average group size for the individual
avg_group_size <- mean(group_size)
# Append the results to vectors
ids <- c(ids, individual_id)
avg_group_sizes <- c(avg_group_sizes, avg_group_size)
}
# Create a data frame for the current group
group_data <- data.frame(ID = ids,
Average_Group_Size = avg_group_sizes)
return(group_data)
})
# Add HI list
result_df <- readRDS("result_df.RData")
result_df$Group_size <- ifelse(result_df$Period == "1-Before_HAB",
group_list[[1]]$Average_Group_Size[match(result_df$ID, group_list[[1]]$ID)],
ifelse(result_df$Period == "2-During_HAB",
group_list[[2]]$Average_Group_Size[match(result_df$ID, group_list[[2]]$ID)],
group_list[[3]]$Average_Group_Size[match(result_df$ID, group_list[[3]]$ID)]))
# Change the factor levels and add factor for Period
result_df$HI <- factor(result_df$HI, levels = c("NF", "BG", "FG", "SD"))
result_df$Period <- as.factor(result_df$Period)
library(ggplot2) # Visualization
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot() +
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot() +
geom_jitter() +
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot() +
geom_jitter(aes(color = HI), width = 0.2, alpha = 0.5) + # Set jitter points color and transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA) + # Remove outliers
geom_jitter(aes(color = HI), width = 0.2, alpha = 0.5) + # Set jitter points color and transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
# Plot the HI behaviors and group sizes for every year
ggplot(result_df, aes(x = HI, y = Group_size, fill = HI)) +
geom_boxplot(outlier.shape = NA) + # Remove outliers
geom_jitter(aes(color = HI), width = 0.2, alpha = 0.5) + # Set jitter points color and transparency
facet_wrap(~ Period, labeller = labeller(Period = c("1-Before_HAB" = "Before",
"2-During_HAB" = "During",
"3-After_HAB" = "After"))) +
labs(x = "Human-centric Behavior", y = "Individuals' Average Group Size") +
theme(strip.background = element_blank(),
strip.text = element_text(size = 12, face = "bold"),
panel.grid = element_blank())
fit_sc.2 <- readRDS("fit_sc.2.RData")
# Check for model convergence
model <- fit_sc.2
library(GGally) # For mapping networks in ggplot
library(ggalluvial) # For alluvial plot
library(network) # For assigning coordinates to nodes %v%
library(RColorBrewer) # For strength gradient network colors
library(rstatix) # for post-hoc test
library(tnet) # For weights
library(igraph) # Measure centrality here
library(ggraph)
library(ggpattern) # geom_tile_pattern
library(grid)
library(assortnet) # associative indices
library(ggplot2) # Visualization
library(abind) # array
library(boot) # bootstrapping
library(brms) # For brm modellibrary(coda)
library(bayesplot) # plot parameters
library(doParallel) # Run parallel processing
library(hrbrthemes) # plot themes
library(viridis) # plot themes
library(ggpattern) # heatmap hatches
library(car) # durbinWatsonTest
library(rstan) # To make STAN run faster
library(tidybayes) # get_variables
## Period Centrality
theme_update(text = element_text(family = "sans"))
# Create mcmc_areas plot
mcmc_plot <- mcmc_intervals(
as.array(model),
pars = c("b_Period2MDuring_HAB", "b_Period3MAfter_HAB"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_minimal() + # Use a minimal theme
theme(
text = element_text(family = "sans"), # Set text family
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # Remove panel background
axis.line = element_line(color = "black") # Add axis lines
)
mcmc_plot + scale_y_discrete(
labels = c(
"b_Period2MDuring_HAB" = "During HAB",
"b_Period3MAfter_HAB" = "After HAB"
)
)
# Create mcmc_areas plot
mcmc_plot <- mcmc_intervals(
as.array(model),
pars = c("b_Period3MAfter_HAB", "b_Period2MDuring_HAB"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_minimal() + # Use a minimal theme
theme(
text = element_text(family = "sans"), # Set text family
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # Remove panel background
axis.line = element_line(color = "black") # Add axis lines
)
mcmc_plot + scale_y_discrete(
labels = c(
"b_Period2MDuring_HAB" = "During HAB",
"b_Period3MAfter_HAB" = "After HAB"
)
)
## BG
# Create mcmc_areas plot
mcmc_plot <- mcmc_intervals(
as.array(model),
pars = c("b_Prop_BG:Period2MDuring_HAB", "b_Prop_BG:Period3MAfter_HAB",
"b_Prop_BG"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_minimal() + # Use a minimal theme
theme(
text = element_text(family = "sans"), # Set text family
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # Remove panel background
axis.line = element_line(color = "black") # Add axis lines
)
mcmc_plot + scale_y_discrete(
labels = c(
"b_Prop_BG" = "Begging/Provisioning",
"b_Prop_BG:Period2MDuring_HAB" = "BG: During",
"b_Prop_BG:Period3MAfter_HAB" = "BG: After"
)
)
## FG
mcmc_plot <- mcmc_intervals(
as.array(model),
pars = c("b_Period2MDuring_HAB:Prop_FG", "b_Period3MAfter_HAB:Prop_FG",
"b_Prop_FG"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_minimal() + # Use a minimal theme
theme(
text = element_text(family = "sans"), # Set text family
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # Remove panel background
axis.line = element_line(color = "black") # Add axis lines
)
mcmc_plot + scale_y_discrete(
labels = c(
"b_Prop_FG" = "Fixed Gear Foraging",
"b_Period2MDuring_HAB:Prop_FG" = "FG: During",
"b_Period3MAfter_HAB:Prop_FG" = "FG: After"
)
)
## SD
mcmc_plot <- mcmc_intervals(
as.array(model),
pars = c("b_Period2MDuring_HAB:Prop_SD", "b_Period3MAfter_HAB:Prop_SD",
"b_Prop_SD"),
prob = 0.95, # 95% intervals
prob_outer = 0.99, # 99%
point_est = "mean"
) +
labs(
title = "Posterior parameter distributions",
subtitle = "with medians and 95% intervals"
) +
theme_minimal() + # Use a minimal theme
theme(
text = element_text(family = "sans"), # Set text family
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
panel.background = element_blank(), # Remove panel background
axis.line = element_line(color = "black") # Add axis lines
)
mcmc_plot + scale_y_discrete(
labels = c(
"b_Prop_SD" = "Scavenging/Depredating",
"b_Period2MDuring_HAB:Prop_SD" = "SD: During",
"b_Period3MAfter_HAB:Prop_SD" = "SD: After"
)
)
