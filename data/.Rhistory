ln.odds<- log(p.persist.curr/(1-p.persist.curr))
change<- rnorm(length(hurricane),1.3,0.17)
p.persist<- 1/(1+exp(-(ln.odds*change)))
} else p.persist <- p.persist.curr
p.persist<-ifelse(hurricane==1, 0.3,p.persist)
return(p.persist)
}
#' Mouse dynamics function
mouse.patch.dyn_vect<-function(N.suitable,N.unsuit,years,decision){
# set initial values
p.colon.hat<- 0.5
p.colon.var<- 0.1
beta.colon<-beta.mom(p.colon.hat,p.colon.var)
p.persist.hat=0.75
time=0
# initial occupancy
occ.states<-initial_occup_vect(p.persist=p.persist.hat,p.colon=p.colon.hat, N.suitable=N.suitable)
# place to hold proportion occupied
for(yr in 1:years){
# implement decision in year 5
decis<- ifelse(yr==5,decision,1)
hurricane<-rbinom(length(N.suitable),1,0.02)
p.persist=change.persistence_vect(decision=decis,hurricane=hurricane)
p.colon<-rbeta(length(N.suitable),beta.colon[1],beta.colon[2])
# if nothing is occupied colonization is zero
p.colon<-ifelse(occ.states > 0,p.colon,0)
occ.states<- colon_extinct_vect(p.persist=p.persist,N.occupied.t=occ.states,
p.colon=p.colon, N.empty.t=(N.suitable-occ.states))
tmp<-veg.dynamics_vect(N.suitable=N.suitable,N.unsuit=N.unsuit,time=time,
hurricane=hurricane)
N.suitable=tmp[,1]
N.unsuit=tmp[,2]
time=tmp[,3]
# restore 5 patches decision
N.suitable=ifelse(decis==3, N.suitable+5, N.suitable)
Total.ptch = N.suitable+N.unsuit
}
occ.states<-ifelse(is.na(occ.states),0,occ.states)
return(occ.states)
}
dec.1<-mouse.patch.dyn_vect(N.suitable=rep(50, 1e4),N.unsuit=rep(50,1e4),
years= 50, decision=rep(1, 1e4))
dec.1
dec.1<-mouse.patch.dyn_vect(N.suitable=rep(50, 1e4),N.unsuit=rep(50,1e4),
years= 50, decision=rep(1, 1e4))
dec.1
vect <- rnorm(100, 30, 2)
# Stop the cluster
stopCluster(cl)
library(parallel)
library(doParallel)
# Stop the cluster
stopCluster(cl)
stopImplicitCluster()
# Specify the number of nodes/workers in the cluster
num_nodes <- 2
# Create a cluster with the specified number of nodes/workers
cl <- makeCluster(num_nodes)
# Stop the cluster
stopCluster(cl)
gc()
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in file
sample_data <- read.csv("sample_data.csv")
# Extract coordinates
coord_data <- cbind(sample_data[,c(3, 10, 11)]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("Date", "Latitude", "Longitude", "Year")
View(coord_data)
View(sample_data)
is.na(coord_data)
## Remove NAs, if any
coord_data = na.omit(coord_data)
library(sp)
coordinates(coord_data) <- c("Latitude", "Longitude")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(coord_data) <- CRS("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")
library(adehabitatHR) # Caluculate MCPs
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(coord_data, percent = 100)
dolph.mcp
coord_data
# Read in file
sample_data <- read.csv("sample_data.csv")
View(sample_data)
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code')]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
View(coord_data)
## Remove NAs, if any
coord_data = na.omit(coord_data)
# Set the coordinate reference system (CRS)
coordinates(coord_data) <- c("StartLat", "StartLon")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(coord_data) <- CRS("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")
View(coord_data)
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code')]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
View(coord_data)
## Give descriptive names
colnames(coord_data) <- c("date", "Latitude", "Longitude", "id", "year")
## Remove NAs, if any
coord_data = na.omit(coord_data)
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "Latitude", "Longitude")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("Latitude", "Longitude")
View(dolph.sp)
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(coord_data, percent = 100)
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code')]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("date", "y", "x", "id", "year")
## Remove NAs, if any
coord_data = na.omit(coord_data)
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(coord_data, percent = 100)
dolph.mcp
View(dolph.sp)
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code')]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("date", "y", "x", "id", "year")
# Seperate map per years
years <- unique(coord_data$Year)
coord_years <- list()
for (i in 1:length(years)) {
coord_years[[i]] <- subset(coord_data, subset=c(coord_data$Year == years[i]))
}
# Seperate map per years
years <- unique(coord_data$Year)
# Seperate map per years
years <- unique(coord_data$year)
coord_years <- list()
for (i in 1:length(years)) {
coord_years[[i]] <- subset(coord_data, subset=c(coord_data$Year == years[i]))
}
# Test one year at a time
coord_data <- coord_years[[1]]
# Seperate map per years
years <- unique(coord_data$year)
coord_years <- list()
for (i in 1:length(years)) {
coord_years[[i]] <- subset(coord_data, subset=c(coord_data$year == years[i]))
}
# Seperate map per years
years <- unique(coord_data$year)
coord_data$year
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code')]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("date", "y", "x", "id", "year")
coord_data$year
# Seperate map per years
years <- unique(coord_data$year)
coord_years <- list()
for (i in 1:length(years)) {
coord_years[[i]] <- subset(coord_data, subset=c(coord_data$year == years[i]))
}
# Test one year at a time
coord_data <- coord_years[[1]]
# Remove two rows with NA's
coord_data <- coord_data[!is.na(coord_data$x) & !is.na(coord_data$y),]
# Test one year at a time
coord_data <- coord_years[[1]]
# Remove two rows with NA's
coord_data <- coord_data[!is.na(coord_data$x) & !is.na(coord_data$y),]
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")
View(dolph.sp)
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(coord_data, percent = 100)
dolph.mcp
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
dolph.mcp
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS("+proj=longlat +datum=WGS84 +no_defs")
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=18 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
View(dolph.sp)
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
# Test one year at a time
coord_data <- coord_years[[1]]
# Remove two rows with NA's
coord_data <- coord_data[!is.na(coord_data$x) & !is.na(coord_data$y),]
View(coord_data)
# Eliminate IDs with less than 5 locations
ID <- unique(coord_data$id)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(coord_data$id == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 4))
coord_data <- subset(coord_data, coord_data$id %in% c(sub$ID))
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
dolph.mcp
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
library(scales) # Helps make polygons partly transparent using the alpha argument
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
dolph.mcp
# Test one year at a time
coord_data <- coord_years[[1]]
# Remove two rows with NA's
coord_data <- coord_data[!is.na(coord_data$x) & !is.na(coord_data$y),]
# Eliminate IDs with less than 5 locations
ID <- unique(coord_data$id)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(coord_data$id == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 4))
coord_data <- subset(coord_data, coord_data$id %in% c(sub$ID))
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 100)
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
help("mcp")
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 95)
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
dolph.sp
# Test one year at a time
coord_data <- coord_years[[1]]
# Remove two rows with NA's
coord_data <- coord_data[!is.na(coord_data$x) & !is.na(coord_data$y),]
# Eliminate IDs with less than 5 locations
coord_data <- subset(coord_data, subset=c(coord_data$id != "None"))
ID <- unique(coord_data$id)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(coord_data$id == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 4))
coord_data <- subset(coord_data, coord_data$id %in% c(sub$ID))
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 95)
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
plot(dolph.mcp, col = alpha(1:100, 0.5), add = TRUE)
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
plot(dolph.mcp, col = alpha(1:100, 0.5), add = TRUE)
plot(dolph.mcp, col = alpha(1:10, 0.5), add = TRUE)
dolph.mcp
# Calculate the MCP by including 50 to 100 percent of points
hrs <- mcp.area(dolph.sp, percent = seq(50, 100, by = 5))
hrs
plot(dolph.sp, col = dolph.sp@data$id, pch = 16)
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
plot(dolph.sp, col = dolph.sp@data$id, pch = 16)
col <- rainbow(unique(dolph.sp@data$id))
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16)
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
dolph.sp
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
dolph.sp
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 95)
dolph.mcp
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16, asp = 1)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
## load all necessary packages
library(rgdal) # Convert degrees to meters
# Extract coordinates
coord_data <- cbind(sample_data[,c('Date', 'StartLat', 'StartLon', 'Code')]) # Subset Date and Coordinates #
## Format date and year
coord_data$Date <- as.Date(as.character(coord_data$Date), format="%Y-%m-%d")
coord_data$Year <- as.numeric(format(coord_data$Date, format = "%Y"))
## Give descriptive names
colnames(coord_data) <- c("date", "y", "x", "id", "year")
# Convert degrees to meters
coordinates(coord_data) <- c("x", "y")
# Test one year at a time
coord_data <- coord_years[[1]]
# Remove two rows with NA's
coord_data <- coord_data[!is.na(coord_data$x) & !is.na(coord_data$y),]
# Eliminate IDs with less than 5 locations
coord_data <- subset(coord_data, subset=c(coord_data$id != "None"))
ID <- unique(coord_data$id)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(coord_data$id == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 4))
coord_data <- subset(coord_data, coord_data$id %in% c(sub$ID))
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Set the coordinate reference system (CRS)
coordinates(dolph.sp) <- c("x", "y")
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Convert degrees to meters
dolph.sp <- spTransform(dolph.sp, CRS(paste0("+proj=utm +zone=zone_number +datum=WGS84 +units=m +no_defs")))
# Convert degrees to meters
dolph.sp <- spTransform(dolph.sp, CRS(paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")))
dolph.sp
## load all necessary packages
library(sf) # Convert degrees to meters
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Convert to sf
coord_data_sf <- st_as_sf(dolph.sp, coords = c("x", "y"), crs = 4326)
coord_data_sf
coord_data_utm <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=zone_number +datum=WGS84 +units=m +no_defs"))
coord_data_utm <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
coord_data_utm
dolph.sp <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
# The sample data are UTM points in WGS84 from zone 17N
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 95)
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Convert to sf
coord_data_sf <- st_as_sf(dolph.sp, coords = c("x", "y"), crs = 4326)
st_crs(coord_data_sf) <- 4326
dolph.sp <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
dolph.sp
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 95)
# Convert the sf object back to a SpatialPoints object
dolph.sp <- as(dolph.sp, "Spatial")
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Convert to sf
coord_data_sf <- st_as_sf(dolph.sp, coords = c("x", "y"), crs = 4326)
st_crs(coord_data_sf) <- 4326
dolph.sp <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
# Convert the sf object back to a SpatialPoints object
dolph.sp <- as(dolph.sp, "Spatial")
# Convert the sf object back to a SpatialPoints object
coord_data_filtered <- dolph.sp[!is.na(st_coordinates(dolph.sp)), ]
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Convert to sf
coord_data_sf <- st_as_sf(dolph.sp, coords = c("x", "y"), crs = 4326)
st_crs(coord_data_sf) <- 4326
dolph.sp <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
# Convert the sf object back to a SpatialPoints object
coord_data_filtered <- dolph.sp[!is.na(st_coordinates(dolph.sp)), ]
dolph.sp <- as(coord_data_filtered, "Spatial")
# Create a SpatialPointsDataFrame manually
dolph.sp <- SpatialPointsDataFrame(
coords = st_coordinates(coord_data_filtered),
data = coord_data_filtered
)
# Convert the sf object back to a SpatialPoints object
coord_data_filtered <- dolph.sp[!is.na(st_coordinates(dolph.sp)), ]
# Create a SpatialPointsDataFrame manually
dolph.sp <- SpatialPointsDataFrame(
coords = st_coordinates(coord_data_filtered),
data = coord_data_filtered
)
dolph.sp
# Set the CRS of the SpatialPointsDataFrame to the UTM CRS
# Replace 'zone_number' with the appropriate UTM zone number for your study area
proj4string(dolph.sp) <- CRS(paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
# Create a SpatialPointsDataFrame
coordinates(dolph.sp) <- c("x", "y")
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Create a SpatialPointsDataFrame
coordinates(dolph.sp) <- c("x", "y")
# Set the initial CRS for data to WGS84 (latitude and longitude)
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
dolph.sp <- spTransform(dolph.sp, CRS(paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs")))
dolph.sp
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Calculate the distances from the reference point to all other points in meters
dolph.sp$distance_meters <- distm(coord_data[, c("x", "y")], ref_point, fun = distVincentySphere)
install.packages("geosphere")
library(geosphere)
# Calculate the distances from the reference point to all other points in meters
dolph.sp$distance_meters <- distm(coord_data[, c("x", "y")], ref_point, fun = distVincentySphere)
dolph.sp
str(dolph.sp)
# Calculate the distances from the reference point to all other points in meters
dolph.sp <- distm(coord_data[, c("x", "y")], ref_point, fun = distVincentySphere)
# Only include three columns (id, x, and y coordinates) for making MCP's
dolph.sp <- coord_data[, c("id", "y", "x")]
# Create a simple feature data frame (sf)
coord_data_sf <- st_as_sf(dolph.sp, coords = c("x", "y"), crs = 4326)
# UTM zone for study area
dolph.sf <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
# Convert the sf object back to SpatialPoints
dolph.sp <- as(dolph.sf, "Spatial")
dolph.sf
# Drop empty geometries
dolph.sf <- st_drop_geometry(dolph.sf)
# Convert the sf object back to SpatialPoints
dolph.sp <- as(dolph.sf, "Spatial")
View(dolph.sp)
View(dolph.sf)
# UTM zone for study area
dolph.sf <- st_transform(coord_data_sf, crs = paste0("+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs"))
View(dolph.sf)
# Extract coordinates (latitude and longitude) and create new columns
dolph.sp$x <- st_coordinates(dolph.sf)[, 1]
dolph.sp
dolph.sp$y <- st_coordinates(dolph.sf)[, 2]
dolph.sp
coordinates(dolph.sp) <- c("x", "y")
# Remove two rows with NA's
dolph.sp <- dolph.sp[!is.na(dolph.sp$x) & !is.na(dolph.sp$y),]
coordinates(dolph.sp) <- c("x", "y")
# Set the initial CRS for data to WGS84 (latitude and longitude)
proj4string(dolph.sp) <- CRS( "+proj=utm +zone=17 +datum=WGS84 +units=m +no_defs" )
# Calculate MCPs for each dolphin
dolph.mcp <- mcp(dolph.sp, percent = 95)
# Plot
plot(dolph.sp, col = as.factor(dolph.sp@data$id), pch = 16, asp = 1)
plot(dolph.mcp, col = alpha(1:5, 0.5), add = TRUE)
