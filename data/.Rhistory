counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
vertex.size = sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "grey"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
layout(mat = layout.matrix)
# Loop through the list of graphs and plot them side by side
for (j in 1:length(HI_list)) {  # Loop through columns first
# Extract layout for this graph
combined_layout <- layout_list[[1]]
counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
vertex.size = sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "grey"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
layout(mat = layout.matrix)
# Loop through the list of graphs and plot them side by side
for (j in 1:length(HI_list)) {  # Loop through columns first
# Extract layout for this graph
combined_layout <- layout_list[[1]]
counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
edge.color = adjustcolor("black", alpha.f = 0.5),
vertex.size = sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "grey"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
layout(mat = layout.matrix)
par(mar = c(0.8, 0.8, 0.8, 0.8))
# Loop through the list of graphs and plot them side by side
for (j in 1:length(HI_list)) {  # Loop through columns first
# Extract layout for this graph
combined_layout <- layout_list[[1]]
counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
edge.color = adjustcolor("grey", alpha.f = 0.1),
vertex.size = sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "grey"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
layout(mat = layout.matrix)
par(mar = c(0.8, 0.8, 0.8, 0.8))
# Loop through the list of graphs and plot them side by side
for (j in 1:length(HI_list)) {  # Loop through columns first
# Extract layout for this graph
combined_layout <- layout_list[[1]]
counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
edge.color = adjustcolor("grey", alpha.f = 0.1),
vertex.size = sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "black"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
layout(mat = layout.matrix)
par(mar = c(0.8, 0.8, 0.8, 0.8))
# Loop through the list of graphs and plot them side by side
for (j in 1:length(HI_list)) {  # Loop through columns first
# Extract layout for this graph
combined_layout <- layout_list[[1]]
counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
edge.color = adjustcolor("grey", alpha.f = 0.1),
vertex.size = ifelse(labeled_nodes, 10, 5), #sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "black"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up the plotting layout
layout.matrix <- matrix(c(1:9), nrow = 3, ncol = 3)
layout(mat = layout.matrix)
par(mar = c(0.8, 0.8, 0.8, 0.8))
# Loop through the list of graphs and plot them side by side
for (j in 1:length(HI_list)) {  # Loop through columns first
# Extract layout for this graph
combined_layout <- layout_list[[1]]
counter <- 0
for (i in 1:length(ig)) {  # Loop through rows
counter <- counter + 1
# Get nodes for each behavior
labeled_nodes <- V(ig[[i]])$name %in% HI_list[[j]][[i]]  # Fixed index here
# Create the plot
plot(ig[[i]],
layout = combined_layout,
edge.width = E(ig[[i]])$weight * 4, # edge thickness
edge.color = adjustcolor("grey", alpha.f = 0.2),
vertex.size = ifelse(labeled_nodes, 10, 3), #sqrt(igraph::strength(ig[[i]], vids = V(ig[[i]]), mode = c("all"), loops = TRUE) * 10), # Changes node size based on an individual's strength (centrality)
vertex.frame.color = NA,
vertex.label.family = "Helvetica",
vertex.label = ifelse(labeled_nodes, V(ig[[i]])$name, NA),
vertex.label.color = V(dolp_ig[[i]])$color,
vertex.label.cex = 0.8,
vertex.label.dist = 2,
vertex.frame.width = 0.01,
vertex.color = ifelse(labeled_nodes, V(dolp_ig[[i]])$color, "black"))
# Add the plot with a box around it
box()
# Add a number in the right corner
text(1, 1, centrality_matrix[i, j], pos = 4, cex = 1.2, col = "black")
}
}
# Set up data
result_df <- readRDS("result_df.RData")
# Set up data
result_df <- readRDS("result_df.RData")
## Composite Centrality
ggplot(result_df, aes(x = Period, y = composite_centrality, fill = HI)) +
geom_boxplot()
HI_list <- readRDS("HI_list.RData")
View(HI_list)
HI_list[["BG"]]
View(result_df)
View(HI_list)
i=1
j=1
result_df$HI <- ifelse(result_df$ID %in% HI_list[[i]][[j]], names(HI_list[i]), result_df$HI)
# Set up data
result_df <- readRDS("result_df.RData")
HI_list <- readRDS("HI_list.RData")
ifelse(result_df$ID %in% HI_list[[i]][[j]], names(HI_list[i]), result_df$HI)
# Change the HI assignment
for (i in 1:4) {
for (j in 1:3) {
result_df$HI <- ifelse(result_df$ID %in% HI_list[[i]][[j]], names(HI_list[i]), result_df$HI)
}
}
View(HI_list)
View(result_df)
el_years <- readRDS("el_years.RData")
# Set the node names based on row names
get_names <- function (matrix, metric) {
row_names <- lapply(matrix, function (df) {rownames(df)})
for (i in seq_along(metric)) {
metric[[i]][,1] <- row_names[[i]]
}
return(metric)
}
# Betweenness centrality
between <- lapply(el_years, function (df) {betweenness_w(df, alpha = 1)})
between_diffs <- get_names(nxn, between)
nxn <- readRDS("nxn.RData") # association matrix of list_years
# Betweenness centrality
between <- lapply(el_years, function (df) {betweenness_w(df, alpha = 1)})
between_diffs <- get_names(nxn, between)
compare_between <- merge(
merge(between_diffs[[1]], between_diffs[[2]], by = "node"),
between_diffs[[3]], by = "node"
)
colnames(compare_between) <- c("ID", "Before_HAB", "During_HAB", "After_HAB")
compare_between[, c(2:4)] <- sapply(compare_between[, c(2:4)], as.numeric)
# Degree and strength centrality
strength <- lapply(el_years, function (df) {degree_w(df, measure=c("degree","output"), type="out", alpha=1)})
strength_diffs <- get_names(nxn, strength)
compare_strength <- merge(
merge(strength_diffs[[1]], strength_diffs[[2]], by = "node"),
strength_diffs[[3]], by = "node"
)
colnames(compare_strength) <- c("ID", "Before_HAB_degree", "Before_HAB_strength",
"During_HAB_degree", "During_HAB_strength",
"After_HAB_degree", "After_HAB_strength")
compare_strength[, c(2:7)] <- sapply(compare_strength[, c(2:7)], as.numeric)
# Look at all of the local metrics together
HI_data <-  subset_HI(list_years)
source("../code/functions.R") # Matrix_to_edge_list
# Look at all of the local metrics together
HI_data <-  subset_HI(list_years)
# Read in full datasheet and list (after wrangling steps)
list_years <- readRDS("list_years.RData") # (1995-2000)/(2001-2006)/(2007-2012)
# Look at all of the local metrics together
HI_data <-  subset_HI(list_years)
## Add a column containing HI type
HI_list <- readRDS("HI_list.RData")
# Combine the data
local_metrics_HI <- data.frame(ID = compare_between$ID,
Period = c(rep("1-Before_HAB", nrow(compare_between)),
rep("2-During_HAB", nrow(compare_between)),
rep("3-After_HAB", nrow(compare_between))),
Between = c(compare_between$Before_HAB,
compare_between$During_HAB,
compare_between$After_HAB),
Degree = c(compare_strength$Before_HAB_degree,
compare_strength$During_HAB_degree,
compare_strength$After_HAB_degree),
Strength = c(compare_strength$Before_HAB_strength,
compare_strength$During_HAB_strength,
compare_strength$After_HAB_strength))
# Add HI_type column
local_metrics_HI_1 <- local_metrics_HI[local_metrics_HI$Period == "1-Before_HAB", ]
local_metrics_HI_2 <- local_metrics_HI[local_metrics_HI$Period == "2-During_HAB", ]
local_metrics_HI_3 <- local_metrics_HI[local_metrics_HI$Period == "3-After_HAB", ]
local_list <- list(local_metrics_HI_1, local_metrics_HI_2, local_metrics_HI_3)
## Initialize a new dataframe to store the results
result_df <- data.frame()
View(local_list)
View(local_list[[1]])
p=1
View(HI_list)
i=HI_list[[3]]
result_df_new <- data.frame()
counter <- 0
# Increment the counter
counter <- counter + 1
index <- local_list[[p]]$ID %in% i[[p]]
index
# Create a new row for each ID that falls into four categories
new_rows <- local_list[[p]][index, ]
new_rows
new_rows$HI <- names(HI_list[counter])
new_rows
## Initialize a new dataframe to store the results
result_df <- data.frame()
## Initialize a counter
for (p in 1:3) {
counter <- 0
result_df_new <- data.frame()
for (i in HI_list) {
# Increment the counter
counter <- counter + 1
index <- local_list[[p]]$ID %in% i[[p]]
# Create a new row for each ID that falls into four categories
new_rows <- local_list[[p]][index, ]
new_rows$HI <- names(HI_list[counter])
# Append the new rows to the result dataframe
result_df_new <- rbind(result_df_new, new_rows)
}
result_df <- rbind(result_df, result_df_new)
}
result_df
View(result_df)
# Make period a binary variable and HI a factorial
result_df$During <- ifelse(result_df$Period == "2-During_HAB", 1, 0)
result_df$After <- ifelse(result_df$Period == "3-After_HAB", 1, 0)
result_df$HI <- as.factor(result_df$HI)
## Scale the centrality metrics
scaled_degree <- c(scale(result_df$Degree))
scaled_strength <- c(scale(result_df$Strength))
scaled_between <- c(scale(result_df$Between))
## Put weights on centrality
weighted_degree <- scaled_degree *  0.4
weighted_strength <- scaled_strength *  0.4
weighted_betweenness <- scaled_between *  0.2
##Create the weighted metric
result_df$composite_centrality <- weighted_degree + weighted_strength + weighted_betweenness
# Save dataset
saveRDS(result_df, "result_df.RData")
# Set up data
result_df <- readRDS("result_df.RData")
## Composite Centrality
ggplot(result_df, aes(x = Period, y = composite_centrality, fill = HI)) +
geom_boxplot()
# Plot the density plots for each period
plots_list <- list()
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
plot <- ggplot(filtered_df, aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
plots_list[[i]] <- plot
}
# Output plots
plots_list[[1]]
# Set up data
result_df <- readRDS("result_df.RData")
## Composite Centrality
ggplot(result_df, aes(x = Period, y = composite_centrality, fill = HI)) +
geom_boxplot()
# Plot the density plots for each period
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
mean_nf <- mean(filtered_df$composite_centrality[filtered_df$HI == "NF"], na.rm = TRUE) # Calculate mean for HI=="NF"
plot <- ggplot(filtered_df, aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank()) +
geom_hline(yintercept = mean_nf, linetype = "dashed", color = "red") # Add horizontal line
plots_list[[i]] <- plot
}
# Output plots
plots_list[[1]]
# Plot the density plots for each period
plots_list <- list()
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
mean_nf <- mean(filtered_df$composite_centrality[filtered_df$HI == "NF"], na.rm = TRUE) # Calculate mean for HI=="NF"
plot <- ggplot(filtered_df, aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank()) +
geom_hline(yintercept = mean_nf, linetype = "dashed", color = "red") # Add horizontal line
plots_list[[i]] <- plot
}
# Output plots
plots_list[[1]]
# Plot the density plots for each period
plots_list <- list()
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
mean_nf <- mean(filtered_df$composite_centrality[filtered_df$HI == "NF"], na.rm = TRUE) # Calculate mean for HI=="NF"
plot <- ggplot(filtered_df, aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank()) +
geom_hline(xintercept = mean_nf, linetype = "dashed", color = "red") # Add horizontal line
plots_list[[i]] <- plot
}
# Plot the density plots for each period
plots_list <- list()
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
mean_nf <- mean(filtered_df$composite_centrality[filtered_df$HI == "NF"], na.rm = TRUE) # Calculate mean for HI=="NF"
plot <- ggplot(filtered_df, aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank()) +
geom_vline(xintercept = mean_nf, linetype = "dashed", color = "red") # Add vertical line
plots_list[[i]] <- plot
}
# Output plots
plots_list[[1]]
# Plot the density plots for each period
plots_list <- list()
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
mean_nf <- mean(filtered_df$composite_centrality[filtered_df$HI == "NF"], na.rm = TRUE) # Calculate mean for HI=="NF"
plot <- ggplot(filtered_df[filtered_df$HI != "NF", ], aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
geom_vline(xintercept = mean_nf, linetype = "dashed", color = "red") + # Add vertical line
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
plots_list[[i]] <- plot
}
# Output plots
plots_list[[1]]
?geom_vline
# Plot the density plots for each period
plots_list <- list()
for (i in 1:length(unique(result_df$Period))) {
period_to_plot <- unique(result_df$Period)[i] # each period
filtered_df <- subset(result_df, Period == period_to_plot) # Separate data
mean_nf <- mean(filtered_df$composite_centrality[filtered_df$HI == "NF"], na.rm = TRUE) # Calculate mean for HI=="NF"
plot <- ggplot(filtered_df[filtered_df$HI != "NF", ], aes(x = composite_centrality, group = HI, fill = HI)) +
geom_density(adjust = 1.5, alpha = 0.4) +
geom_vline(xintercept = mean_nf, linetype = "dashed", color = "black", size = 1.5) + # Add vertical line
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
plots_list[[i]] <- plot
}
# Output plots
plots_list[[1]]
plots_list[[2]]
plots_list[[3]]
# Plot the density plots for each HI
plots_list_HI <- list()
length(unique(result_df$HI))-1
1:length(unique(result_df$HI))-1
1:(length(unique(result_df$HI))-1)
unique(result_df$HI)
i=3
HI_to_plot <- unique(result_df$HI)[i] # each period
HI_to_plot
filtered_df <- subset(result_df, HI == HI_to_plot) # Separate data
filtered_df
# Plot the density plots for each HI
plots_list_HI <- list()
for (i in 1:(length(unique(result_df$HI))-1)) {
HI_to_plot <- unique(result_df$HI)[i] # each period
filtered_df <- subset(result_df, HI == HI_to_plot) # Separate data
plot <- ggplot(filtered_df, aes(x = composite_centrality, group = Period, fill = Period)) +
geom_density(adjust = 1.5, alpha = 0.4) +
theme_ipsum() +
theme(axis.text.y = element_blank(),
axis.title.y = element_blank())
plots_list_HI[[i]] <- plot
}
# Output plots
plots_list_HI[[1]]
plots_list_HI[[2]]
plots_list_HI[[3]]
