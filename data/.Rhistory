require(asnipe) # get_group_by_individual--Damien Farine
# Could do permutatioNP
require(assocInd)
require(vegan)
# Run multiple cores for faster computing
require(doParallel)
require(foreach)
sample_data <- read.csv("sample_data.csv")
length(unique(sample_data$Code))
list_years <- readRDS("list_years.RData")
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- tapply(sample_data$Date, sample_data$Year, function(x) length(unique(x)))
effort
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- lapply(list_years$Date, function(x) length(unique(x)))
effort
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- lapply(list_years, function(df) length(unique(df$Date)))
effort
## Get estimate of population size
unique_ID_year <- lapply(list_years, function(df) length(unique(df$Code)))
unique_ID_year
## Compare effort to population size
effort <- as.data.frame(effort)
pop <- as.data.frame(unique_ID_year)
pop_effort <- cbind(effort, pop) # Days per year and pop size per year
pop_effort
pop_effort <- rbind(effort, pop) # Days per year and pop size per year
pop_effort
colnames(pop_effort) <- c(1:7)
pop_effort
rownames(pop_effort) <- c('Days Surveyed', 'Number of Indivduals')
pop_effort
plot(pop_effort$effort ~ pop_effort$unique_ID_year)
rownames(pop_effort) <- c('Days_Surveyed', 'Number_of_Indivduals')
plot(pop_effort[1,] ~ pop_effort[2,])
pop_effort[1,]
pop_effort[2,]
pop_effort[1,c(1:7)]
plot(pop_effort[1,c(1:7)] ~ pop_effort[2,c(1:7)])
# Estimate sampling effort and size for each year
## Get estimate of sampling effort
effort <- lapply(list_years, function(df) length(unique(df$Date)))
## Get estimate of population size
unique_ID_year <- lapply(list_years, function(df) length(unique(df$Code)))
## Compare effort to population size
pop_effort <- rbind(effort, pop) # Days per year and pop size per year
pop_effort <- as.data.frame(rbind(effort, pop)) # Days per year and pop size per year
## Compare effort to population size
effort <- as.data.frame(effort)
pop <- as.data.frame(unique_ID_year)
pop_effort <- as.data.frame(rbind(effort, pop)) # Days per year and pop size per year
pop_effort
colnames(pop_effort) <- c(1:7)
rownames(pop_effort) <- c('Days_Surveyed', 'Number_of_Indivduals')
plot(pop_effort[1,c(1:7)] ~ pop_effort[2,c(1:7)])
effort
pop_effort
# Read in different behavior's data frames
IDbehav_Beg <- readRDS("IDbehav_Beg.RData")
IDbehav_Pat <- readRDS("IDbehav_Pat.RData")
IDbehav_Dep <- readRDS("IDbehav_Dep.RData")
Beg_effort <- lapply(IDbehav_Beg, function(df) length(unique(df$Code)))
View(IDbehav_Beg)
length(unique(IDbehav_Beg[[1]]$Code=='B'))
IDbehav_Beg[[1]][["HI"]]
length(unique(IDbehav_Beg[[1]]$Code[IDbehav_Beg[[1]]$HI > 0]))
Beg_effort <- lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0])))
Beg_effort
Pat_effort <- as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI > 0]))))
Pat_effort
Beg_effort <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0]))))
Beg_effort
Dep_effort <- as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI > 0]))))
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, Beg_effort, Pat_effort, Dep_effort)) # Days per year and pop size per year
colnames(Beg_effort) <- c(1:7)
colnames(Pat_effort) <- c(1:7)
colnames(Dep_effort) <- c(1:7)
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, Beg_effort, Pat_effort, Dep_effort)) # Days per year and pop size per year
effort
colnames(effort) <- c(1:7)
colnames(unique_ID_year) <- c(1:7)
## Get estimate of population size
unique_ID_year <- as.data.frame(lapply(list_years, function(df) length(unique(df$Code))))
unique_ID_year
colnames(unique_ID_year) <- c(1:7)
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, Beg_effort, Pat_effort, Dep_effort)) # Days per year and pop size per year
pop_effort
rownames(pop_effort) <- c('Days_Surveyed', 'Number_of_Indivduals', 'Beggars', 'Patrollers', 'Depredators')
pop_effort
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
secondgen_data <- read.csv("secondgen_data.csv")
orig_data <- rbind(firstgen_data, secondgen_data)
orig_data <- subset(orig_data, subset=c(orig_data$Code != "None"))
length(unique(orig_data$Code))
length(unique(sample_data$Code))
sum(pop_effort[2,])
sum(pop_effort[c(3:5),])
sum(unique(sample_data$Code[sample_data$ConfHI != 0]))
unique(sample_data$Code[sample_data$ConfHI != 0])
length(unique(sample_data$Code[sample_data$ConfHI != 0]))
sum(pop_effort[c(3),])
sum(pop_effort[c(4),])
sum(pop_effort[c(5),])
lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0])))
sum(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0]))))
nb <- lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0])))
nb <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI == 0]))))
sum(nb)
sum(as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI == 0])))))
sum(as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI == 0])))))
all <- subset(IDbehav_Beg, IDbehav_Beg$Code %in% IDbehav_Pat$Code)
all
Beg <- as.data.frame(lapply(IDbehav_Beg, function(df)
unique(df$Code[df$HI > 0])))
Beg <- lapply(IDbehav_Beg, function(df)
unique(df$Code[df$HI > 0]))
View(Beg)
?append
Beg <- append(lapply(IDbehav_Beg, function(df)
unique(df$Code[df$HI > 0])))
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI > 0])))
Beg
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI > 0]))))
length(unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI > 0]))))
length(unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI > 0]))))
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0]))))
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI = 0]))))
length(unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI == 0]))))
length(unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI == 0]))))
length(unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI == 0]))))
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI == 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI == 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI == 0])))
Beg %in% Pat %in% Dep
sum(Beg %in% Pat %in% Dep)
sum(Beg %in% Dep)
sum(Pat %in% Dep)
Reduce(intersect, list(Beg, Pat, Dep))
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI != 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI != 0])))
Reduce(intersect, list(Beg, Pat, Dep))
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
setwd("C:/Users/bankh/My_Repos/Dolphins/code")
# Set working directory here
setwd("../data")
## load all necessary packages
library(ade4) # Look at Dai Shizuka/Jordi Bascompte
library(asnipe) # mrqap.dsp
library(assortnet) # associative indices
library(kinship2) # genetic relatedness
library(ggplot2) # Visualization
library(doParallel) # For faster coding
library(abind) # array
library(statip) # dbern
library(MCMCglmm) # MCMC models
library(brms) # Baysian
library(nimble) # For MCMC
library(mcmcplots) # For MCMC plots
library(MCMCvis)
source("../code/attach.nimble_v2.R")
# Read in social association matrix and listed data
dist_BG <- readRDS("dist_BG.RData") # BG Sim Matrix
dist_FG <- readRDS("dist_FG.RData") # BG Sim Matrix
dist_SD <- readRDS("dist_SD.RData") # BG Sim Matrix
kov <- readRDS("kov.RDS")  # Home range overlap
nxn <- readRDS("nxn_ovrlap.RData") # Association Matrix
list_years <- readRDS("list_years_ovrlap.RData") # Data listed into periods
# Fix sex so that probable is assigned
list_years <- lapply(list_years, function(df) {
df$Sex <- ifelse(df$Sex == "Probable Female", "Female",
ifelse(df$Sex == "Probable Male", "Male", df$Sex))
return(df)
})
# Now make a sex and age data frame
ILV_df <- list_years[[2]][!duplicated(list_years[[2]][, "Code"]), c("Code", "Sex", "Age")]
ILV_df$Sex <- ifelse(ILV_df$Sex == "Female", 0,
ifelse(ILV_df$Sex == "Male", 1, NA))
library(doParallel) # For faster coding
# Write a Nimble model: SRI ~ HRO + SEX + AGE + GR + HAB(BP + FG + SD)
n.cores <- detectCores()
system.time({
registerDoParallel(n.cores)
model1 <- nimbleCode({
#Priors
## ILV Effects
HRO_Effect ~ dt(mu=0, sigma=1, df=1)
SEX_Effect ~ dt(mu=0, sigma=1, df=1)
AGE_Effect ~ dt(mu=0, sigma=1, df=1)
#GR_Effect ~ dt(mu=0, sigma=1, df=1)
Rand.Err ~ T(dt(mu=0, sigma=1, df=1), 0, )
## HI Effects
for (p in 1:n.per) {
BP_Effect[p] ~ dt(mu=0, sigma=1, df=1)
FG_Effect[p] ~ dt(mu=0, sigma=1, df=1)
SD_Effect[p] ~ dt(mu=0, sigma=1, df=1)
Obs.Err[p] ~ T(dt(mu=0, sigma=1, df=1), 0, )
} #p
# Run through matrix
for(i in 1:n.ind){
# Estimate unknowns
SEX[i] ~ dbern(prob = 0.5) # Same probability for female or male
AGE[i] ~ dunif(0, 56) # uniform probability for all ages
AGE.Est[i] <- floor(AGE[i]) # Get a whole number
# Random effect term
u[i] ~ dnorm(mean = 0, sd = Rand.Err)
for (j in (1+i):n.ind) {
# Intercept Prior for each ID
IJ_Random[i, j] <- (u[i]+ u[j])
#Impute missing sexes & ages:
SEX.SIM[i, j] <- (SEX[i] == SEX[j])
AGE_Diff[i, j] <- abs(AGE.Est[i] - AGE.Est[j])
#AGE_Diff_Scaled[i, j] <- (AGE_Diff[i, j] - mean(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T)/ sd(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T))
## HI Effects
for (p in 1:n.per) {
# Process Model
logit(SRI.Exp[i, j, p]) <- IJ_Random[i, j] +
HRO[i, j]*HRO_Effect + SEX.SIM[i, j]*SEX_Effect + AGE_Diff[i, j]*AGE_Effect + #GR[i, j]*GR_Effect +
BP[i, j, p]*BP_Effect[p] +  FG[i, j, p]*FG_Effect[p] +  SD[i, j, p]*SD_Effect[p]
# Observation Model (Likelihood) # a = mean^2*(1-mean)/sd^2-mean, b = mean*(1-mean)^2/sd^2+mean-1
SRI[i, j, p] ~ dbeta(shape1 = (SRI.Exp[i, j, p]*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)),
shape2 = ((1-SRI.Exp[i, j, p])*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)))
}#p
}#j
}#i
})#model1
### End parallel processing
stopImplicitCluster()
})
# Write a Nimble model: SRI ~ HRO + SEX + AGE + GR + HAB(BP + FG + SD)
model1 <- nimbleCode({
#Priors
## ILV Effects
HRO_Effect ~ dt(mu=0, sigma=1, df=1)
SEX_Effect ~ dt(mu=0, sigma=1, df=1)
AGE_Effect ~ dt(mu=0, sigma=1, df=1)
#GR_Effect ~ dt(mu=0, sigma=1, df=1)
Rand.Err ~ T(dt(mu=0, sigma=1, df=1), 0, )
## HI Effects
for (p in 1:n.per) {
BP_Effect[p] ~ dt(mu=0, sigma=1, df=1)
FG_Effect[p] ~ dt(mu=0, sigma=1, df=1)
SD_Effect[p] ~ dt(mu=0, sigma=1, df=1)
Obs.Err[p] ~ T(dt(mu=0, sigma=1, df=1), 0, )
} #p
# Run through matrix
for(i in 1:n.ind){
# Estimate unknowns
SEX[i] ~ dbern(prob = 0.5) # Same probability for female or male
AGE[i] ~ dunif(0, 56) # uniform probability for all ages
AGE.Est[i] <- floor(AGE[i]) # Get a whole number
# Random effect term
u[i] ~ dnorm(mean = 0, sd = Rand.Err)
for (j in (1+i):n.ind) {
# Intercept Prior for each ID
IJ_Random[i, j] <- (u[i]+ u[j])
#Impute missing sexes & ages:
SEX.SIM[i, j] <- (SEX[i] == SEX[j])
AGE_Diff[i, j] <- abs(AGE.Est[i] - AGE.Est[j])
#AGE_Diff_Scaled[i, j] <- (AGE_Diff[i, j] - mean(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T)/ sd(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T))
## HI Effects
for (p in 1:n.per) {
# Process Model
logit(SRI.Exp[i, j, p]) <- IJ_Random[i, j] +
HRO[i, j]*HRO_Effect + SEX.SIM[i, j]*SEX_Effect + AGE_Diff[i, j]*AGE_Effect + #GR[i, j]*GR_Effect +
BP[i, j, p]*BP_Effect[p] +  FG[i, j, p]*FG_Effect[p] +  SD[i, j, p]*SD_Effect[p]
# Observation Model (Likelihood) # a = mean^2*(1-mean)/sd^2-mean, b = mean*(1-mean)^2/sd^2+mean-1
SRI[i, j, p] ~ dbeta(shape1 = (SRI.Exp[i, j, p]*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)),
shape2 = ((1-SRI.Exp[i, j, p])*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)))
}#p
}#j
}#i
})#model1
# Parameters monitored (are there any new parameters to include?)
parameters <- c("IJ_Random",
"HRO_Effect", "SEX_Effect", "AGE_Effect", #"GR_Effect",
"BP_Effect", "FG_Effect", "SD_Effect")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.data = list(SRI = abind(nxn, along=3),
HRO = kov,
SEX = ILV_df$Sex,
AGE = ILV_df$Age,
#GR = gr_list,
BP = abind(dist_BG, along=3),
FG = abind(dist_FG, along=3),
SD = abind(dist_SD, along=3))
nimble.constants = list(n.ind = length(unique(ILV_df$Code)),
n.per = length(nxn))
n.cores <- detectCores()
system.time({
registerDoParallel(n.cores)
mcmc.output <- nimbleMCMC(code = model1,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
### End parallel processing
stopImplicitCluster()
})
# Fix sex so that probable is assigned
list_years <- lapply(list_years, function(df) {
df$Sex <- ifelse(df$Sex == "Probable Female", "Female",
ifelse(df$Sex == "Probable Male", "Male", df$Sex))
return(df)
})
# Save list
saveRDS(list_years, file="list_years.RData")
saveRDS(nimble.data, "../data/nimble.data.RData")
# Read in social association matrix and listed data
nimble.data <- readRDS("../data/nimble.data.RData")
View(nimble.data)
gc()
rm(list=ls())
gc()
library(doParallel)
library(nimble)
source('../data/attach.nimble_v2.R')
setwd("C:/Users/bankh/My_Repos/Dolphins/code")
source('../data/attach.nimble_v2.R')
source('../code/attach.nimble_v2.R')
# Read in social association matrix and listed data
nimble.data <- readRDS("../data/nimble.data.RData")
# Specify the number of nodes/workers in the cluster
num_nodes <- 4
# Create a cluster with the specified number of nodes/workers
cl <- makeCluster(num_nodes)
# Register the cluster to enable parallel processing
registerDoParallel(cl)
# Write a Nimble model: SRI ~ HRO + SEX + AGE + GR + HAB(BP + FG + SD)
model1 <- nimbleCode({
#Priors
## ILV Effects
HRO_Effect ~ dt(mu=0, sigma=1, df=1)
SEX_Effect ~ dt(mu=0, sigma=1, df=1)
AGE_Effect ~ dt(mu=0, sigma=1, df=1)
#GR_Effect ~ dt(mu=0, sigma=1, df=1)
Rand.Err ~ T(dt(mu=0, sigma=1, df=1), 0, )
## HI Effects
for (p in 1:n.per) {
BP_Effect[p] ~ dt(mu=0, sigma=1, df=1)
FG_Effect[p] ~ dt(mu=0, sigma=1, df=1)
SD_Effect[p] ~ dt(mu=0, sigma=1, df=1)
Obs.Err[p] ~ T(dt(mu=0, sigma=1, df=1), 0, )
} #p
# Run through matrix
for(i in 1:n.ind){
# Estimate unknowns
SEX[i] ~ dbern(prob = 0.5) # Same probability for female or male
AGE[i] ~ dunif(0, 56) # uniform probability for all ages
AGE.Est[i] <- floor(AGE[i]) # Get a whole number
# Random effect term
u[i] ~ dnorm(mean = 0, sd = Rand.Err)
for (j in (1+i):n.ind) {
# Intercept Prior for each ID
IJ_Random[i, j] <- (u[i]+ u[j])
#Impute missing sexes & ages:
SEX.SIM[i, j] <- (SEX[i] == SEX[j])
AGE_Diff[i, j] <- abs(AGE.Est[i] - AGE.Est[j])
#AGE_Diff_Scaled[i, j] <- (AGE_Diff[i, j] - mean(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T)/ sd(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T))
## HI Effects
for (p in 1:n.per) {
# Process Model
logit(SRI.Exp[i, j, p]) <- IJ_Random[i, j] +
HRO[i, j]*HRO_Effect + SEX.SIM[i, j]*SEX_Effect + AGE_Diff[i, j]*AGE_Effect + #GR[i, j]*GR_Effect +
BP[i, j, p]*BP_Effect[p] +  FG[i, j, p]*FG_Effect[p] +  SD[i, j, p]*SD_Effect[p]
# Observation Model (Likelihood) # a = mean^2*(1-mean)/sd^2-mean, b = mean*(1-mean)^2/sd^2+mean-1
SRI[i, j, p] ~ dbeta(shape1 = (SRI.Exp[i, j, p]*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)),
shape2 = ((1-SRI.Exp[i, j, p])*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)))
}#p
}#j
}#i
})#model1
# Parameters monitored (are there any new parameters to include?)
parameters <- c("IJ_Random",
"HRO_Effect", "SEX_Effect", "AGE_Effect", #"GR_Effect",
"BP_Effect", "FG_Effect", "SD_Effect")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
# Data
nimble.constants = list(n.ind = length(unique(ILV_df$Code)),
n.per = length(nxn))
# Set working directory here
setwd("../data")
saveRDS(nimble.constants, "../data/nimble.constants.RData")
list_years <- readRDS("list_years_ovrlap.RData") # Data listed into periods
# Fix sex so that probable is assigned
list_years <- lapply(list_years, function(df) {
df$Sex <- ifelse(df$Sex == "Probable Female", "Female",
ifelse(df$Sex == "Probable Male", "Male", df$Sex))
return(df)
})
# Now make a sex and age data frame
ILV_df <- list_years[[2]][!duplicated(list_years[[2]][, "Code"]), c("Code", "Sex", "Age")]
ILV_df$Sex <- ifelse(ILV_df$Sex == "Female", 0,
ifelse(ILV_df$Sex == "Male", 1, NA))
nimble.constants = list(n.ind = length(unique(ILV_df$Code)),
n.per = length(nxn))
nxn <- readRDS("nxn_ovrlap.RData") # Association Matrix
nimble.constants = list(n.ind = length(unique(ILV_df$Code)),
n.per = length(nxn))
saveRDS(nimble.constants, "../data/nimble.constants.RData")
gc()
# Load the parallel package
library(doParallel)
library(nimble)
source('../code/attach.nimble_v2.R')
# Read in social association matrix and listed data
nimble.data <- readRDS("../data/nimble.data.RData")
nimble.constants <- readRDS("../data/nimble.constants.RData")
# Specify the number of nodes/workers in the cluster
num_nodes <- 4
# Create a cluster with the specified number of nodes/workers
cl <- makeCluster(num_nodes)
# Register the cluster to enable parallel processing
registerDoParallel(cl)
# Write a Nimble model: SRI ~ HRO + SEX + AGE + GR + HAB(BP + FG + SD)
model1 <- nimbleCode({
#Priors
## ILV Effects
HRO_Effect ~ dt(mu=0, sigma=1, df=1)
SEX_Effect ~ dt(mu=0, sigma=1, df=1)
AGE_Effect ~ dt(mu=0, sigma=1, df=1)
#GR_Effect ~ dt(mu=0, sigma=1, df=1)
Rand.Err ~ T(dt(mu=0, sigma=1, df=1), 0, )
## HI Effects
for (p in 1:n.per) {
BP_Effect[p] ~ dt(mu=0, sigma=1, df=1)
FG_Effect[p] ~ dt(mu=0, sigma=1, df=1)
SD_Effect[p] ~ dt(mu=0, sigma=1, df=1)
Obs.Err[p] ~ T(dt(mu=0, sigma=1, df=1), 0, )
} #p
# Run through matrix
for(i in 1:n.ind){
# Estimate unknowns
SEX[i] ~ dbern(prob = 0.5) # Same probability for female or male
AGE[i] ~ dunif(0, 56) # uniform probability for all ages
AGE.Est[i] <- floor(AGE[i]) # Get a whole number
# Random effect term
u[i] ~ dnorm(mean = 0, sd = Rand.Err)
for (j in (1+i):n.ind) {
# Intercept Prior for each ID
IJ_Random[i, j] <- (u[i]+ u[j])
#Impute missing sexes & ages:
SEX.SIM[i, j] <- (SEX[i] == SEX[j])
AGE_Diff[i, j] <- abs(AGE.Est[i] - AGE.Est[j])
#AGE_Diff_Scaled[i, j] <- (AGE_Diff[i, j] - mean(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T)/ sd(AGE_DIFF[1:n.ind,1:n.ind],na.rm=T))
## HI Effects
for (p in 1:n.per) {
# Process Model
logit(SRI.Exp[i, j, p]) <- IJ_Random[i, j] +
HRO[i, j]*HRO_Effect + SEX.SIM[i, j]*SEX_Effect + AGE_Diff[i, j]*AGE_Effect + #GR[i, j]*GR_Effect +
BP[i, j, p]*BP_Effect[p] +  FG[i, j, p]*FG_Effect[p] +  SD[i, j, p]*SD_Effect[p]
# Observation Model (Likelihood) # a = mean^2*(1-mean)/sd^2-mean, b = mean*(1-mean)^2/sd^2+mean-1
SRI[i, j, p] ~ dbeta(shape1 = (SRI.Exp[i, j, p]*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)),
shape2 = ((1-SRI.Exp[i, j, p])*(SRI.Exp[i, j, p]*(1-SRI.Exp[i, j, p])/(Obs.Err[p]^2)-1)))
}#p
}#j
}#i
})#model1
# Parameters monitored (are there any new parameters to include?)
parameters <- c("IJ_Random",
"HRO_Effect", "SEX_Effect", "AGE_Effect", #"GR_Effect",
"BP_Effect", "FG_Effect", "SD_Effect")
# MCMC Settings
ni <- 40000
nt <- 40
nb <- 20000
nc <- 3
mcmc.output <- nimbleMCMC(code = model1,
data = nimble.data,
constants=nimble.constants,
monitors = parameters,
niter = ni,
nburnin = nb,
nchains = nc,
thin=nt,
summary=TRUE,
samplesAsCodaMCMC = TRUE)
