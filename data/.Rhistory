fake_ids <- 118:(117 + max(pedigree_data$mom) - max(pedigree_data$id))
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
pedigree_data
# Read in sex and age data
ILV_pat <- read.csv("Paternity_data.csv")
# Order data
order_rows <- rownames(nxn[[1]])
order_cols <- colnames(nxn[[1]])
# Reorder rows in 'ILV' based on 'order_rows'
ILV <- ILV_pat[ILV_pat$Alias %in% order_rows, ]
nxn <- readRDS("nxn.RData") # association matrix of list_years
# Order data
order_rows <- rownames(nxn[[1]])
order_cols <- colnames(nxn[[1]])
# Reorder rows in 'ILV' based on 'order_rows'
ILV <- ILV_pat[ILV_pat$Alias %in% order_rows, ]
ILV <- ILV[match(order_rows, ILV$Alias), ]
View(ILV)
# Subset paternity data
pedigree_df <- ILV[!duplicated(ILV[, "Alias"]), c("Alias", "Mom", "Dad", "Sex")]
pedigree_df
# Fix dad data
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "na", NA, pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB26 or FB66", "FB26", pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB76 or FB38", "FB76", pedigree_df$Dad)
# Fix sex so that probable is assigned
pedigree_df$Sex <- ifelse(ILV$Sex == "Probable Female", "Female",
ifelse(ILV$Sex == "Probable Male", "Male", ILV$Sex))
# Make sex numeric
pedigree_df$Sex <- ifelse(pedigree_df$Sex == "Female", 2,
ifelse(pedigree_df$Sex == "Male", 1, NA))
pedigree_df
# Make id numeric
pedigree_df$ID <- rownames(pedigree_df)
## Moms
for (i in 1:nrow(pedigree_df)) {
pedigree_df$Mom <- ifelse(pedigree_df$Mom %in% pedigree_df$Alias[i],
pedigree_df$ID[i], pedigree_df$Mom)
}
### Only take the moms that aren't found in the 117 list
missing_moms<- subset(pedigree_df, nchar(Mom) > 3)
number_mom <- data.frame(Mom = unique(missing_moms$Mom),
ID = c(118:(117 + length(unique(missing_moms$Mom)))))
for (i in 1:nrow(missing_moms)) {
missing_moms$Mom <- ifelse(missing_moms$Mom %in% number_mom$Mom[i],
number_mom$ID[i],
missing_moms$Mom)
}
### Fill in the rest of the NAs with random numbers
missing_moms_match<- subset(pedigree_df, nchar(Mom) > 3)
matching_indices <- match(pedigree_df$Mom, missing_moms_match$Mom)
pedigree_df$Mom <- ifelse(!is.na(matching_indices), missing_moms$Mom[matching_indices], pedigree_df$Mom)
## Dads
for (i in 1:nrow(pedigree_df)) {
pedigree_df$Dad <- ifelse(pedigree_df$Dad %in% pedigree_df$Alias[i],
pedigree_df$ID[i], pedigree_df$Dad)
}
### Only take the moms that aren't found in the 117 list
missing_dads<- subset(pedigree_df, nchar(Dad) > 3)
number_dad <- data.frame(Dad = unique(missing_dads$Dad),
ID = c(118:(117 + length(unique(missing_dads$Dad)))))
for (i in 1:nrow(missing_dads)) {
missing_dads$Dad <- ifelse(missing_dads$Dad %in% number_dad$Dad[i],
number_dad$ID[i],
missing_dads$Dad)
}
### Fill in the rest of the NAs with random numbers
missing_dads_match<- subset(pedigree_df, nchar(Dad) > 3)
matching_indices <- match(pedigree_df$Dad, missing_dads_match$Dad)
pedigree_df$Dad <- ifelse(!is.na(matching_indices), missing_dads$Dad[matching_indices], pedigree_df$Dad)
pedigree_df
# Read in sex and age data
ILV_pat <- read.csv("Paternity_data.csv")
# Order data
order_rows <- rownames(nxn[[1]])
order_cols <- colnames(nxn[[1]])
# Reorder rows in 'ILV' based on 'order_rows'
ILV <- ILV_pat[ILV_pat$Alias %in% order_rows, ]
ILV <- ILV[match(order_rows, ILV$Alias), ]
# Subset paternity data
pedigree_df <- ILV[!duplicated(ILV[, "Alias"]), c("Alias", "Mom", "Dad", "Sex")]
# Fix dad data
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "na", NA, pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB26 or FB66", "FB26", pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB76 or FB38", "FB76", pedigree_df$Dad)
# Fix sex so that probable is assigned
pedigree_df$Sex <- ifelse(ILV$Sex == "Probable Female", "Female",
ifelse(ILV$Sex == "Probable Male", "Male", ILV$Sex))
# Make sex numeric
pedigree_df$Sex <- ifelse(pedigree_df$Sex == "Female", 2,
ifelse(pedigree_df$Sex == "Male", 1, NA))
pedigree_df
# Make id numeric
pedigree_df$ID <- rownames(pedigree_df)
pedigree_df
rownames(pedigree_df)
# Read in sex and age data
ILV_pat <- read.csv("Paternity_data.csv")
# Order data
order_rows <- rownames(nxn[[1]])
order_cols <- colnames(nxn[[1]])
# Reorder rows in 'ILV' based on 'order_rows'
ILV <- ILV_pat[ILV_pat$Alias %in% order_rows, ]
ILV <- ILV[match(order_rows, ILV$Alias), ]
ILV
# Subset paternity data
pedigree_df <- data.frame(Alias = ILV$Alias,
Mom = ILV$Mom,
Dad = ILV$Dad,
Sex = ILV$Sex)
pedigree_df
# Fix dad data
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "na", NA, pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB26 or FB66", "FB26", pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB76 or FB38", "FB76", pedigree_df$Dad)
# Fix sex so that probable is assigned
pedigree_df$Sex <- ifelse(ILV$Sex == "Probable Female", "Female",
ifelse(ILV$Sex == "Probable Male", "Male", ILV$Sex))
# Make sex numeric
pedigree_df$Sex <- ifelse(pedigree_df$Sex == "Female", 2,
ifelse(pedigree_df$Sex == "Male", 1, NA))
# Make id numeric
pedigree_df$ID <- rownames(pedigree_df)
pedigree_df
## Moms
for (i in 1:nrow(pedigree_df)) {
pedigree_df$Mom <- ifelse(pedigree_df$Mom %in% pedigree_df$Alias[i],
pedigree_df$ID[i], pedigree_df$Mom)
}
### Only take the moms that aren't found in the 117 list
missing_moms<- subset(pedigree_df, nchar(Mom) > 3)
number_mom <- data.frame(Mom = unique(missing_moms$Mom),
ID = c(118:(117 + length(unique(missing_moms$Mom)))))
for (i in 1:nrow(missing_moms)) {
missing_moms$Mom <- ifelse(missing_moms$Mom %in% number_mom$Mom[i],
number_mom$ID[i],
missing_moms$Mom)
}
### Fill in the rest of the NAs with random numbers
missing_moms_match<- subset(pedigree_df, nchar(Mom) > 3)
matching_indices <- match(pedigree_df$Mom, missing_moms_match$Mom)
pedigree_df$Mom <- ifelse(!is.na(matching_indices), missing_moms$Mom[matching_indices], pedigree_df$Mom)
## Dads
for (i in 1:nrow(pedigree_df)) {
pedigree_df$Dad <- ifelse(pedigree_df$Dad %in% pedigree_df$Alias[i],
pedigree_df$ID[i], pedigree_df$Dad)
}
### Only take the moms that aren't found in the 117 list
missing_dads<- subset(pedigree_df, nchar(Dad) > 3)
number_dad <- data.frame(Dad = unique(missing_dads$Dad),
ID = c(118:(117 + length(unique(missing_dads$Dad)))))
for (i in 1:nrow(missing_dads)) {
missing_dads$Dad <- ifelse(missing_dads$Dad %in% number_dad$Dad[i],
number_dad$ID[i],
missing_dads$Dad)
}
### Fill in the rest of the NAs with random numbers
missing_dads_match<- subset(pedigree_df, nchar(Dad) > 3)
matching_indices <- match(pedigree_df$Dad, missing_dads_match$Dad)
pedigree_df$Dad <- ifelse(!is.na(matching_indices), missing_dads$Dad[matching_indices], pedigree_df$Dad)
pedigree_df
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
pedigree_data
# Read in sex and age data
ILV_pat <- read.csv("Paternity_data.csv")
# Order data
order_rows <- rownames(nxn[[1]])
order_cols <- colnames(nxn[[1]])
# Reorder rows in 'ILV' based on 'order_rows'
ILV <- ILV_pat[ILV_pat$Alias %in% order_rows, ]
ILV <- ILV[match(order_rows, ILV$Alias), ]
# Subset paternity data
pedigree_df <- data.frame(Alias = ILV$Alias,
Mom = ILV$Mom,
Dad = ILV$Dad,
Sex = ILV$Sex)
pedigree_df
# Fix dad data
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "na", NA, pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB26 or FB66", "FB26", pedigree_df$Dad)
pedigree_df$Dad <- ifelse(pedigree_df$Dad == "FB76 or FB38", "FB76", pedigree_df$Dad)
# Fix sex so that probable is assigned
pedigree_df$Sex <- ifelse(ILV$Sex == "Probable Female", "Female",
ifelse(ILV$Sex == "Probable Male", "Male", ILV$Sex))
# Make sex numeric
pedigree_df$Sex <- ifelse(pedigree_df$Sex == "Female", 2,
ifelse(pedigree_df$Sex == "Male", 1, NA))
pedigree_df
# Make id numeric
pedigree_df$ID <- rownames(pedigree_df)
## Moms
for (i in 1:nrow(pedigree_df)) {
pedigree_df$Mom <- ifelse(pedigree_df$Mom %in% pedigree_df$Alias[i],
pedigree_df$ID[i], pedigree_df$Mom)
}
pedigree_df
## Dads
for (i in 1:nrow(pedigree_df)) {
pedigree_df$Dad <- ifelse(pedigree_df$Dad %in% pedigree_df$Alias[i],
pedigree_df$ID[i], pedigree_df$Dad)
}
pedigree_df
# Only take the ids that aren't found in the 117 list
missing_moms<- subset(pedigree_df, nchar(Mom) > 3)
missing_dads<- subset(pedigree_df, nchar(Dad) > 3)
missing_moms
missing_dads<- subset(pedigree_df, nchar(Dad) > 3)
missing_dads
number_mom <- data.frame(Mom = unique(missing_moms$Mom),
ID = c(118:(117 + length(unique(missing_moms$Mom)))))
for (i in 1:nrow(missing_moms)) {
missing_moms$Mom <- ifelse(missing_moms$Mom %in% number_mom$Mom[i],
number_mom$ID[i],
missing_moms$Mom)
}
missing_moms
max(missing_moms$Mom)
(max(missing_moms$Mom) + 1)
# Only take the ids that aren't found in the 117 list
missing_moms<- subset(pedigree_df, nchar(Mom) > 3)
missing_dads<- subset(pedigree_df, nchar(Dad) > 3)
number_mom <- data.frame(Mom = unique(missing_moms$Mom),
ID = as.numeric(c(118:(117 + length(unique(missing_moms$Mom))))))
for (i in 1:nrow(missing_moms)) {
missing_moms$Mom <- ifelse(missing_moms$Mom %in% number_mom$Mom[i],
number_mom$ID[i],
missing_moms$Mom)
}
missing_moms
(max(missing_moms$Mom) + 1)
str(missing_moms)
# Only take the ids that aren't found in the 117 list
missing_moms<- subset(pedigree_df, nchar(Mom) > 3)
missing_dads<- subset(pedigree_df, nchar(Dad) > 3)
number_mom <- data.frame(Mom = unique(missing_moms$Mom),
ID = c(118:(117 + length(unique(missing_moms$Mom)))))
for (i in 1:nrow(missing_moms)) {
missing_moms$Mom <- ifelse(missing_moms$Mom %in% number_mom$Mom[i],
number_mom$ID[i],
missing_moms$Mom)
}
## Make ID numeric
missing_moms$Mom <- as.numeric(missing_moms$Mom)
str(missing_moms)
(max(missing_moms$Mom) + 1)
c((max(missing_moms$Mom) + 1):(max(missing_moms$Mom) + length(unique(missing_dads$Dad))))
## Do the same thing with dads
number_dad <- data.frame(Dad = unique(missing_dads$Dad),
ID = c((max(missing_moms$Mom) + 1):(max(missing_moms$Mom) + length(unique(missing_dads$Dad)))))
for (i in 1:nrow(missing_dads)) {
missing_dads$Dad <- ifelse(missing_dads$Dad %in% number_dad$Dad[i],
number_dad$ID[i],
missing_dads$Dad)
}
## Make ID numeric
missing_dads$Dad <- as.numeric(missing_dads$Dad)
missing_dads
# Fill in the rest of the NAs with random numbers
## Moms
missing_moms_match <- subset(pedigree_df, nchar(Mom) > 3)
matching_indices <- match(pedigree_df$Mom, missing_moms_match$Mom)
pedigree_df$Mom <- ifelse(!is.na(matching_indices), missing_moms$Mom[matching_indices], pedigree_df$Mom)
## Dads
missing_dads_match<- subset(pedigree_df, nchar(Dad) > 3)
matching_indices <- match(pedigree_df$Dad, missing_dads_match$Dad)
pedigree_df$Dad <- ifelse(!is.na(matching_indices), missing_dads$Dad[matching_indices], pedigree_df$Dad)
pedigree_df
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
# Assuming your dataframe is named pedigree_data
pedigree_data$dad[is.na(pedigree_data$dad)] <- 0  # Replace NA with 0 or another appropriate code
pedigree_data$mom[is.na(pedigree_data$mom)] <- 0  # Replace NA with 0 or another appropriate code
# Create fake individuals
fake_ids <- 118:(117 + max(pedigree_data$mom) - max(pedigree_data$id))
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
pedigree_data
# Create fake individuals
fake_ids <- 118:(117 + max(pedigree_data$dad) - max(pedigree_data$id))
fake_ids
max(pedigree_data$dad)
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
# Assuming your dataframe is named pedigree_data
pedigree_data$dad[is.na(pedigree_data$dad)] <- 0  # Replace NA with 0 or another appropriate code
pedigree_data$mom[is.na(pedigree_data$mom)] <- 0  # Replace NA with 0 or another appropriate code
max(pedigree_data$id)
# Create fake individuals
fake_ids <- 118:(117 + max(pedigree_data$dad) - max(pedigree_data$id))
fake_ids
# Create fake individuals
fake_ids <- 118:max(pedigree_data$dad)
fake_ids
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
pedigree_data
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:143)] <- 1
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:148)] <- 1
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:155)] <- 1
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
pedigree_data$sex[pedigree_data$id %in% c(118:122)] <- 2
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
pedigree_data$sex[pedigree_data$id %in% c(118:127)] <- 2
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
pedigree_data$sex[pedigree_data$id %in% c(118:132)] <- 2
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
pedigree_data$sex[pedigree_data$id %in% c(118:137)] <- 2
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
pedigree_data
# Create fake individuals
fake_ids <- 118:(max(pedigree_data$dad) + 1)
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:155)] <- 1
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
pedigree_data
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:156)] <- 1
pedigree_data
# Add Fake Fathers
pedigree_data$dad <- ifelse(pedigree_data$mom != 0 & pedigree_data$dad == 0, 156, pedigree_data$dad)
pedigree_data
length(pedigree_data$dad)
# Create fake individuals
fake_ids <- 118:(max(pedigree_data$dad) + 1)
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
pedigree_data
# Assuming your dataframe is named pedigree_data
pedigree_data$dad[is.na(pedigree_data$dad)] <- 0  # Replace NA with 0 or another appropriate code
pedigree_data$mom[is.na(pedigree_data$mom)] <- 0  # Replace NA with 0 or another appropriate code
# Create fake individuals
fake_ids <- 118:(max(pedigree_data$dad) + 1)
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
fake
pedigree_data
pedigree_data <- rbind(pedigree_data, fake)
pedigree_data
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:156)] <- 1
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
length(pedigree_data$dad)
# Add Fake Fathers
for (i in 1:length(pedigree_data$dad)) {
pedigree_data$dad <- ifelse(pedigree_data$mom[i] != 0 & pedigree_data$dad[i] == 0, (i+155), pedigree_data$dad)
}
pedigree_data
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
# Assuming your dataframe is named pedigree_data
pedigree_data$dad[is.na(pedigree_data$dad)] <- 0  # Replace NA with 0 or another appropriate code
pedigree_data$mom[is.na(pedigree_data$mom)] <- 0  # Replace NA with 0 or another appropriate code
# Create fake individuals
fake_ids <- 118:(max(pedigree_data$dad) + 1)
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:156)] <- 1
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
str(pedigree_data)
pedigree_data$mom > 0 & pedigree_data$dad == 0
sum(pedigree_data$mom > 0 & pedigree_data$dad == 0)
# Add Fake Fathers
for (i in 1:sum(pedigree_data$mom > 0 & pedigree_data$dad == 0)) {
pedigree_data$dad <- ifelse(pedigree_data$mom[i] > 0 & pedigree_data$dad[i] == 0, (i+155), pedigree_data$dad[i])
}
pedigree_data
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
# Assuming your dataframe is named pedigree_data
pedigree_data$dad[is.na(pedigree_data$dad)] <- 0  # Replace NA with 0 or another appropriate code
pedigree_data$mom[is.na(pedigree_data$mom)] <- 0  # Replace NA with 0 or another appropriate code
# Create fake individuals
fake_ids <- 118:(max(pedigree_data$dad) + 1)
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:156)] <- 1
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
# Add Fake Fathers
for (i in which(pedigree_data$mom > 0 & pedigree_data$dad == 0)) {
pedigree_data$dad[i] <- i + 155
}
pedigree_data
which(pedigree_data$mom > 0 & pedigree_data$dad == 0)
# Now create data for function
pedigree_data <- data.frame(id = as.numeric(pedigree_df$ID),
mom = as.numeric(pedigree_df$Mom),
dad = as.numeric(pedigree_df$Dad),
sex = pedigree_df$Sex)
# Assuming your dataframe is named pedigree_data
pedigree_data$dad[is.na(pedigree_data$dad)] <- 0  # Replace NA with 0 or another appropriate code
pedigree_data$mom[is.na(pedigree_data$mom)] <- 0  # Replace NA with 0 or another appropriate code
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:156)] <- 1
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
# Add Fake Fathers
for (i in which(pedigree_data$mom > 0 & pedigree_data$dad == 0)) {
pedigree_data$dad[i] <- i + 155
}
pedigree_data
# Create fake individuals
fake_ids <- 118:(max(pedigree_data$dad) + 1)
fake_ids
fake <- data.frame(id = fake_ids,
mom = rep(0, length(fake_ids)),
dad = rep(0, length(fake_ids)),
sex = rep(3, length(fake_ids)))
pedigree_data <- rbind(pedigree_data, fake)
pedigree_data
fake_ids
# Change errors
pedigree_data$sex[pedigree_data$id %in% c(139:270)] <- 1
pedigree_data$sex[pedigree_data$id %in% c(118:138)] <- 2
pedigree_data
# Create GR matrix
ped <- pedigree(id = pedigree_data$id,
dadid = pedigree_data$dad,
momid = pedigree_data$mom,
sex = pedigree_data$sex)
plot(ped)
# Calculate kinship matrix
kinship_matrix <- kinship(ped)
View(kinship_matrix)
kinship_matrix <- kinship_matrix[1:117, 1:117]
saveRDS(kinship_matrix, "kinship_matrix.RData")
