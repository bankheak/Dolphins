df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
# HI behaviors should be partitioned into 3 different types---------------------
#' B = Positive: F, G, H
#' P = Neutral: A, B, C
#' D = Negative: D, E, P
# Change the code using ifelse statements
for (i in seq_along(aux)) {
aux[[i]]$DiffHI <- ifelse(aux[[i]]$ConfHI %in% c("F", "G", "H"), "Pro",
ifelse(aux[[i]]$ConfHI %in% c("A", "B", "C"), "Neu",
ifelse(aux[[i]]$ConfHI %in% c("P", "D", "E"), "Neg", "0")))
}
# Categorize DiffHI to IDs
aux[[1]] <- df
df
# Extract specific columns from each data frame in list_years
aux <- lapply(list_years, function(df) {
data.frame(
Code = df$Code,
Behaviors = df$Behaviors,
HumanInteraction = df$HumanInteraction,
ConfHI = df$ConfHI
)
})
# Add the 'Foraging' variable to each data frame in the 'aux' list
aux <- lapply(aux, function(df) {
df$Foraging <- "Other"
df$Foraging[grepl(pattern = 'Feed', x = df$Behaviors, ignore.case = FALSE)] <- "Feed"
df
})
# Categorize ID to Foraging
IDbehav <- lapply(aux, function(df) {
df <- table(df$Code, df$Foraging)
df <- as.data.frame(df, stringsAsFactors = FALSE)
df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
# HI behaviors should be partitioned into 3 different types---------------------
#' B = Positive: F, G, H
#' P = Neutral: A, B, C
#' D = Negative: D, E, P
# Change the code using ifelse statements
for (i in seq_along(aux)) {
aux[[i]]$DiffHI <- ifelse(aux[[i]]$ConfHI %in% c("F", "G", "H"), "Pro",
ifelse(aux[[i]]$ConfHI %in% c("A", "B", "C"), "Neu",
ifelse(aux[[i]]$ConfHI %in% c("P", "D", "E"), "Neg", "0")))
}
View(aux)
df <- as.matrix(table(aux[[1]]$Code, aux[[1]]$DiffHI))
df
df <- as.data.frame(df, stringsAsFactors = FALSE)
View(df)
aggregated_df <- aggregate(ConfHI ~ Code, data = aux[[1]], sum)
# Categorize DiffHI to IDs
rawHI_diff <- lapply(aux, function(df) {
table_df <- as.data.frame(table(df$Code, df$DiffHI))
colnames(table_df) <- c("Code", "DiffHI", "Freq")
return(table_df)
})
View(rawHI_diff)
rawHI_diff[[1]]
# Clump all the HI behaviors together------------------------------------------
for (i in seq_along(aux)) {
aux[[i]]$ConfHI <- ifelse(aux[[i]]$ConfHI != "0", 1, 0)}
# Categorize ConfHI to IDs
rawHI <- lapply(aux, function(df) {
# Sum up the frequencies of HI by code
aggregated_df <- aggregate(ConfHI ~ Code, data = df, sum)
unique_codes_df <- data.frame(Code = unique(df$Code))
# Merge the unique codes data frame with the aggregated data frame
merged_df <- merge(unique_codes_df, aggregated_df, by = "Code", all.x = TRUE)
# Fill missing Freq values (if any) with 0
merged_df$ConfHI[is.na(merged_df$ConfHI)] <- 0
return(merged_df)
})
View(rawHI)
View(rawHI_diff)
unique(rawHI_diff$DiffHI)
# Create a frequency count for each HI behavior
get_IDHI <- function(HI) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HI <- rawHI_diff[[i]]$Freq[rawHI_diff[[i]]$HI == HI & rawHI_diff[[i]]$HI != "0"]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
IDbehav_Pro <- get_IDHI("Pro")
View(IDbehav)
# Create a frequency count for each HI behavior
get_IDHI <- function(HI) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HDI <- rawHI_diff[[i]]$Freq[rawHI_diff[[i]]$HI == HI & rawHI_diff[[i]]$HI != "0"]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
IDbehav_Pro <- get_IDHI("Pro")
# Create a frequency count for each HI behavior
get_IDHI <- function(HI) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
HI_freq <- rawHI_diff[[i]]$Freq[rawHI_diff[[i]]$DiffHI == HI]
df$HI <- HI_freq[match(df$Code, rawHI_diff[[i]]$Code)]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
IDbehav_Pro <- get_IDHI("Pro")
View(IDbehav_Pro)
IDbehav_Neu <- get_IDHI("Neu")
IDbehav_Neg <- get_IDHI("Neg")
# Categorize ConfHI to IDs
rawHI <- lapply(aux, function(df) {
# Sum up the frequencies of HI by code
aggregated_df <- aggregate(ConfHI ~ Code, data = df, sum)
unique_codes_df <- data.frame(Code = unique(df$Code))
# Merge the unique codes data frame with the aggregated data frame
merged_df <- merge(unique_codes_df, aggregated_df, by = "Code", all.x = TRUE)
# Fill missing Freq values (if any) with 0
merged_df$ConfHI[is.na(merged_df$ConfHI)] <- 0
return(merged_df)
})
# Get HI Freq
IDbehav_HI <- lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HI <- rawHI[[i]]$ConfHI
colnames(df) <- c("Code", "Foraging", "HI")
df
})
# Proportion of time Foraging spent in HI
Prop_HI <- function(IDbehav) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HIprop <- as.numeric(df$HI) / as.numeric(df$Foraging)
df$HIprop[is.na(df$HIprop)] <- 0
# Keep only 'Code' and 'HIprop' columns
df <- df[, c('Code', 'HIprop')]
df
})
}
prob_HI <- Prop_HI(IDbehav_HI)
prob_Pro <- Prop_HI(IDbehav_Pro)
prob_Neu <- Prop_HI(IDbehav_Neu)
prob_Neg <- Prop_HI(IDbehav_Neg)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(IDbehav) {
dissimilarity_HI <- list()
for (i in seq_along(IDbehav)) {
fake_HIprop <- IDbehav[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
#dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
# Match Code with matrix and vector
get_HI_vector <- function(prop_HI) {
HI_vector <- lapply(seq_along(nxn), function(i) {
matrix_index <- match(rownames(nxn[[i]]), prop_HI[[i]]$Code)
reordered_prob_HI <- prop_HI[[i]][matrix_index, ]
return(reordered_prob_HI)
})
return(HI_vector)
}
# Get each combined and seperate HI
HI_vector <- get_HI_vector(prob_HI)
Pro_vector <- get_HI_vector(prob_Pro)
Neu_vector <- get_HI_vector(prob_Neu)
Neg_vector <- get_HI_vector(prob_Neg)
# Look at HI assortivity coefficient over periods
n.cores <- detectCores()
system.time({
registerDoParallel(n.cores)
assort_HI <- NULL
#se <- NULL
for (i in seq_along(nxn)) {
coeff <- assortment.continuous(nxn[[i]], HI_vector[[1]][,"HIprop"], SE = F)
assort_HI[i] <- coeff$r}
# se[i] <- coeff$se}
# End parallel processing
stopImplicitCluster()
})
assort_HI <- data.frame(HI_assort = unlist(assort_HI),
#Std.Err = unlist(se),
Year = c(1:7))
# Whisker plot of HI assortivity over each time period
ggplot(assort_HI, aes(x = Year, y = HI_assort)) +
#geom_errorbar(aes(ymin = HI_assort - se, ymax = HI_assort + se), width = 0.2) +
geom_point() +
geom_line() +
labs(x = "Year", y = "HI_assort") +
ggtitle("Whisker Plot of assort_HI with Standard Error") +
theme_minimal()
View(assort_HI)
assort_HI <- NULL
#se <- NULL
for (i in seq_along(nxn)) {
coeff <- assortment.continuous(nxn[[i]], HI_vector[[i]][,"HIprop"], SE = F)
assort_HI[i] <- coeff$r}
assort_HI <- data.frame(HI_assort = unlist(assort_HI),
#Std.Err = unlist(se),
Year = c(1:7))
View(assort_HI)
# Whisker plot of HI assortivity over each time period
ggplot(assort_HI, aes(x = Year, y = HI_assort)) +
#geom_errorbar(aes(ymin = HI_assort - se, ymax = HI_assort + se), width = 0.2) +
geom_point() +
geom_line() +
labs(x = "Year", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal()
View(HI_vector)
View(Neg_vector)
# Look at HI assortivity coefficient over periods
calculate_assortment <- function(HI_vector) {
n.cores <- detectCores()
registerDoParallel(n.cores)
assort_HI <- NULL
# se <- NULL
for (i in seq_along(nxn)) {
coeff <- assortment.continuous(nxn[[i]], HI_vector[[i]][, "HIprop"], SE = FALSE)
assort_HI[i] <- coeff$r
# se[i] <- coeff$se
}
# End parallel processing
stopImplicitCluster()
assort_HI_df <- data.frame(HI_assort = unlist(assort_HI), Year = c(1:7))
return(assort_HI_df)
}
# Look at HI combined and separate
assort_HI <- calculate_assortment(HI_vector)
assort_Pro <- calculate_assortment(Pro_vector)
assort_Neu <- calculate_assortment(Neu_vector)
assort_Neg <- calculate_assortment(Neg_vector)
# Combine the assort dataframes and add a behavior column
assort_Pro$Behavior <- "Pro"
assort_Neu$Behavior <- "Neu"
assort_Neg$Behavior <- "Neg"
combined_assort <- rbind(assort_Pro, assort_Neu, assort_Neg)
# Create the combined plot with facets
ggplot(combined_assort, aes(x = Year, y = HI_assort)) +
geom_point() +
geom_line() +
labs(x = "Year", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal() +
facet_grid(Behavior ~ ., scales = "free_y", space = "free_y")
View(assort_Neu)
View(coeff)
View(combined_assort)
View(combined_assort)
combined_assort <- ifelse(is.na(combined_assort$HI_assort), 0.7, combined_assort$HI_assort)
combined_assort <- rbind(assort_Pro, assort_Neu, assort_Neg)
combined_assort$HI_assort <- ifelse(is.na(combined_assort$HI_assort), 0.7, combined_assort$HI_assort)
View(combined_assort)
# Create the combined plot with facets
ggplot(combined_assort, aes(x = Year, y = HI_assort)) +
geom_point() +
geom_line() +
labs(x = "Year", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal() +
facet_grid(Behavior ~ ., scales = "free_y", space = "free_y")
combined_assort <- rbind(assort_Pro, assort_Neu, assort_Neg)
combined_assort$HI_assort <- ifelse(is.na(combined_assort$HI_assort), 0.75, combined_assort$HI_assort)
# Create the combined plot with facets
ggplot(combined_assort, aes(x = Year, y = HI_assort)) +
geom_point() +
geom_line() +
labs(x = "Year", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal() +
facet_grid(Behavior ~ ., scales = "free_y", space = "free_y")
# Create the combined plot with facets
ggplot(combined_assort, aes(x = Year, y = HI_assort)) +
geom_point() +
geom_line() +
labs(x = "Period", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal() +
facet_grid(Behavior ~ ., scales = "free_y", space = "free_y")
IDbehav_Beg <- get_IDHI("Pro")
IDbehav_Pat <- get_IDHI("Neu")
IDbehav_Dep <- get_IDHI("Neg")
saveRDS(IDbehav_Beg, file = "../data/IDbehav_Beg.RData")
saveRDS(IDbehav_Pat, file = "../data/IDbehav_Pat.RData")
saveRDS(IDbehav_Dep, file = "../data/IDbehav_Dep.RData")
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI != 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI != 0])))
Beg_effort <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Beg_effort) <- c(1:7)
Pat_effort <- as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI > 0]))))
Dep_effort <- as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Pat_effort) <- c(1:7)
colnames(Dep_effort) <- c(1:7)
Beg_effort
Pat_effort
Dep_effort
# Extract specific columns from each data frame in list_years
aux <- lapply(list_years, function(df) {
data.frame(
Code = df$Code,
Behaviors = df$Behaviors,
HumanInteraction = df$HumanInteraction,
ConfHI = df$ConfHI
)
})
# Add the 'Foraging' variable to each data frame in the 'aux' list
aux <- lapply(aux, function(df) {
df$Foraging <- "Other"
df$Foraging[grepl(pattern = 'Feed', x = df$Behaviors, ignore.case = FALSE)] <- "Feed"
df
})
# Categorize ID to Foraging
IDbehav <- lapply(aux, function(df) {
df <- table(df$Code, df$Foraging)
df <- as.data.frame(df, stringsAsFactors = FALSE)
df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
# HI behaviors should be partitioned into 3 different types---------------------
#' B = Beg: F, G, H
#' P = Patrol: A, B, C
#' D = Depredation: D, E, P
# Change the code using ifelse statements
for (i in seq_along(aux)) {
aux[[i]]$DiffHI <- ifelse(aux[[i]]$ConfHI %in% c("F", "G", "H"), "Beg",
ifelse(aux[[i]]$ConfHI %in% c("A", "B", "C"), "Pat",
ifelse(aux[[i]]$ConfHI %in% c("P", "D", "E"), "Dep", "0")))
}
# Read in social association matrix and data
nxn <- readRDS("nxn.RData")
list_years <- readRDS("list_years.RData")
# Extract specific columns from each data frame in list_years
aux <- lapply(list_years, function(df) {
data.frame(
Code = df$Code,
Behaviors = df$Behaviors,
HumanInteraction = df$HumanInteraction,
ConfHI = df$ConfHI
)
})
# Add the 'Foraging' variable to each data frame in the 'aux' list
aux <- lapply(aux, function(df) {
df$Foraging <- "Other"
df$Foraging[grepl(pattern = 'Feed', x = df$Behaviors, ignore.case = FALSE)] <- "Feed"
df
})
# Categorize ID to Foraging
IDbehav <- lapply(aux, function(df) {
df <- table(df$Code, df$Foraging)
df <- as.data.frame(df, stringsAsFactors = FALSE)
df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
# HI behaviors should be partitioned into 3 different types---------------------
#' B = Beg: F, G, H
#' P = Patrol: A, B, C
#' D = Depredation: D, E, P
# Change the code using ifelse statements
for (i in seq_along(aux)) {
aux[[i]]$DiffHI <- ifelse(aux[[i]]$ConfHI %in% c("F", "G", "H"), "Beg",
ifelse(aux[[i]]$ConfHI %in% c("A", "B", "C"), "Pat",
ifelse(aux[[i]]$ConfHI %in% c("P", "D", "E"), "Dep", "0")))
}
# Categorize DiffHI to IDs
rawHI_diff <- lapply(aux, function(df) {
table_df <- as.data.frame(table(df$Code, df$DiffHI))
colnames(table_df) <- c("Code", "DiffHI", "Freq")
return(table_df)
})
# Create a frequency count for each HI behavior
get_IDHI <- function(HI) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
HI_freq <- rawHI_diff[[i]]$Freq[rawHI_diff[[i]]$DiffHI == HI]
df$HI <- HI_freq[match(df$Code, rawHI_diff[[i]]$Code)]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
IDbehav_Beg <- get_IDHI("Beg")
IDbehav_Pat <- get_IDHI("Pat")
IDbehav_Dep <- get_IDHI("Dep")
prob_Beg <- Prop_HI(IDbehav_Beg)
# Proportion of time Foraging spent in HI
Prop_HI <- function(IDbehav) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HIprop <- as.numeric(df$HI) / as.numeric(df$Foraging)
df$HIprop[is.na(df$HIprop)] <- 0
# Keep only 'Code' and 'HIprop' columns
df <- df[, c('Code', 'HIprop')]
df
})
}
prob_Beg <- Prop_HI(IDbehav_Beg)
prob_Pat <- Prop_HI(IDbehav_Pat)
prob_Dep <- Prop_HI(IDbehav_Dep)
# Match Code with matrix and vector
get_HI_vector <- function(prop_HI) {
HI_vector <- lapply(seq_along(nxn), function(i) {
matrix_index <- match(rownames(nxn[[i]]), prop_HI[[i]]$Code)
reordered_prob_HI <- prop_HI[[i]][matrix_index, ]
return(reordered_prob_HI)
})
return(HI_vector)
}
Beg_vector <- get_HI_vector(prob_Beg)
Pat_vector <- get_HI_vector(prob_Pat)
Dep_vector <- get_HI_vector(prob_Dep)
# Look at HI assortivity coefficient over periods
calculate_assortment <- function(HI_vector) {
n.cores <- detectCores()
registerDoParallel(n.cores)
assort_HI <- NULL
# se <- NULL
for (i in seq_along(nxn)) {
coeff <- assortment.continuous(nxn[[i]], HI_vector[[i]][, "HIprop"], SE = FALSE)
assort_HI[i] <- coeff$r
# se[i] <- coeff$se
}
# End parallel processing
stopImplicitCluster()
assort_HI_df <- data.frame(HI_assort = unlist(assort_HI), Year = c(1:7))
return(assort_HI_df)
}
assort_Beg <- calculate_assortment(Beg_vector)
assort_Pat <- calculate_assortment(Pat_vector)
assort_Dep <- calculate_assortment(Dep_vector)
# Combine the assort dataframes and add a behavior column
assort_Beg$Behavior <- "Beg"
assort_Pat$Behavior <- "Pat"
assort_Dep$Behavior <- "Dep"
combined_assort <- rbind(assort_Beg, assort_Pat, assort_Dep)
View(combined_assort)
combined_assort$HI_assort <- ifelse(is.na(combined_assort$HI_assort), 0.75, combined_assort$HI_assort)
# Create the combined plot with facets
ggplot(combined_assort, aes(x = Year, y = HI_assort)) +
geom_point() +
geom_line() +
labs(x = "Period", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal() +
facet_grid(Behavior ~ ., scales = "free_y", space = "free_y")
Beg_effort
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI != 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI != 0])))
Beg_effort <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Beg_effort) <- c(1:7)
Pat_effort <- as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Pat_effort) <- c(1:7)
Dep_effort <- as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Dep_effort) <- c(1:7)
Beg_effort
Pat_effort
Dep_effort
Beg <- unique(unlist(sapply(IDbehav_Beg, function(df) df$Code[df$HI != 0])))
Pat <- unique(unlist(sapply(IDbehav_Pat, function(df) df$Code[df$HI != 0])))
Dep <- unique(unlist(sapply(IDbehav_Dep, function(df) df$Code[df$HI != 0])))
Beg_effort <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Beg_effort) <- c(1:7)
Pat_effort <- as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Pat_effort) <- c(1:7)
Dep_effort <- as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Dep_effort) <- c(1:7)
Beg_effort
Dep_effort
Pat_effort
combined_assort <- rbind(assort_Beg, assort_Pat, assort_Dep)
# Create the combined plot with facets
ggplot(combined_assort, aes(x = Year, y = HI_assort)) +
geom_point() +
geom_line() +
labs(x = "Period", y = "HI assortment") +
ggtitle("Whisker Plot of HI assortment") +
theme_minimal() +
facet_grid(Behavior ~ ., scales = "free_y", space = "free_y")
Beg_effort <- as.data.frame(lapply(IDbehav_Beg, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Beg_effort) <- c(1:7)
Pat_effort <- as.data.frame(lapply(IDbehav_Pat, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Pat_effort) <- c(1:7)
Dep_effort <- as.data.frame(lapply(IDbehav_Dep, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(Dep_effort) <- c(1:7)
Beg_effort
Dep_effort
Pat_effort
