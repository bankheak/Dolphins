# print result
result[,1:2] = c(mean(obs), sd(obs))
result[,3:4] = quantile(turno, probs=c(0.025,0.975), type=2)
# plot
if(plot==TRUE){
hist(turno, xlab="Random turnover", main=NULL, xlim=c(result[,3]-0.03, result[,4]+0.03))
abline(v=mean(obs), col="red")         # empirical
abline(v=mean(result[,4]), col="blue") # 2.5% CI
abline(v=mean(result[,3]), col="blue") # 97.5% CI
}
return(result)
}
## load all necessary packages
library(vegan)
library(sfsmisc, verbose=F)
# Read in file and add months
sample_data <- read.csv("sample_data.csv")
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in file and add months
sample_data <- read.csv("sample_data.csv")
sample_data <- subset(sample_data, subset=c(sample_data$Code != "None"))
sample_data$Date <- as.Date(as.character(sample_data$Date), format="%Y-%m-%d")
p48m = read.table("p48m.txt",  header= TRUE, row.names=1)
View(p48m)
# -------------------- 22 sets of 1 year increments----------------------------
# Make a list of only 1 year per dataframe
list_years <- split(sample_data, sample_data$Year)
# Create the matrix using sapply()
sightings_p1y <- sapply(list_years, function(df) table(df$Individual))
View(sample_data)
View(sightings_p1y)
# Convert the matrix to a data frame for better visualization
p1y <- as.data.frame(sightings_p1y)
p1y
# Select variables from the raw data
aux <- sample_data[1:nrow(list_years[[year]]),
c('Code', 'Behaviors', 'HumanInteraction', 'ConfHI')]
# Transforming SRI similarity into distance
year <- 5
# Select variables from the raw data
aux <- sample_data[1:nrow(list_years[[year]]),
c('Code', 'Behaviors', 'HumanInteraction', 'ConfHI')]
# Use 'Behaviors' variable to extract "Feed" and create another variable with two classes (Feed, Other)
aux$Foraging <- "Other"
aux$Foraging[grepl(pattern = 'Feed',
x = aux$Behaviors,
ignore.case = FALSE, perl = FALSE,
fixed = FALSE, useBytes = FALSE)] = "Feed"
aux <- subset(aux, aux$Foraging == "Feed")
aux$ConfHI <- ifelse(aux$ConfHI == "0", 0, 1)
# Categorize ID to Foraging
IDbehav <- table(aux$Code, aux$Foraging)
IDbehav
# Categorize ConfHI to IDs
rawHI <- as.matrix(table(aux$Code, aux$ConfHI))
rawHI
seq_along(list_years)
list_years[[i]]$Code
list_years[[1]]$Code
unique(list_years[[1]]$Code)
# Read in & combine files
firstgen_data <- read.csv("firstgen_data.csv")
secondgen_data <- read.csv("secondgen_data.csv")
orig_data <- rbind(firstgen_data, secondgen_data)
# Make date into a date class
orig_data$Date <- as.Date(as.character(orig_data$Date), format="%d-%b-%y")
orig_data$Year <- as.numeric(format(orig_data$Date, format = "%Y"))
# Make sure every ID has >10 obs
ID <- unique(orig_data$Code)
obs_vect <- NULL
for (i in 1:length(ID)) {
obs_vect[i]<- sum(orig_data$Code == ID[i])
}
sub <- data.frame(ID, obs_vect)
sub <- subset(sub, subset=c(sub$obs_vect > 10))
sample_data <- subset(orig_data, orig_data$Code %in% c(sub$ID))
obs_vect <- sapply(unique(list_years[[i]]$Code), function(id) sum(orig_data$Code == id))
sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id))
class(obs_vect)
ID_vect <- sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id))
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
one_inc[i] <-  sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id))
}
one_inc <-  sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id))
one_inc
as.vector(one_inc)
one_inc <-  as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
one_inc
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
one_inc[i] <-  as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
}
one_inc <-  as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
one_inc <- new_vect
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
one_inc[i,] <-  as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
}
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
one_inc[i,] <-  as.vector(sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id)))
}
# Create the matrix
one_inc <- data.frame()
for (i in seq_along(list_years)) {
one_inc[i,] <-  as.vector(sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id)))
}
one_inc
# Create the matrix
one_inc <- data.frame()
for (i in seq_along(list_years)) {
one_inc <- cbind(one_inc, sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id)))
}
# Transpose the data frame to have elements in list_years as rows and unique individuals as columns
one_inc <- as.data.frame(t(one_inc))
# Rename the rows with element names
rownames(one_inc) <- names(list_years)
one_inc
# Create the matrix
one_inc <- data.frame()
for (i in seq_along(list_years)) {
one_inc <- cbind(one_inc, sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id)))
}
as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
popn = c(0,N)
## initial population size
N = 10
## create place for population time series
popn = c(0,N)
## population growth rate
lambda = 0.85
# for loop with index year
for(year in 1:100){
N = N*lambda
# save population data
popn = rbind(popn,c(year,N))
# if population size is less than 1 break out of loop
if (N < 1) break
}
# print it out
popn
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
row <- as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
one_inc <-  rbind(one_inc, c(i, row))
}
one_inc
row
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
row <- as.vector(sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id)))
one_inc <-  rbind(one_inc, c(i, row))
}
one_inc
seq_along(list_years)
row <- as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
row
one_inc <-  rbind(one_inc, c(i, row))
one_inc
# Create the matrix
one_inc <- NULL
row <- as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
one_inc <-  cbind(one_inc, c(i, row))
one_inc
unique(list_years[[1]]$Code)
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
row <- as.vector(sapply(unique(list_years[[1]]$Code), function(id) sum(list_years[[1]]$Code == id)))
one_inc <-  cbind(one_inc, c(i, row))
}
one_inc
# Create the matrix
one_inc <- NULL
for (i in seq_along(list_years)) {
row <- as.vector(sapply(unique(list_years[[i]]$Code), function(id) sum(list_years[[i]]$Code == id)))
one_inc <-  cbind(one_inc, c(i, row))
}
one_inc
p48m
seq_along(unique(sample_data$Code))
unique(sample_data$Code)
# Create the matrix
count_instances <- function(df) {
table(df$Code)
}
# Apply the count_instances function to each element of list_years
instances_per_year <- lapply(list_years, count_instances)
instances_per_year
# Convert the list of counts to a data frame
instances_df <- do.call(rbind, instances_per_year)
length(unique(sample_data$Code))
# Get all unique Code values in the entire sample_data
all_codes <- unique(sample_data$Code)
# Create the matrix
count_instances <- function(df) {
code_counts <- table(df$Code)
code_counts <- code_counts[match(all_codes, names(code_counts))]
code_counts[is.na(code_counts)] <- 0
return(code_counts)
}
# Apply the count_instances function to each element of list_years
instances_per_year <- lapply(list_years, count_instances)
View(instances_per_year)
# Convert the list of counts to a data frame
instances_df <- do.call(rbind, instances_per_year)
instances_df
View(instances_df)
# -------------------- 22 sets of 1 year increments----------------------------
# Make a list of only 1 year per dataframe
list_years <- split(sample_data, sample_data$Year)
# Apply the count_instances function to each year
instances_per_year <- lapply(list_years, count_instances)
# Convert the list of counts to a data frame
instances_df <- do.call(rbind, instances_per_year)
# Convert the list of counts to a data frame
p1y <- do.call(rbind, instances_per_year)
# -------------------- 11 sets of 2 year increments----------------------------
# Make a list of 2 years per dataframe
sample_data$TwoYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 2, by = 2), labels = FALSE)
list_twoyears <- split(sample_data, sample_data$TwoYearIncrement)
# Apply the count_instances function to each two years
instances_per_twoyear <- lapply(list_twoyears, count_instances)
# Convert the list of counts to a data frame
p2y <- do.call(rbind, instances_per_twoyear)
# -------------------- 7 sets of 3 year increments----------------------------
# Make a list of 3 years per dataframe
sample_data$ThreeYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 3, by = 3), labels = FALSE)
list_threeyears <- split(sample_data, sample_data$ThreeYearIncrement)
# Apply the count_instances function to each two years
instances_per_threeyear <- lapply(list_threeyears, count_instances)
# Convert the list of counts to a data frame
p3y <- do.call(rbind, instances_per_threeyear)
# -------------------- 5 sets of 4 year increments----------------------------
# Make a list of 4 years per dataframe
sample_data$FourYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 4, by = 4), labels = FALSE)
list_fouryears <- split(sample_data, sample_data$FourYearIncrement)
# Apply the count_instances function to each two years
instances_per_fouryear <- lapply(list_fouryears, count_instances)
# Convert the list of counts to a data frame
p4y <- do.call(rbind, instances_per_fouryear)
# -------------------- 4 sets of 5 year increments----------------------------
# Make a list of 5 years per dataframe
sample_data$FiveYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 5, by = 5), labels = FALSE)
list_fiveyears <- split(sample_data, sample_data$FiveYearIncrement)
# Apply the count_instances function to each two years
instances_per_fiveyear <- lapply(list_fiveyears, count_instances)
# Convert the list of counts to a data frame
p5y <- do.call(rbind, instances_per_fiveyear)
p1y <- as.matrix(p1y); p1y[which(p1y>=1)] = 1; p1y[which(p1y<1)] = 0
p1y
View(p1y)
p2y <- as.matrix(p2y); p2y[which(p2y>=1)] = 1; p2y[which(p2y<1)] = 0
p3y <- as.matrix(p3y); p3y[which(p3y>=1)] = 1; p3y[which(p3y<1)] = 0
p4y <- as.matrix(p4y); p4y[which(p4y>=1)] = 1; p4y[which(p4y<1)] = 0
p5y <- as.matrix(p5y); p5y[which(p5y>=1)] = 1; p5y[which(p5y<1)] = 0
# Turn over results
t1 = turnover_w(data = p1y, iter = 1000, subseq=F, plot=FALSE)
t2 = turnover_w(data = p2y, iter = 1000, subseq=F, plot=FALSE)
t3 = turnover_w(data = p3y, iter = 1000, subseq=F, plot=FALSE)
t4 = turnover_w(data = p4y, iter = 1000, subseq=F, plot=FALSE)
t5 = turnover_w(data = p5y, iter = 1000, subseq=F, plot=FALSE)
all = rbind(t1, t2, t3, t4, t5)
all = cbind(c(1, 2, 3, 4, 5), all)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)", pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.7), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4, 5),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (months)", line = 2, font = 1)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)", pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.7), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4, 5),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4, 5),las=1, labels=c(22,11,7,5,4), cex.axis=0.7)
mtext(side = 3, "Number of periods", line = 2, font = 1)
# Print final results
all
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5), y=all[,2], all[,4], all[,5], ylim = c(0.35, 0.45), ylab="Turnover (Averaged Whittaker Dissimilarity)", pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.7), cex.axis=0.8)
?cex.axis
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)", pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.7), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4, 5),las=1, cex.axis=0.45)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.45), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4, 5), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.36,0.43), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4, 5),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4, 5),las=1, labels=c(22,11,7,5,4), cex.axis=0.7)
mtext(side = 3, "Number of periods", line = 2, font = 1)
# Define the list of datasets and increment values
data_list <- list(list_years, list_twoyears, list_threeyears, list_fouryears, list_fiveyears)
gc()
library(vegan)
# Run multiple cores for faster computing
require(doParallel)
require(parallel)
library(sfsmisc, verbose=F)
# Set working directory here
setwd("C:/Users/bankh/My_Repos/Dolphins/data")
# Read in file and add months
sample_data <- read.csv("sample_data.csv")
# Make data easily divisible
sample_data <- subset(sample_data, subset=c(sample_data$Year < 2012))
# Get all unique Code values in the entire sample_data
all_codes <- unique(sample_data$Code)
# Create a function that counts the IDs in each element
count_instances <- function(df) {
code_counts <- table(df$Code)
code_counts <- code_counts[match(all_codes, names(code_counts))]
code_counts[is.na(code_counts)] <- 0
return(code_counts)
}
unique(sample_data$Year)
# Read in file and add months
sample_data <- read.csv("sample_data.csv")
sample_data <- subset(sample_data, subset=c(sample_data$Code != "None"))
# Make data easily divisible
sample_data <- subset(sample_data, subset=c(sample_data$Year < 2013))
# Get all unique Code values in the entire sample_data
all_codes <- unique(sample_data$Code)
# Create a function that counts the IDs in each element
count_instances <- function(df) {
code_counts <- table(df$Code)
code_counts <- code_counts[match(all_codes, names(code_counts))]
code_counts[is.na(code_counts)] <- 0
return(code_counts)
}
unique(sample_data$Year)
# -------------------- 22 sets of 1 year increments----------------------------
# Make a list of only 1 year per dataframe
list_years <- split(sample_data, sample_data$Year)
# Apply the count_instances function to each year
instances_per_year <- lapply(list_years, count_instances)
# Convert the list of counts to a data frame
p1y <- do.call(rbind, instances_per_year)
# Transforming into binary matrices
p1y <- as.matrix(p1y); p1y[which(p1y>=1)] = 1; p1y[which(p1y<1)] = 0
# -------------------- 11 sets of 2 year increments----------------------------
# Make a list of 2 years per dataframe
sample_data$TwoYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 2, by = 2), labels = FALSE)
list_twoyears <- split(sample_data, sample_data$TwoYearIncrement)
# -------------------- 7 sets of 3 year increments----------------------------
# Make a list of 3 years per dataframe
sample_data$ThreeYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 3, by = 3), labels = FALSE)
list_threeyears <- split(sample_data, sample_data$ThreeYearIncrement)
# Apply the count_instances function to each two years
instances_per_threeyear <- lapply(list_threeyears, count_instances)
# Convert the list of counts to a data frame
p3y <- do.call(rbind, instances_per_threeyear)
# Transforming into binary matrices
p3y <- as.matrix(p3y); p3y[which(p3y>=1)] = 1; p3y[which(p3y<1)] = 0
# -------------------- 11 sets of 2 year increments----------------------------
# Make a list of 2 years per dataframe
sample_data$TenYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 10, by = 10), labels = FALSE)
list_tenyears <- split(sample_data, sample_data$TenYearIncrement)
# Apply the count_instances function to each two years
instances_per_tenyear <- lapply(list_tenyears, count_instances)
# Convert the list of counts to a data frame
p10y <- do.call(rbind, instances_per_tenyear)
# Transforming into binary matrices
p10y <- as.matrix(p10y); p10y[which(p10y>=1)] = 1; p10y[which(p10y<1)] = 0
# -------------------- 4 sets of 5 year increments----------------------------
# Make a list of 5 years per dataframe
sample_data$FiveYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 5, by = 5), labels = FALSE)
list_fiveyears <- split(sample_data, sample_data$FiveYearIncrement)
# Apply the count_instances function to each two years
instances_per_fiveyear <- lapply(list_fiveyears, count_instances)
# Convert the list of counts to a data frame
p5y <- do.call(rbind, instances_per_fiveyear)
# Transforming into binary matrices
p5y <- as.matrix(p5y); p5y[which(p5y>=1)] = 1; p5y[which(p5y<1)] = 0
turnover_w <- function(data, iter=1000, subseq=FALSE, plot=FALSE){
# create internal objects
rand = data
turno = numeric()
result = matrix(NA, 1, 4);  colnames(result) = c("Empirical", "SD", "2.5%CI", "97.5%CI");  rownames(result) = c("Turnover")
# calculate the turnover for the empirical data
obs = betadiver(data, method="w", order=F, help=F)
if(subseq==TRUE){
obs = as.matrix(obs)
aux = numeric()
for(i in 2:nrow(obs)){ aux[i-1] = obs[i, i-1] }
obs = aux
}
# randomize original data, calculate and save mean turnover for each iteration
for(i in 1:iter){
rand = apply(data, 2, sample)
if(subseq==TRUE){
aux2 = as.matrix(betadiver(rand, method="w", order=F, help=F))
aux3 = numeric()
for(j in 2:nrow(aux2)){ aux3[j-1] = aux2[j, j-1] }
turno[i] = mean(aux3)
} else {
turno[i] = mean(betadiver(rand, method="w", order=F, help=F))
}
}
# print result
result[,1:2] = c(mean(obs), sd(obs))
result[,3:4] = quantile(turno, probs=c(0.025,0.975), type=2)
# plot
if(plot==TRUE){
hist(turno, xlab="Random turnover", main=NULL, xlim=c(result[,3]-0.03, result[,4]+0.03))
abline(v=mean(obs), col="red")         # empirical
abline(v=mean(result[,4]), col="blue") # 2.5% CI
abline(v=mean(result[,3]), col="blue") # 97.5% CI
}
return(result)
}
# Turn over results
t1 = turnover_w(data = p1y, iter = 1000, subseq=F, plot=FALSE)
t2 = turnover_w(data = p3y, iter = 1000, subseq=F, plot=FALSE)
t3 = turnover_w(data = p5y, iter = 1000, subseq=F, plot=FALSE)
t4 = turnover_w(data = p10y, iter = 1000, subseq=F, plot=FALSE)
all = rbind(t1, t2, t3, t4)
all = cbind(c(1, 2, 3, 4), all)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.36,0.7), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.7), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4),las=1, cex.axis=0.7)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.44), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.35,0.42), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.30,0.42), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4),las=1, labels=c(20,10,6,4), cex.axis=0.7)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), cex.axis=0.8)
axis(1, at=c(1, 3, 5, 10),las=1, cex.axis=0.7)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4),las=1, cex.axis=0.7)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), cex.axis=0.8)
axis(1, at=c(1 = 1, 2 = 3, 3 = 5, 4 = 10),las=1, cex.axis=0.7)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), xlim=c(0,10), cex.axis=0.8)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 3, 5, 10), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), xlim=c(0,10), cex.axis=0.8)
axis(1, at=c(1, 3, 5, 10),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4),las=1, labels=c(20,10,6,4), cex.axis=0.7)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 3, 5, 10), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.34,0.42), xlim=c(0,10), cex.axis=0.8)
axis(1, at=c(1, 3, 5, 10),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 3, 5, 10),las=1, labels=c(20,10,6,4), cex.axis=0.7)
mtext(side = 3, "Number of periods", line = 2, font = 1)
# Print final results
all
p10y
View(p10y)
View(list_tenyears)
# Apply the count_instances function to each two years
instances_per_tenyear <- lapply(list_tenyears, count_instances)
instances_per_tenyear
t10 = turnover_w(data = p10y, iter = 1000, subseq=F, plot=FALSE)
all = rbind(t1, t3, t5, t10)
t3 = turnover_w(data = p3y, iter = 1000, subseq=F, plot=FALSE)
t5 = turnover_w(data = p5y, iter = 1000, subseq=F, plot=FALSE)
t10 = turnover_w(data = p10y, iter = 1000, subseq=F, plot=FALSE)
all = rbind(t1, t3, t5, t10)
all = cbind(c(1, 2, 3, 4), all)
# Print final results
all
