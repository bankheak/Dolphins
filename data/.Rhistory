N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0:600))
?plot
# H = 20
H = 20
numyears <- 50
N <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N40_t, c(changeN20, changeN30, changeN40))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylim = range(c(changeN20, changeN30, changeN40)), ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
# Plot the first population
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Time', main = 'Population Changes Over Time')
N=1:500
dndt=r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
?abline
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2, lwd = 1.5)
abline(h = 40, lty = 2)
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.3
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.4
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size")
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 1)))
(max(N_small) + 50)
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
N_small
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 50)))
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_med) + 1)))
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_large) + 1)))
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size")
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size")
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size")
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(0, 0.2)
abline(0, 0.3, lty=2)
abline(0, 0.4, lty=3)
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N_20, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
N_30[1] <- N0
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N_30, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
N_40[1] <- N0
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N_40, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
gc()
setwd("C:/Users/bankh/My_Repos/Dolphins/code")
# Set working directory here
setwd("../data")
library(lme4) # lmm
library(lmerTest) # summary output of lmm
# Read in data
result_df <- readRDS("result_df.RData")
# Check assumptions of model
test_model <- lm(composite_centrality ~ HI * Period, data = result_df)
summary(test_model)
## Check distributions
hist(result_df$composite_centrality)
## Check for variance among groups
bartlett.test(composite_centrality ~ HI, data = result_df) # not equal
# Make ID numeric
result_df$numeric_ID <- as.numeric(factor(result_df$ID))
# Fit the LMM
lmm_model_0 <- lmer(composite_centrality ~ 1 + (1 | numeric_ID), weights = varIdent(form = ~  1 | HI), data = result_df)
install.packages("nlme")
install.packages("nlme")
library(nlme) # unequal variance weights
# Fit the LMM
lmm_model_0 <- lmer(composite_centrality ~ 1 + (1 | numeric_ID), weights = varIdent(form = ~  1 | HI), data = result_df)
library(lme4) # lmm
library(lmerTest) # summary output of lmm
library(lmerTest) # summary output of lmm
# Fit the LMM
lmm_model_0 <- lmer(composite_centrality ~ 1 + (1 | numeric_ID), weights = varIdent(form = ~  1 | HI), data = result_df)
# Fit the LMM
lmm_model_0 <- lme(composite_centrality ~ 1 + (1 | numeric_ID), weights = varIdent(form = ~  1 | HI), data = result_df)
# Fit the LMM
lmm_model_0 <- lme(composite_centrality ~  1, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
# Print the summary of the model
summary(lmm_model_0)
lmm_model_0 <- lme(composite_centrality ~  BG + FG + SD + During + After, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
lmm_model_2 <- lmer(composite_centrality ~ BG * During + BG * After +
FG * During + FG * After +
SD * During + SD * After, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
# Fit the LMM
lmm_model_0 <- lme(composite_centrality ~  1, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
lmm_model_1 <- lme(composite_centrality ~  BG + FG + SD + During + After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
lmm_model_2 <- lme(composite_centrality ~  BG * During + BG * After +
FG * During + FG * After + SD * During + SD *After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
# Model Selection
AIC(lmm_model_0, lmm_model_1, lmm_model_2)
# Print the summary of the model
summary(lmm_model_1)
# Read in data
result_df <- readRDS("result_df.RData")
# Only include HI individuals
result_df <- subset(result_df, subset = result_df$HI != "NF")
# Read in data
result_df <- readRDS("result_df.RData")
# Only include HI individuals
result_df <- subset(result_df, subset = result_df$HI != "NF")
# Check assumptions of model
test_model <- lm(composite_centrality ~ HI * Period, data = result_df)
summary(test_model)
## Check distributions
hist(result_df$composite_centrality) # normal
## Check for variance among groups
bartlett.test(composite_centrality ~ HI, data = result_df) # not equal
## Independent
durbinWatsonTest(test_model) # not independent
library(DescTools) #Schaff post-hoc test
library(lme4) # lmm
library(nlme) # unequal variance weights
library(lmerTest) # summary output of lmm
## Independent
durbinWatsonTest(test_model) # not independent
library(cars) # durbinWatsonTest
library(car) # durbinWatsonTest
## Independent
durbinWatsonTest(test_model) # not independent
# Fit the LMM
lmm_model_0 <- lm(composite_centrality ~  1, data = result_df)
lmm_model_1 <- lm(composite_centrality ~  FG + SD + During + After,
data = result_df)
lmm_model_2 <- lm(composite_centrality ~  BG * During + BG * After +
FG * During + FG * After + SD * During + SD *After,
data = result_df)
# Model Selection
AIC(lmm_model_0, lmm_model_1, lmm_model_2)
# Print the summary of the model
summary(lmm_model_2)
# Read in data
result_df <- readRDS("result_df.RData")
# Only include HI individuals
result_df <- subset(result_df, subset = result_df$HI != "NF")
View(result_df)
# Read in data
result_df <- readRDS("result_df.RData")
# Read in data
result_df <- readRDS("result_df.RData")
# Make dummy variables
result_df$BG <- ifelse(result_df$HI == "BG", 1, 0)
result_df$FG <- ifelse(result_df$HI == "FG", 1, 0)
result_df$SD <- ifelse(result_df$HI == "SD", 1, 0)
# Check assumptions of model
test_model <- lm(composite_centrality ~ BG * During + BG * After +
FG * During + FG * After +
SD * During + SD * After, data = result_df)
summary(test_model)
# Make factor variables
result_df$HI <- as.factor(result_df$HI)
result_df$HI
result_df$Period <- as.factor(result_df$Period)
result_df$Period
test_model <- lm(composite_centrality ~ HI * Period, data = result_df)
summary(test_model)
# Check assumptions of model
test_model <- lm(composite_centrality ~ BG * During + BG * After +
FG * During + FG * After +
SD * During + SD * After, data = result_df)
summary(test_model)
## Check distributions
hist(result_df$composite_centrality) # normal
## Check for variance among groups
bartlett.test(composite_centrality ~ HI, data = result_df) # equal
## Independent
durbinWatsonTest(test_model) # not independent
# Make ID numeric
result_df$numeric_ID <- as.numeric(factor(result_df$ID))
# Fit the LMM
lmm_model_0 <- lme(composite_centrality ~  1, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
lmm_model_1 <- lme(composite_centrality ~  BG + FG + SD + During + After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
lmm_model_2 <- lme(composite_centrality ~  BG * During + BG * After +
FG * During + FG * After + SD * During + SD *After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
# Model Selection
AIC(lmm_model_0, lmm_model_1, lmm_model_2)
# Print the summary of the model
summary(lmm_model_1)
library(emmeans) # post-hoc test
# Run post-hoc test
emmeans(lmm_model_1, pairwise ~ BG + FG + SD + During + After, adjust = "tukey")
vignette("QuickStart", "emmeans")
# Run post-hoc test
emmeans(lmm_model_1,  ~ BG + FG + SD + During + After, adjust = "tukey")
# Run post-hoc test
emmeans(lmm_model_1,  ~ BG + FG + SD, adjust = "tukey")
# Run post-hoc test
emmeans(lmm_model_1,  ~ BG + FG, adjust = "tukey")
# Run post-hoc test
emmeans(lmm_model_1, "BG")
# Run post-hoc test
emmeans(lmm_model_1, "FG")
emmeans()
?emmeans()
# Run post-hoc test
emmeans(lmm_model_1, "FG", adjust = "hochberg")
emmeans(lmm_model_1,  ~ BG + SD, adjust = "hochberg")
emmeans(lmm_model_1,  ~ BG + FG + SD + During + After, adjust = "hochberg")
# Run post-hoc test
emm_pairs <- emmeans(lmm_model_1, pairwise ~ BG + FG + SD + During + After, adjust = "hochberg")
summary(emm_pairs, infer = TRUE)
# Run post-hoc test
emm_pairs <- emmeans(lmm_model_1, pairwise ~ BG + FG + SD + During + After, adjust = "hochberg")
emmeans(lmm_model_1, pairwise ~ BG + FG + SD + During + After, adjust = "hochberg")
# Run post-hoc test
emm_pairs <- emmeans(lmm_model_1, pairwise ~ BG + FG + SD + During + After, adjust = "hochberg")
summary(emm_pairs, infer = TRUE)
# Fit the LMM
lmm_model_0 <- lme(composite_centrality ~  1, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
lmm_model_1 <- lme(composite_centrality ~  BG + FG + SD,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
lmm_model_2 <- lme(composite_centrality ~  BG + FG + SD + During + After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
lmm_model_3 <- lme(composite_centrality ~  BG * During + BG * After +
FG * During + FG * After + SD * During + SD *After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
# Model Selection
AIC(lmm_model_0, lmm_model_1, lmm_model_2, lmm_model_3)
# Visualize effects
install.packages("effects")
library(effects)
# Visualize effects
effects_lmm_model_1 <- allEffects(lmm_model_1)
plot(effects_lmm_model_1)
install.packages("sjPlot")
library(sjPlot) # Confidence intervals
plot_model(lmm_model_1)
# Fit the LMM
lmm_model_0 <- lme(composite_centrality ~  1, random = ~1 | numeric_ID,
weights = varIdent(form = ~1 | HI), data = result_df)
lmm_model_1 <- lme(composite_centrality ~  BG + FG + SD,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
lmm_model_2 <- lme(composite_centrality ~  BG + FG + SD + During + After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
lmm_model_3 <- lme(composite_centrality ~  BG * During + BG * After +
FG * During + FG * After + SD * During + SD *After,
random = ~1 | numeric_ID, weights = varIdent(form = ~1 | HI),
data = result_df)
# Model Selection
AIC(lmm_model_0, lmm_model_1, lmm_model_2, lmm_model_3)
# Print the summary of the model
summary(lmm_model_2)
plot_model(lmm_model_2)
# Visualize effects
effects_lmm_model <- allEffects(lmm_model_2)
plot(effects_lmm_model)
# First Visualize data
ggplot(result_df, aes(x = Period, y = composite_centrality, fill = HI)) +
geom_boxplot()
library(ggplot2) # Visualization
# First Visualize data
ggplot(result_df, aes(x = Period, y = composite_centrality, fill = HI)) +
geom_boxplot()
