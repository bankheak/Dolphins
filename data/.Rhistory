BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Make a different text color for each category
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% BG[[i]]] <- "red"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% SD[[i]]] <- "yellow"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% FG[[i]]] <- "blue"
}
sum(V(dolp_ig[[2]])$label_color == "red")
sum(V(dolp_ig[[2]])$name %in% BG[[2]])
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Make a different text color for each category
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% BG[[i]]] <- "red"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% SD[[i]]] <- "yellow"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% FG[[i]]] <- "blue"
}
sum(V(dolp_ig[[2]])$label_color == "red")
V(dolp_ig[[2]])$name[V(dolp_ig[[2]])$label_color == "red"]
V(dolp_ig[[2]])$name %in% BG[[2]]
sum(V(dolp_ig[[2]])$label_color == "red")
for (i in seq_along(dolp_ig)) {
# ... (previous code)
# Print node names for each behavior
print(paste("BG nodes for", i, ":", BG[[i]]))
print(paste("SD nodes for", i, ":", SD[[i]]))
print(paste("FG nodes for", i, ":", FG[[i]]))
}
for (i in seq_along(dolp_ig)) {
# ... (previous code)
# Print nodes with label color
print(paste("Nodes with red label for", i, ":", V(dolp_ig[[i]])$name[V(dolp_ig[[i]])$label_color == "red"]))
print(paste("Nodes with yellow label for", i, ":", V(dolp_ig[[i]])$name[V(dolp_ig[[i]])$label_color == "yellow"]))
print(paste("Nodes with blue label for", i, ":", V(dolp_ig[[i]])$name[V(dolp_ig[[i]])$label_color == "blue"]))
}
for (i in seq_along(dolp_ig)) {
# ... (previous code)
# Print HI_data for each i
print(paste("HI_data for", i, ":"))
print(HI_data[[i]])
}
View(BG)
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
# Set the node names
V(dolp_ig[[2]])$name <- rownames(nxn[[2]])
# Parse out what HI behavior they engage in
BG <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "BG" & HI_data[[2]]$Freq > 0])
SD <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "SD" & HI_data[[2]]$Freq > 0])
FG <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "FG" & HI_data[[2]]$Freq > 0])
intersect(BG, SD)
intersect(BG, FG)
intersect(SD, FG)
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
BGSD[[i]] <- intersect(BG[[i]], SD[[i]])
BGFG[[i]] <- intersect(BG[[i]], FG[[i]])
SDFG[[i]] <- intersect(SD[[i]], FG[[i]])
BGSDFG[[i]] <- intersect(BGSD[[i]], FG[[i]])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Make a different text color for each category
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% BG[[i]]] <- "red"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% SD[[i]]] <- "yellow"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% FG[[i]]] <- "blue"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% BGSD[[i]]] <- "orange"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% BGFG[[i]]] <- "purple"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% SDFG[[i]]] <- "green"
V(dolp_ig[[i]])$label_color[V(dolp_ig[[i]])$name %in% BGSDFG[[i]]] <- "brown"
}
sum(V(dolp_ig[[2]])$label_color == "red")
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
BGSD[[i]] <- intersect(BG[[i]], SD[[i]])
BGFG[[i]] <- intersect(BG[[i]], FG[[i]])
SDFG[[i]] <- intersect(SD[[i]], FG[[i]])
BGSDFG[[i]] <- intersect(BGSD[[i]], FG[[i]])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Make a different text color for each category
V(dolp_ig[[i]])$label_color <- case_when(
V(dolp_ig[[i]])$name %in% BG[[i]] ~ "red",
V(dolp_ig[[i]])$name %in% SD[[i]] ~ "yellow",
V(dolp_ig[[i]])$name %in% FG[[i]] ~ "blue",
V(dolp_ig[[i]])$name %in% BGSD[[i]] ~ "orange",
V(dolp_ig[[i]])$name %in% BGFG[[i]] ~ "purple",
V(dolp_ig[[i]])$name %in% SDFG[[i]] ~ "green",
V(dolp_ig[[i]])$name %in% BGSDFG[[i]] ~ "brown",
TRUE ~ "black"  # Default color
)
}
library(dplyr)
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
BGSD[[i]] <- intersect(BG[[i]], SD[[i]])
BGFG[[i]] <- intersect(BG[[i]], FG[[i]])
SDFG[[i]] <- intersect(SD[[i]], FG[[i]])
BGSDFG[[i]] <- intersect(BGSD[[i]], FG[[i]])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Make a different text color for each category, with appropriate overlapping priorities
V(dolp_ig[[i]])$label_color <- case_when(
V(dolp_ig[[i]])$name %in% BGSDFG[[i]] ~ "brown",
V(dolp_ig[[i]])$name %in% BGFG[[i]] ~ "purple",
V(dolp_ig[[i]])$name %in% SDFG[[i]] ~ "green",
V(dolp_ig[[i]])$name %in% BGSD[[i]] ~ "orange",
V(dolp_ig[[i]])$name %in% FG[[i]] ~ "blue",
V(dolp_ig[[i]])$name %in% SD[[i]] ~ "yellow",
V(dolp_ig[[i]])$name %in% BG[[i]] ~ "red",
TRUE ~ "black"  # Default color
)
}
sum(V(dolp_ig[[2]])$label_color == "red")
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
BGSD[[i]] <- intersect(BG[[i]], SD[[i]])
BGFG[[i]] <- intersect(BG[[i]], FG[[i]])
SDFG[[i]] <- intersect(SD[[i]], FG[[i]])
BGSDFG[[i]] <- intersect(BGSD[[i]], FG[[i]])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Set label colors based on categories
node_names <- V(dolp_ig[[i]])$name
V(dolp_ig[[i]])$label_color <- ifelse(node_names %in% BGSDFG[[i]], "brown",
ifelse(node_names %in% BGFG[[i]], "purple",
ifelse(node_names %in% SDFG[[i]], "green",
ifelse(node_names %in% BGSD[[i]], "orange",
ifelse(node_names %in% FG[[i]], "blue",
ifelse(node_names %in% SD[[i]], "yellow",
ifelse(node_names %in% BG[[i]], "red", "black")))))))
}
sum(V(dolp_ig[[2]])$label_color == "red")
# Set label colors based on categories
node_names <- V(dolp_ig[[2]])$name
sum(node_names %in% BG[[2]])
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
BGSD[[i]] <- intersect(BG[[i]], SD[[i]])
BGFG[[i]] <- intersect(BG[[i]], FG[[i]])
SDFG[[i]] <- intersect(SD[[i]], FG[[i]])
BGSDFG[[i]] <- intersect(BGSD[[i]], FG[[i]])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Set label colors based on categories
node_names <- V(dolp_ig[[2]])$name
V(dolp_ig[[i]])$label_color <- ifelse(node_names %in% BGSDFG[[i]], "brown",
ifelse(node_names %in% BGFG[[i]], "purple",
ifelse(node_names %in% SDFG[[i]], "green",
ifelse(node_names %in% BGSD[[i]], "orange",
ifelse(node_names %in% FG[[i]], "blue",
ifelse(node_names %in% SD[[i]], "yellow",
ifelse(node_names %in% BG[[i]], "red", "black")))))))
}
# Set the node names and label colors based on HI behavior
BG <- SD <- FG <- BGSD <- BGFG <- SDFG <- BGSDFG <- vector("list", length = length(dolp_ig))
for (i in seq_along(dolp_ig)) {
# Set the node names
V(dolp_ig[[i]])$name <- rownames(nxn[[i]])
# Parse out what HI behavior they engage in
BG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "BG" & HI_data[[i]]$Freq > 0])
SD[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "SD" & HI_data[[i]]$Freq > 0])
FG[[i]] <- as.vector(HI_data[[i]]$Code[HI_data[[i]]$DiffHI == "FG" & HI_data[[i]]$Freq > 0])
BGSD[[i]] <- intersect(BG[[i]], SD[[i]])
BGFG[[i]] <- intersect(BG[[i]], FG[[i]])
SDFG[[i]] <- intersect(SD[[i]], FG[[i]])
BGSDFG[[i]] <- intersect(BGSD[[i]], FG[[i]])
# Initialize label_color attribute for each node
V(dolp_ig[[i]])$label_color <- "black"
# Set label colors based on categories
node_names <- V(dolp_ig[[i]])$name
V(dolp_ig[[i]])$label_color <- ifelse(node_names %in% BGSDFG[[i]], "brown",
ifelse(node_names %in% BGFG[[i]], "purple",
ifelse(node_names %in% SDFG[[i]], "green",
ifelse(node_names %in% BGSD[[i]], "orange",
ifelse(node_names %in% FG[[i]], "blue",
ifelse(node_names %in% SD[[i]], "yellow",
ifelse(node_names %in% BG[[i]], "red", "black")))))))
}
# Generate a vector of colors based on the number of unique memberships
for (i in seq_along(dolp_ig)) {
V(dolp_ig[[i]])$color <- NA
col <- rainbow(max(newman[[i]]$membership))
for (j in 1:max(newman[[i]]$membership)){
V(dolp_ig[[i]])$color[which(newman[[i]]$membership==j)] <- col[j]
}
}
# Make sure the HI dolphins stand out
for (i in seq_along(dolp_ig)) {
V(dolp_ig[[i]])$size <- ifelse(V(dolp_ig[[i]])$name %in% row_names_HI[[i]], 10, 5)
}
# Set up the plotting area with 1 row and 2 columns for side-by-side plots
par(mfrow=c(1, 2), mar = c(0.5, 0.5, 2, 0.5))
# Main labels for the plots
main_labels <- c("1993-2004 Network", "2005-2014 Network")
# Plot the graph with individual IDs as labels
for (i in seq_along(dolp_ig)) {
plot(dolp_ig[[i]],
layout = layout_with_fr(dolp_ig[[i]]),
# link weight, rescaled for better visualization
edge.width= E(dolp_ig[[i]])$weight*4,
# node size as degree (rescaled)
vertex.size= V(dolp_ig[[i]])$size,
vertex.frame.color= NA, #"black",
vertex.label.family = "Helvetica",
vertex.label=ifelse(V(dolp_ig[[i]])$name %in% row_names_HI[[i]], as.character(V(dolp_ig[[i]])$name), NA),
vertex.label.color = V(dolp_ig[[i]])$label_color,
vertex.label.cex=0.8,
vertex.label.dist=0.5,
# edge.curved=0,
vertex.frame.width=0.01)
# Add the main label above the plot
title(main = main_labels[i], line = -1)
}
# Set the node names
V(dolp_ig[[2]])$name <- rownames(nxn[[2]])
# Parse out what HI behavior they engage in
BG <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "BG" & HI_data[[2]]$Freq > 0])
SD <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "SD" & HI_data[[2]]$Freq > 0])
FG <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "FG" & HI_data[[2]]$Freq > 0])
BGSD <- intersect(BG[[2]], SD[[2]])
BGFG <- intersect(BG[[2]], FG[[2]])
SDFG <- intersect(SD[[2]], FG[[2]])
BGSDFG <- intersect(BGSD[[2]], FG[[2]])
# Parse out what HI behavior they engage in
BG <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "BG" & HI_data[[2]]$Freq > 0])
SD <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "SD" & HI_data[[2]]$Freq > 0])
FG <- as.vector(HI_data[[2]]$Code[HI_data[[2]]$DiffHI == "FG" & HI_data[[2]]$Freq > 0])
BGSD <- intersect(BG, SD)
BGFG <- intersect(BG, FG)
SDFG <- intersect(SD, FG)
BGSDFG <- intersect(BGSD, FG)
BGSDFG
# Set up the plotting area with 1 row and 2 columns for side-by-side plots
par(mfrow=c(1, 2), mar = c(0.5, 0.5, 2, 0.5))
# Main labels for the plots
main_labels <- c("1993-2004 Network", "2005-2014 Network")
# Plot the graph with individual IDs as labels
for (i in seq_along(dolp_ig)) {
plot(dolp_ig[[i]],
layout = layout_with_fr(dolp_ig[[i]]),
# link weight, rescaled for better visualization
edge.width= E(dolp_ig[[i]])$weight*4,
# node size as degree (rescaled)
vertex.size= V(dolp_ig[[i]])$size,
vertex.frame.color= NA, #"black",
vertex.label.family = "Helvetica",
vertex.label=ifelse(V(dolp_ig[[i]])$name %in% row_names_HI[[i]], as.character(V(dolp_ig[[i]])$name), NA),
vertex.label.color = V(dolp_ig[[i]])$label_color,
vertex.label.cex=0.8,
vertex.label.dist=0.5,
# edge.curved=0,
vertex.frame.width=0.01)
# Add the main label above the plot
title(main = main_labels[i], line = -1)
}
BGSD
BGFG
BGSDFG
# Set working directory here
setwd("../data")
###########################################################################
# PART 1: Divide the data into different resolutions ----------------------------
## load all necessary packages
library(vegan)
# Run multiple cores for faster computing
require(doParallel)
library(sfsmisc, verbose=F)
# Read in file and add months
sample_data <- read.csv("sample_data.csv")
list_years <- readRDS("list_years.RData")
# Estimate sampling effort and size for each period
## List years
year_list <- lapply(list_years, function(df) unique(df$Year))
year_list
## Get estimate of sampling effort
effort <- as.data.frame(lapply(list_years, function(df) length(unique(df$Date))))
colnames(effort) <- c(1,2)
effort
## Get estimate of population size
unique_ID_year <- as.data.frame(lapply(list_years, function(df) length(unique(df$Code))))
colnames(unique_ID_year) <- c(1,2)
unique_ID_year
colnames(FG_effort) <- c(1,2)
## Get estimate of population size within each HI group
IDbehav_BG <- readRDS("IDbehav_BG.RData")
IDbehav_FG <- readRDS("IDbehav_FG.RData")
IDbehav_SD <- readRDS("IDbehav_SD.RData")
BG <- unique(unlist(sapply(IDbehav_BG, function(df) df$Code[df$HI != 0])))
FG <- unique(unlist(sapply(IDbehav_FG, function(df) df$Code[df$HI != 0])))
SD <- unique(unlist(sapply(IDbehav_SD, function(df) df$Code[df$HI != 0])))
BG_effort <- as.data.frame(lapply(IDbehav_BG, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(BG_effort) <- c(1,2)
FG_effort <- as.data.frame(lapply(IDbehav_FG, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(FG_effort) <- c(1,2)
SD_effort <- as.data.frame(lapply(IDbehav_SD, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(SD_effort) <- c(1,2)
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, BG_effort, SD_effort, FG_effort)) # Days per year and pop size per year
BG_effort
# Extract specific columns from each data frame in list_years
aux_data <- function(list_years) {
aux <- lapply(list_years, function(df) {
data.frame(
Code = df$Code,
Behaviors = df$Behaviors,
HumanInteraction = df$HumanInteraction,
ConfHI = df$ConfHI)})
# Add the 'Foraging' variable to each data frame in the 'aux' list
aux <- lapply(aux, function(df) {
df$Foraging <- "Other"
df$Foraging[grepl(pattern = 'Feed', x = df$Behaviors, ignore.case = FALSE)] <- "Feed"
df
})
return(aux)
}
aux <- aux_data(list_years)
# Categorize ID to Foraging
ID_forg <- function(aux_data) {
IDbehav <- lapply(aux_data, function(df) {
df <- table(df$Code, df$Foraging)
df <- as.data.frame(df, stringsAsFactors = FALSE)
df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
return(IDbehav)
}
IDbehav <- ID_forg(aux)
# HI behaviors should be partitioned into 3 different types---------------------
#' BG = Beg: F, G
#' SD = Scavenge and Depredation: B, C, D, E
#' FG = Fixed Gear Interaction: P
# Change the code using ifelse statements
subset_HI <- function(aux_data) {
for (i in seq_along(aux_data)) {
aux_data[[i]]$DiffHI <- ifelse(aux_data[[i]]$ConfHI %in% c("F", "G"), "BG",
ifelse(aux_data[[i]]$ConfHI %in% c("B", "C", "D", "E"), "SD",
ifelse(aux_data[[i]]$ConfHI %in% c("P"), "FG", "None")))
}
return(aux_data)  # Return the modified list of data frames
}
aux <- subset_HI(aux)
# Categorize DiffHI to IDs
diff_raw <- function(aux_data) {
rawHI_diff <- lapply(aux_data, function(df) {
table_df <- as.data.frame(table(df$Code, df$DiffHI))
colnames(table_df) <- c("Code", "DiffHI", "Freq")
return(table_df)
})}
rawHI_diff <- diff_raw(aux)
# Create a frequency count for each HI behavior
get_IDHI <- function(HI, IDbehav_data, rawHI_diff_data) {
lapply(seq_along(IDbehav_data), function(i) {
df <- IDbehav_data[[i]]
HI_freq <- rawHI_diff_data[[i]]$Freq[rawHI_diff_data[[i]]$DiffHI == HI]
df$HI <- HI_freq[match(df$Code, rawHI_diff_data[[i]]$Code)]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
# Including zeros
IDbehav_BG <- get_IDHI("BG", IDbehav, rawHI_diff)
IDbehav_SD <- get_IDHI("SD", IDbehav, rawHI_diff)
IDbehav_FG <- get_IDHI("FG", IDbehav, rawHI_diff)
saveRDS(IDbehav_BG, "IDbehav_BG.RData")
saveRDS(IDbehav_FG, "IDbehav_FG.RData")
saveRDS(IDbehav_SD, "IDbehav_SD.RData")
## Get estimate of population size within each HI group
IDbehav_BG <- readRDS("IDbehav_BG.RData")
IDbehav_FG <- readRDS("IDbehav_FG.RData")
IDbehav_SD <- readRDS("IDbehav_SD.RData")
BG <- unique(unlist(sapply(IDbehav_BG, function(df) df$Code[df$HI != 0])))
FG <- unique(unlist(sapply(IDbehav_FG, function(df) df$Code[df$HI != 0])))
SD <- unique(unlist(sapply(IDbehav_SD, function(df) df$Code[df$HI != 0])))
BG_effort <- as.data.frame(lapply(IDbehav_BG, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(BG_effort) <- c(1,2)
FG_effort <- as.data.frame(lapply(IDbehav_FG, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(FG_effort) <- c(1,2)
SD_effort <- as.data.frame(lapply(IDbehav_SD, function(df)
length(unique(df$Code[df$HI > 0]))))
colnames(SD_effort) <- c(1,2)
## Compare effort to population size
pop_effort <- as.data.frame(rbind(effort, unique_ID_year, BG_effort, SD_effort, FG_effort)) # Days per year and pop size per year
rownames(pop_effort) <- c('Number of Days Surveyed', 'Number of Individuals', 'Beggars', 'Scavengers/Depredators', 'Fixed Gear Interactors')
pop_effort
# Get all unique Code values in the entire sample_data
all_codes <- unique(sample_data$Code)
# Create a function that counts the IDs in each element
count_instances <- function(df) {
code_counts <- table(df$Code)
code_counts <- code_counts[match(all_codes, names(code_counts))] # Add codes to table even if they aren't in that time period
code_counts[is.na(code_counts)] <- 0 # Replace NAs with 0
return(code_counts)
}
# -------------------- 22 sets of 1 year increments----------------------------
# Make a list of only 1 year per dataframe
list_years <- split(sample_data, sample_data$Year)
# Apply the count_instances function to each year
instances_per_year <- lapply(list_years, count_instances)
# Convert the list of counts to a data frame
p1y <- do.call(rbind, instances_per_year)
# Transforming into binary matrices
p1y <- as.matrix(p1y); p1y[which(p1y>=1)] = 1; p1y[which(p1y<1)] = 0
# -------------------- 7 sets of 3 year increments----------------------------
# Make a list of 3 years per dataframe
sample_data$ThreeYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 3, by = 3), labels = FALSE)
list_threeyears <- split(sample_data, sample_data$ThreeYearIncrement)
# Apply the count_instances function to each two years
instances_per_threeyear <- lapply(list_threeyears, count_instances)
# Convert the list of counts to a data frame
p3y <- do.call(rbind, instances_per_threeyear)
# Transforming into binary matrices
p3y <- as.matrix(p3y); p3y[which(p3y>=1)] = 1; p3y[which(p3y<1)] = 0
# -------------------- 3 sets of 7 year increments----------------------------
# Make a list of 7 years per dataframe
sample_data$SevenYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 7, by = 7), labels = FALSE)
list_sevenyears <- split(sample_data, sample_data$SevenYearIncrement)
# Apply the count_instances function to each two years
instances_per_sevenyear <- lapply(list_sevenyears, count_instances)
# Convert the list of counts to a data frame
p7y <- do.call(rbind, instances_per_sevenyear)
# Transforming into binary matrices
p7y <- as.matrix(p7y); p7y[which(p7y>=1)] = 1; p7y[which(p7y<1)] = 0
# -------------------- 2 sets of 11 year increments----------------------------
# Make a list of 8 years per dataframe
sample_data$ElevenYearIncrement <- cut(sample_data$Year, breaks = seq(min(sample_data$Year), max(sample_data$Year) + 11, by = 11), labels = FALSE)
list_elevenyears <- split(sample_data, sample_data$ElevenYearIncrement)
# Apply the count_instances function to each two years
instances_per_elevenyear <- lapply(list_elevenyears, count_instances)
# Convert the list of counts to a data frame
p11y <- do.call(rbind, instances_per_elevenyear)
# Transforming into binary matrices
p11y <- as.matrix(p11y); p11y[which(p11y>=1)] = 1; p11y[which(p11y<1)] = 0
source("../code/functions.R") # WDI & WDI permutation
# Turn over results
t1 = turnover_w(data = p1y, iter = 1000, subseq=F, plot=FALSE)
t3 = turnover_w(data = p3y, iter = 1000, subseq=F, plot=FALSE)
t7 = turnover_w(data = p7y, iter = 1000, subseq=F, plot=FALSE)
t11 = turnover_w(data = p11y, iter = 1000, subseq=F, plot=FALSE)
all = rbind(t1, t3, t7, t11)
all = cbind(c(1, 2, 3, 4), all)
par(mar=c(4,5,4,1))
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.30,0.70), xlim=c(1,8), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4),las=1, labels=c(22, 7, 3, 2), cex.axis=0.7)
mtext(side = 3, "Number of periods", line = 2, font = 1)
par(mar=c(4,5,4,1))
# Plot the final results. Whisker represent 95%CI generated by the null model. X-axis represent the number of periods and their respective lengths
errbar(x=c(1, 2, 3, 4), y=all[,2], all[,4], all[,5], ylab="Turnover (Averaged Whittaker Dissimilarity)",
pch=1, cap=0.02, xaxt='n', xlab="", las=1, cex=1.0, ylim=c(0.30,0.70), xlim=c(1,4), cex.axis=0.8)
axis(1, at=c(1, 2, 3, 4),las=1, cex.axis=0.7)
mtext(side = 1, "Length of periods (years)", line = 2, font = 1)
axis(3, at=c(1, 2, 3, 4),las=1, labels=c(22, 7, 3, 2), cex.axis=0.7)
mtext(side = 3, "Number of periods", line = 2, font = 1)
# Print final results
all
