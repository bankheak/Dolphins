MSY
K = 250
r = 0.08
r * N * (1 - N/K)
K = 250
r = 0.08
r*K/4
#' The max of logistic growth curve is r*K/4,
#' which can be found by plugging in K/2 for N in rN (1 - N/K)
r = 0.6
K = 500
N = K/2
MSY = r * N * (1 - N/K)
MSY
r*K/4
#' The max of logistic growth curve is r*K/4,
#' which can be found by plugging in K/2 for N in rN (1 - N/K)
r = 0.6
K = 500
N = K/2
MSY = r * N * (1 - N/K)
MSY
K = 250
r = 0.08
N = K/2
r * N * (1 - N/K)
r = 0.11
K = 11500 * 2
N = 11500
same <- r * N * (1 - N/K)
# dN/dt - rN(1-(N/K))
N = 14000
change <- r*N*(1-N/K)
change - same
##The Ricker function: Recruits  = alpha*N*exp(-beta*N)
# 8 wild turkeys
alpha <-  7
beta <- 0.003448
N = 1:800
Recruits_turkey <- alpha*N*exp(-beta*N)
plot(N, Recruits_turkey, xlab = "Population Size", ylab = "Expected Recruitment")
abline(0,1)
##The Beverton-Holt function has various equivalent forms.
##In this problem use Recruits = 1/(alpha + beta/N)
# 14 ruffed grouse
alpha <- 0.0012
beta <- 0.35
Recruits_grouse = 1/(alpha + beta/N)
plot(N, Recruits_grouse, xlab = "Population Size", ylab = "Expected Recruitment")
abline(0,1)
max(Recruits_turkey)
max(Recruits_grouse)
##The Ricker function: Recruits  = alpha*N*exp(-beta*N)
# 8 wild turkeys
alpha <-  7
beta <- 0.003448
N = 1:800
Recruits_turkey <- alpha*N*exp(-beta*N)
plot(N, Recruits_turkey, xlab = "Population Size", ylab = "Expected Recruitment")
abline(0,1)
##The Beverton-Holt function has various equivalent forms.
##In this problem use Recruits = 1/(alpha + beta/N)
# 14 ruffed grouse
alpha <- 0.0012
beta <- 0.35
Recruits_grouse = 1/(alpha + beta/N)
plot(N, Recruits_grouse, xlab = "Population Size", ylab = "Expected Recruitment")
abline(0,1)
##The Ricker function: Recruits  = alpha*N*exp(-beta*N)
# 8 wild turkeys
alpha <-  7
beta <- 0.003448
N = 1:800
Recruits_turkey <- alpha*N*exp(-beta*N)
plot(N, Recruits_turkey, xlab = "Population Size", ylab = "Expected Recruitment")
abline(0,1)
##The Beverton-Holt function has various equivalent forms.
##In this problem use Recruits = 1/(alpha + beta/N)
# 14 ruffed grouse
alpha <- 0.0012
beta <- 0.35
Recruits_grouse = 1/(alpha + beta/N)
plot(N, Recruits_grouse, xlab = "Population Size", ylab = "Expected Recruitment")
abline(0,1)
Turkey_MSY <- which.max(Recruits_turkey - N)
Turkey_MSY
Grouse_MSY <- which.max(Recruits_grouse - N)
Grouse_MSY
t_vect <- Recruits_turkey - N
Turkey_MSY <- which.max(t_vect)
Turkey_MSY
t_vect <- Grouse_MSY - N
Grouse_MSY <- which.max(Recruits_grouse - N)
Grouse_MSY
t_vect
t_vect <- Recruits_turkey - N
Turkey_MSY <- which.max(t_vect)
Turkey_MSY
t_vect <- Grouse_MSY - N
Grouse_MSY <- which.max(Recruits_grouse - N)
Grouse_MSY
r <- 0.3
K <- 500
N0 <- 500
# H = 20
H = 20
numyears <- 50
N <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0:600))
?plot
# H = 20
H = 20
numyears <- 50
N <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N40_t, c(changeN20, changeN30, changeN40))
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylim = range(c(changeN20, changeN30, changeN40)), ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Population Size')
dt <- 1
# H = 20
N20_t <- N_20[1:49]
N20_t1 <- N_20[2:50]
changeN20 <- (N20_t1 - N20_t)/dt
# H = 30
N30_t <- N_30[1:49]
N30_t1 <- N_30[2:50]
changeN30 <- (N30_t1 - N30_t)/dt
# H = 40
N40_t <- N_40[1:49]
N40_t1 <- N_40[2:50]
changeN40 <- (N40_t1 - N40_t)/dt
# Plot the first population
plot(N20_t, changeN20, type = 'l', col = 'blue', ylab = 'dN/dt', xlab = 'Time', main = 'Population Changes Over Time')
N=1:500
dndt=r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N,dndt,xlab="Population Size",ylab="dN/dt")
abline(h=20)
abline(h=30,lty=2)
abline(h=40,lty=3)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20, lyt = 2)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2)
abline(h = 40, lty = 2)
?abline
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt", ylim = c(0,50))
abline(h = 20)
abline(h = 30, lty = 2, lwd = 1.5)
abline(h = 40, lty = 2)
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.3
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.4
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
F_m = 0.2
N <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N[t + 1] = N[t] + r * N[t] * (1 - N[t]/K) - F_m * N[t]
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size")
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 1)))
(max(N_small) + 50)
F_m = 0.2
N_small <- rep(NA, numyears)
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
N_small
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_small) + 50)))
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_med) + 1)))
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size", ylim = c(0, (max(N_large) + 1)))
N_small[1] <- N0
F_m = 0.2
N_small <- rep(NA, numyears)
N_small[1] <- N0
for(t in 1:(numyears-1)){
N_small[t + 1] = N_small[t] + r * N_small[t] * (1 - N_small[t]/K) - F_m * N_small[t]
}
# Plot through time
plot(1:numyears, N_small, xlab = "Years", ylab = "Population Size")
F_m = 0.3
N_med <- rep(NA, numyears)
N_med[1] <- N0
for(t in 1:(numyears-1)){
N_med[t + 1] = N_med[t] + r * N_med[t] * (1 - N_med[t]/K) - F_m * N_med[t]
}
# Plot through time
plot(1:numyears, N_med, xlab = "Years", ylab = "Population Size")
F_m = 0.4
N_large <- rep(NA, numyears)
N_large[1] <- N0
for(t in 1:(numyears-1)){
N_large[t + 1] = N_large[t] + r * N_large[t] * (1 - N_large[t]/K) - F_m * N_large[t]
}
# Plot through time
plot(1:numyears, N_large, xlab = "Years", ylab = "Population Size")
N = 1:500
dndt = r * N * (1 - N/K)
plot(N, dndt, xlab = "Population Size", ylab = "dN/dt")
abline(0, 0.2)
abline(0, 0.3, lty=2)
abline(0, 0.4, lty=3)
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 20
H = 20
numyears <- 50
N_20 <- rep(NA, numyears)
N_20[1] <- N0
for(t in 1:(numyears-1)){
N_20[t + 1] = N_20[t] + r * N_20[t] * (1 - N_20[t]/K) - H
}
# Plot through time
plot(1:numyears, N_20, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H = 30
H = 30
N_30 <- rep(NA, numyears)
N_30[1] <- N0
for(t in 1:(numyears-1)){
N_30[t + 1] = N_30[t] + r * N_30[t] * (1 - N_30[t]/K) - H
}
# Plot through time
plot(1:numyears, N_30, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
# H= 40
H = 40
N_40 <- rep(NA, numyears)
N_40[1] <- N0
for(t in 1:(numyears-1)){
N_40[t + 1] = N_40[t] + r * N_40[t] * (1 - N_40[t]/K) - H
}
# Plot through time
plot(1:numyears, N_40, xlab = "Years", ylab = "Population Size", ylim = c(0,600))
gc()
gc()
gc()
dist = matrix(c(0,5,1,8,5,0,6,3,1,6,0,9,8,3,9,0), nrow = 4, ncol = 4)
dist
1-(dist / max(dist))
gc()
# Set working directory here
setwd("../data")
if(!require(ggplot2)){install.packages('ggplot2'); library(ggplot2)}
# Visualize data: HAB v HI
orig_data$Confirmed_HI <- ifelse(orig_data$ConfHI != "0", 1, 0)
# Read in full datasheet and list (after wrangling steps)
orig_data <- read.csv("orig_data.csv") # original data
# Visualize data: HAB v HI
orig_data$Confirmed_HI <- ifelse(orig_data$ConfHI != "0", 1, 0)
# Filter data where Confirmed_HI == 1
filtered_data <- orig_data[orig_data$Confirmed_HI == 1, ]
# Initialize an empty list to store the counts
yearly_counts <- list()
# Loop through each year
for (year in unique(filtered_data$Year)) {
# Get the unique individuals for the current year
unique_ids <- unique(filtered_data$Code[filtered_data$Year == year])
# Store the count of unique IDs in the list
yearly_counts[[as.character(year)]] <- length(unique_ids)
}
# Convert the list to a data frame for easier viewing
HAB_HI_data <- data.frame(Year = names(yearly_counts), HI_IDs = unlist(yearly_counts))
HAB_HI_data$Year <- as.numeric(HAB_HI_data$Year)
# Add hAB data
HAB_HI_data$HAB <- c(22, 13, rep(0, 2), 5, 0, 12, 8, 18, 5, 38, 19, 2, rep(0, 4), 9)
# Create a barplot
ggplot(aes(x = Year), data = HAB_HI_data) +
geom_line(aes(y = HI_IDs, color = "HI_IDs", group = 1), size = 1) +
geom_point(aes(y = HI_IDs, color = "HI_IDs"), size = 2) +
geom_line(aes(y = HAB, color = "HAB", group = 1), size = 1) +
geom_point(aes(y = HAB, color = "HAB"), size = 2) +
scale_y_continuous(
name = "Number of human-centric foraging individuals",
sec.axis = sec_axis(~ ., name = "Number of weeks with >100,000 cells/L")
) +
scale_x_continuous(breaks = c(1995, 2000, 2005, 2010)) +  # Specify the years you want to display
labs(x = "Year") +
scale_color_manual(values = c("HI_IDs" = "blue", "HAB" = "orange"),
name = "Variables",
labels = c("Human-centric Behaviors", "Harmful Algal Blooms")) +
theme(
panel.background = element_blank(),  # Removes background gridlines
axis.line = element_line(colour = "black"),  # Adds axis lines
axis.ticks = element_line(colour = "black"),  # Adds tick marks
panel.grid = element_blank()  # Ensures no additional gridlines appear
) +
geom_vline(xintercept = c(2000.5, 2006.5), linetype = "dashed", color = "black", size = 1.5)
# Create a barplot
ggplot(aes(x = Year), data = HAB_HI_data) +
geom_line(aes(y = HI_IDs, color = "HI_IDs", group = 1), size = 1) +
geom_point(aes(y = HI_IDs, color = "HI_IDs"), size = 2) +
geom_line(aes(y = HAB, color = "HAB", group = 1), size = 1) +
geom_point(aes(y = HAB, color = "HAB"), size = 2) +
scale_y_continuous(
name = "Number of human-centric foraging individuals",
sec.axis = sec_axis(~ ., name = "Number of weeks with >100,000 cells/L")
) +
scale_x_continuous(breaks = c(1995, 2000, 2005, 2010)) +  # Specify the years you want to display
labs(x = "Year") +
scale_color_manual(values = c("HI_IDs" = "blue", "HAB" = "orange"),
name = "Variables",
labels = c("Human-centric Behaviors", "Harmful Algal Blooms")) +
theme(
panel.background = element_blank(),  # Removes background gridlines
axis.line = element_line(colour = "black"),  # Adds axis lines
axis.ticks = element_line(colour = "black"),  # Adds tick marks
panel.grid = element_blank()  # Ensures no additional gridlines appear
)
# Create a barplot
ggplot(aes(x = Year), data = HAB_HI_data) +
geom_line(aes(y = HI_IDs, color = "HI_IDs", group = 1), size = 1) +
geom_point(aes(y = HI_IDs, color = "HI_IDs"), size = 2) +
geom_line(aes(y = HAB, color = "HAB", group = 1), size = 1) +
geom_point(aes(y = HAB, color = "HAB"), size = 2) +
scale_y_continuous(
name = "Number of human-centric foraging individuals",
sec.axis = sec_axis(~ ., name = "Number of weeks with >100,000 cells/L")
) +
scale_x_continuous(breaks = c(1995, 2000, 2005, 2010)) +  # Specify the years you want to display
labs(x = "Year") +
scale_color_manual(values = c("HI_IDs" = "blue", "HAB" = "orange"),
name = "Variables",
labels = c( "Harmful Algal Blooms", "Human-centric Behaviors")) +
theme(
panel.background = element_blank(),  # Removes background gridlines
axis.line = element_line(colour = "black"),  # Adds axis lines
axis.ticks = element_line(colour = "black"),  # Adds tick marks
panel.grid = element_blank()  # Ensures no additional gridlines appear
)
# Create a barplot
ggplot(aes(x = Year), data = HAB_HI_data) +
geom_line(aes(y = HI_IDs, color = "HI_IDs", group = 1), size = 1) +
geom_point(aes(y = HI_IDs, color = "HI_IDs"), size = 2) +
geom_line(aes(y = HAB, color = "HAB", group = 1), size = 1) +
geom_point(aes(y = HAB, color = "HAB"), size = 2) +
scale_y_continuous(
name = "Number of human-centric foraging individuals",
sec.axis = sec_axis(~ ., name = "Number of weeks with >100,000 cells/L")
) +
scale_x_continuous(breaks = c(1995, 2000, 2005, 2010)) +  # Specify the years you want to display
labs(x = "Year") +
scale_color_manual(values = c("HI_IDs" = "blue", "HAB" = "orange"),
name = "Variables",
labels = c( "Harmful Algal Blooms", "Human-centric Behaviors")) +
theme(
panel.background = element_blank(),  # Removes background gridlines
axis.line = element_line(colour = "black"),  # Adds axis lines
axis.ticks = element_line(colour = "black"),  # Adds tick marks
panel.grid = element_blank()  # Ensures no additional gridlines appear
) + geom_vline(xintercept = c(2000.5, 2006.5), linetype = "dashed", color = "black", size = 1.5)
