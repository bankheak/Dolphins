df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
return(IDbehav)
}
IDbehav_sexage <- ID_forg(aux_sexage)
IDbehav <- ID_forg(aux)
View(IDbehav_sexage)
# Clump all the HI behaviors together------------------------------------------
clump_behav <- function(aux_data) {
for (i in seq_along(aux_data)) {
aux_data[[i]]$ConfHI <- ifelse(aux_data[[i]]$ConfHI != "0", 1, 0)}
# Categorize ConfHI to IDs
rawHI <- lapply(aux_data, function(df) {
# Sum up the frequencies of HI by code
aggregated_df <- aggregate(ConfHI ~ Code, data = df, sum)
unique_codes_df <- data.frame(Code = unique(df$Code))
# Merge the unique codes data frame with the aggregated data frame
merged_df <- merge(unique_codes_df, aggregated_df, by = "Code", all.x = TRUE)
# Fill missing Freq values (if any) with 0
merged_df$ConfHI[is.na(merged_df$ConfHI)] <- 0
return(merged_df)
})
return(rawHI)
}
rawHI_sexage <- clump_behav(aux_sexage)
# Get HI Freq
create_IDbehav_HI <- function(IDbehav){
IDbehav_HI <- lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HI <- rawHI[[i]]$ConfHI
colnames(df) <- c("Code", "Foraging", "HI")
df
})
return(IDbehav_HI)
}
IDbehav_HI_sexage <- create_IDbehav_HI(IDbehav_sexage)
# Get HI Freq
create_IDbehav_HI <- function(IDbehav_data){
IDbehav_HI <- lapply(seq_along(IDbehav_data), function(i) {
df <- IDbehav_data[[i]]
df$HI <- rawHI[[i]]$ConfHI
colnames(df) <- c("Code", "Foraging", "HI")
df
})
return(IDbehav_HI)
}
IDbehav_HI_sexage <- create_IDbehav_HI(IDbehav_sexage)
# Extract specific columns from each data frame in list_years
aux_data <- function(list_years) {
aux <- lapply(list_years, function(df) {
data.frame(
Code = df$Code,
Behaviors = df$Behaviors,
HumanInteraction = df$HumanInteraction,
ConfHI = df$ConfHI)})
# Add the 'Foraging' variable to each data frame in the 'aux' list
aux <- lapply(aux, function(df) {
df$Foraging <- "Other"
df$Foraging[grepl(pattern = 'Feed', x = df$Behaviors, ignore.case = FALSE)] <- "Feed"
df
})
return(aux)
}
aux <- aux_data(list_years)
aux_sexage <- aux_data(list_sexage_years)
# Categorize ID to Foraging
ID_forg <- function(aux_data) {
IDbehav <- lapply(aux_data, function(df) {
df <- table(df$Code, df$Foraging)
df <- as.data.frame(df, stringsAsFactors = FALSE)
df <- df[, c(1, 3)]
colnames(df) <- c("Code", "Forg_Freq")
df <- aggregate(. ~ Code, data = df, sum)
df
})
return(IDbehav)
}
IDbehav <- ID_forg(aux)
IDbehav_sexage <- ID_forg(aux_sexage)
# Clump all the HI behaviors together------------------------------------------
clump_behav <- function(aux_data) {
for (i in seq_along(aux_data)) {
aux_data[[i]]$ConfHI <- ifelse(aux_data[[i]]$ConfHI != "0", 1, 0)}
# Categorize ConfHI to IDs
rawHI <- lapply(aux_data, function(df) {
# Sum up the frequencies of HI by code
aggregated_df <- aggregate(ConfHI ~ Code, data = df, sum)
unique_codes_df <- data.frame(Code = unique(df$Code))
# Merge the unique codes data frame with the aggregated data frame
merged_df <- merge(unique_codes_df, aggregated_df, by = "Code", all.x = TRUE)
# Fill missing Freq values (if any) with 0
merged_df$ConfHI[is.na(merged_df$ConfHI)] <- 0
return(merged_df)
})
return(rawHI)
}
rawHI <- clump_behav(aux)
rawHI_sexage <- clump_behav(aux_sexage)
# Get HI Freq
create_IDbehav_HI <- function(IDbehav_data, rawHI_data){
IDbehav_HI <- lapply(seq_along(IDbehav_data), function(i) {
df <- IDbehav_data[[i]]
df$HI <- rawHI_data[[i]]$ConfHI
colnames(df) <- c("Code", "Foraging", "HI")
df
})
return(IDbehav_HI)
}
IDbehav_HI <- create_IDbehav_HI(IDbehav, rawHI)
IDbehav_HI_sexage <- create_IDbehav_HI(IDbehav_sexage, rawHI_sexage)
# Proportion of time Foraging spent in HI
Prop_HI <- function(IDbehav) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
df$HIprop <- as.numeric(df$HI) / as.numeric(df$Foraging)
df$HIprop[is.na(df$HIprop)] <- 0
# Keep only 'Code' and 'HIprop' columns
df <- df[, c('Code', 'HIprop')]
df
})
}
prob_HI <- Prop_HI(IDbehav_HI)
prop_HI_sexage <- Prop_HI(IDbehav_HI_sexage)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
#dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
dist_HI_sexage <- dis_matr(prop_HI_sexage)
View(dist_HI_sexage)
mrqap_full
## With sex and age included
mrqap_sexage <- mrqap.dsp(nxn_sexage[[year]] ~ kov_sexage[[year]] +
dist_HI_sexage[[year]],
randomisations = Nperm,
intercept = FALSE,
test.statistic = "beta")
mrqap_sexage
## With sex and age included
mrqap_sexage <- mrqap.dsp(nxn_sexage[[year]] ~ kov_sexage[[year]] +
sex_list[[year]] + age_list[[year]] + dist_HI_sexage[[year]],
randomisations = Nperm,
intercept = FALSE,
test.statistic = "beta")
mrqap_sexage
mrqap_full
# HI behaviors should be partitioned into 3 different types---------------------
#' B = Beg: F, G, H
#' P = Patrol: A, B, C
#' D = Depredation: D, E, P
# Change the code using ifelse statements
for (i in seq_along(aux)) {
aux[[i]]$DiffHI <- ifelse(aux[[i]]$ConfHI %in% c("F", "G", "H"), "Beg",
ifelse(aux[[i]]$ConfHI %in% c("A", "B", "C"), "Pat",
ifelse(aux[[i]]$ConfHI %in% c("P", "D", "E"), "Dep", "0")))
}
# Categorize DiffHI to IDs
rawHI_diff <- lapply(aux, function(df) {
table_df <- as.data.frame(table(df$Code, df$DiffHI))
colnames(table_df) <- c("Code", "DiffHI", "Freq")
return(table_df)
})
# Create a frequency count for each HI behavior
get_IDHI <- function(HI) {
lapply(seq_along(IDbehav), function(i) {
df <- IDbehav[[i]]
HI_freq <- rawHI_diff[[i]]$Freq[rawHI_diff[[i]]$DiffHI == HI]
df$HI <- HI_freq[match(df$Code, rawHI_diff[[i]]$Code)]
colnames(df) <- c("Code", "Foraging", "HI")
df
})
}
IDbehav_Beg <- get_IDHI("Beg")
IDbehav_Pat <- get_IDHI("Pat")
IDbehav_Dep <- get_IDHI("Dep")
prob_Beg <- Prop_HI(IDbehav_Beg)
prob_Pat <- Prop_HI(IDbehav_Pat)
prob_Dep <- Prop_HI(IDbehav_Dep)
dist_Beg <- dis_matr(prob_Beg)
dist_Pat <- dis_matr(prob_Pat)
dist_Dep <- dis_matr(prob_Dep)
## Without sex and age included and with behaviors divided
mrqap_sepHI <- mrqap.dsp(nxn[[year]] ~ kov[[year]] +
dist_Beg[[year]] + dist_Dep[[year]] + dist_Pat[[year]],
randomisations = Nperm,
intercept = FALSE,
test.statistic = "beta")
mrqap_sepHI
mrqap_full
mrqap_sepHI
mrqap_sexage
# Check for collinearity
correlation_matrix <- cor(dist_HI[[year]], dist_Beg[[year]], dist_Dep[[year]], dist_Pat[[year]])
# Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
View(predictor_matrices)
# Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
correlation_matrix[i, j] <-mantel.rtest(as.dist(predictor_matrices[i]), as.dist(predictor_matrices[i]), nrepet=999)
}
}
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
correlation_matrix[i, j] <-mantel.rtest(as.dist(predictor_matrices[[i]]), as.dist(predictor_matrices[[i]]), nrepet=999)
}
}
mantel.rtest(as.dist(predictor_matrices[[1]]), as.dist(predictor_matrices[[2]]), nrepet=999)
as.dist(predictor_matrices[[2]])
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
correlation_matrix[i, j] <- mantel.rtest(as.dist(predictor_matrices[[i]]), as.dist(predictor_matrices[[j]]), nrepet=999)
}
}
## Print the correlation matrix
print(correlation_matrix)
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
mtest <- mantel.rtest(as.dist(predictor_matrices[[i]]), as.dist(predictor_matrices[[j]]), nrepet=999)
correlation_matrix[i, j] <- mtest$correlation
}
}
## Print the correlation matrix
print(correlation_matrix)
mantel.rtest(as.dist(predictor_matrices[[1]]), as.dist(predictor_matrices[[2]]), nrepet=999)
mtest <- mantel.rtest(as.dist(predictor_matrices[[1]]), as.dist(predictor_matrices[[2]]), nrepet=999)
mtest$correlation
mtest$statistic
mtest$p
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(as.dist(dist_HI[[year]]), as.dist(dist_Beg[[year]]),
as.dist(dist_Pat[[year]]), as.dist(dist_Dep[[year]]))
View(predictor_matrices)
View(predictor_matrices)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
dist_Beg <- dis_matr(prob_Beg)
dist_Pat <- dis_matr(prob_Pat)
dist_Dep <- dis_matr(prob_Dep)
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
View(predictor_matrices)
View(dist_HI)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
#dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
dist_Beg <- dis_matr(prob_Beg)
dist_Pat <- dis_matr(prob_Pat)
dist_Dep <- dis_matr(prob_Dep)
View(dist_HI)
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
mantel.rtest(predictor_matrices[[1]], predictor_matrices[[2]], nrepet=999)
dist(dist_HI[[year]])
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
dissimilarity_HI[[i]] <- dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
View(dist_HI)
View(dist_HI)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
#dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
dist_Beg <- dis_matr(prob_Beg)
dist_Pat <- dis_matr(prob_Pat)
dist_Dep <- dis_matr(prob_Dep)
View(dist_Beg)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
dissimilarity_HI[[i]] <- as.dist(as.data.frame(dissimilarity_HI[[i]])) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
View(dist_HI)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
#dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
dissimilarity_HI
}
dist_HI <- dis_matr(prob_HI)
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
correlation_matrix[i, j] <- cor(predictor_matrices[[i]], predictor_matrices[[j]])
}
}
## Print the correlation matrix
print(correlation_matrix)
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
correlation_matrix[i, j] <- cor(predictor_matrices[[i]], predictor_matrices[[j]])
}
}
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
correlation_matrix[i, j] <- cor(t(predictor_matrices[[i]]), t(predictor_matrices[[j]]))
}
}
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
return(dissimilarity_HI)
}
dist_HI <- dis_matr(prob_HI)
View(dist_HI)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(fake_HIprop, method = "euclidean"))
dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
return(dissimilarity_HI)
}
dist_HI <- dis_matr(prob_HI)
View(dist_HI)
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- dist(matrix(fake_HIprop), method = "euclidean")
#dissimilarity_HI[[i]][is.na(dissimilarity_HI[[i]])] <- 0
#dissimilarity_HI[[i]] <- as.dist(dissimilarity_HI[[i]]) # HI dissimilarity
}
return(dissimilarity_HI)
}
dist_HI <- dis_matr(prob_HI)
dissimilarity_HI <- list()
fake_HIprop <- Prop_HI[[1]]$HIprop
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
Prop_HI <- prob_HI
dissimilarity_HI <- list()
fake_HIprop <- Prop_HI[[1]]$HIprop
fake_HIprop
dissimilarity_HI[[1]] <- dist(matrix(fake_HIprop), method = "euclidean")
dissimilarity_HI
View(dissimilarity_HI)
matrix(fake_HIprop)
?dist
dist(matrix(fake_HIprop), method = "Euclidean")
dist(matrix(fake_HIprop), method = "euclidean")
View(dissimilarity_HI)
as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
dissimilarity_HI <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
sum(is.na(dissimilarity_HI))
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
Prop_HI <- prob_HI
# Dissimilarity of HI proportion among individual dolphins, using Euclidean distance
dis_matr <- function(Prop_HI) {
dissimilarity_HI <- list()
for (i in seq_along(Prop_HI)) {
fake_HIprop <- Prop_HI[[i]]$HIprop
dissimilarity_HI[[i]] <- as.matrix(dist(matrix(fake_HIprop), method = "euclidean"))
}
return(dissimilarity_HI)
}
dist_HI <- dis_matr(prob_HI)
View(dist_HI)
dist_Beg <- dis_matr(prob_Beg)
dist_Pat <- dis_matr(prob_Pat)
dist_Dep <- dis_matr(prob_Dep)
as.dist(dist_HI[[year]])
# Check for collinearity
## Create a list of predictor matrices
predictor_matrices <- list(dist_HI[[year]], dist_Beg[[year]],
dist_Pat[[year]], dist_Dep[[year]])
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
mtest <- mantel.rtest(as.dist(predictor_matrices[[1]]), as.dist(predictor_matrices[[2]]), nrepet=999)
correlation_matrix[i, j] <- mtest$correlation
}
}
mtest <- mantel.rtest(as.dist(predictor_matrices[[1]]), as.dist(predictor_matrices[[2]]), nrepet=999)
mtest
str(mtest)
## Calculate correlation matrix
num_predictors <- length(predictor_matrices)
correlation_matrix <- matrix(NA, nrow = num_predictors, ncol = num_predictors)
for (i in 1:num_predictors) {
for (j in 1:num_predictors) {
mtest <- mantel.rtest(as.dist(predictor_matrices[[i]]), as.dist(predictor_matrices[[j]]), nrepet=999)
correlation_matrix[i, j] <- mtest$obs
}
}
## Print the correlation matrix
print(correlation_matrix)
mrqap_full
mrqap_sexage
## Without sex and age included
mrqap_full <- mrqap.dsp(nxn[[year]] ~ kov[[year]] + dist_HI[[year]],
randomisations = Nperm,
intercept = FALSE,
test.statistic = "beta")
## With sex and age included
mrqap_sexage <- mrqap.dsp(nxn_sexage[[year]] ~ kov_sexage[[year]] +
sex_list[[year]] + age_list[[year]] +
dist_HI_sexage[[year]],
randomisations = Nperm,
intercept = FALSE,
test.statistic = "beta")
mrqap_full
mrqap_sexage
mrqap_sepHI
## Print the correlation matrix
print(correlation_matrix) # It seems that BEG and HI are highly correlated
